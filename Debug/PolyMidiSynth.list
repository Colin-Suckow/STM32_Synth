
PolyMidiSynth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049dc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004b64  08004b64  00014b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b9c  08004b9c  0002040c  2**0
                  CONTENTS
  4 .ARM          00000000  08004b9c  08004b9c  0002040c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b9c  08004b9c  0002040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b9c  08004b9c  00014b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ba0  08004ba0  00014ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000040c  20000000  08004ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000040c  08004fb0  0002040c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  08004fb0  0002069c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002040c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb50  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025bb  00000000  00000000  0002ff8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e50  00000000  00000000  00032548  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d18  00000000  00000000  00033398  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018b82  00000000  00000000  000340b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b234  00000000  00000000  0004cc32  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008db71  00000000  00000000  00057e66  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e59d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cec  00000000  00000000  000e5a54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000040c 	.word	0x2000040c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004b4c 	.word	0x08004b4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000410 	.word	0x20000410
 80001c4:	08004b4c 	.word	0x08004b4c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2f>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a7c:	bf24      	itt	cs
 8000a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a86:	d90d      	bls.n	8000aa4 <__aeabi_d2f+0x30>
 8000a88:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a9c:	bf08      	it	eq
 8000a9e:	f020 0001 	biceq.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa8:	d121      	bne.n	8000aee <__aeabi_d2f+0x7a>
 8000aaa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aae:	bfbc      	itt	lt
 8000ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	4770      	bxlt	lr
 8000ab6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000abe:	f1c2 0218 	rsb	r2, r2, #24
 8000ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aca:	fa20 f002 	lsr.w	r0, r0, r2
 8000ace:	bf18      	it	ne
 8000ad0:	f040 0001 	orrne.w	r0, r0, #1
 8000ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae0:	ea40 000c 	orr.w	r0, r0, ip
 8000ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aec:	e7cc      	b.n	8000a88 <__aeabi_d2f+0x14>
 8000aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af2:	d107      	bne.n	8000b04 <__aeabi_d2f+0x90>
 8000af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af8:	bf1e      	ittt	ne
 8000afa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000afe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b02:	4770      	bxne	lr
 8000b04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b1a:	f000 fefd 	bl	8001918 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b1e:	f000 f845 	bl	8000bac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b22:	f000 f941 	bl	8000da8 <MX_GPIO_Init>
  MX_DAC_Init();
 8000b26:	f000 f897 	bl	8000c58 <MX_DAC_Init>
  MX_TIM2_Init();
 8000b2a:	f000 f8bf 	bl	8000cac <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000b2e:	f000 f90b 	bl	8000d48 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //HAL_DAC_MspInit(&hdac);
  //HAL_TIM_Base_MspInit(&htim2);

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000b32:	2100      	movs	r1, #0
 8000b34:	4815      	ldr	r0, [pc, #84]	; (8000b8c <main+0x78>)
 8000b36:	f001 f8a7 	bl	8001c88 <HAL_DAC_Start>


  //Initialize voices

  for(int i = 0; i < VOICE_TOTAL; i++) {
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	e00c      	b.n	8000b5a <main+0x46>
	  voices[i].state = 0;
 8000b40:	4913      	ldr	r1, [pc, #76]	; (8000b90 <main+0x7c>)
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	4613      	mov	r3, r2
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	4413      	add	r3, r2
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	440b      	add	r3, r1
 8000b4e:	3308      	adds	r3, #8
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < VOICE_TOTAL; i++) {
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3301      	adds	r3, #1
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <main+0x80>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	dbed      	blt.n	8000b40 <main+0x2c>
  }

  HAL_TIM_Base_Start_IT(&htim2);
 8000b64:	480c      	ldr	r0, [pc, #48]	; (8000b98 <main+0x84>)
 8000b66:	f002 fdd7 	bl	8003718 <HAL_TIM_Base_Start_IT>

  midi_init();
 8000b6a:	f000 fb0b 	bl	8001184 <midi_init>

  midi_register_event_handler(EVT_CHAN_NOTE_ON, &note_on);
 8000b6e:	490b      	ldr	r1, [pc, #44]	; (8000b9c <main+0x88>)
 8000b70:	2009      	movs	r0, #9
 8000b72:	f000 fb23 	bl	80011bc <midi_register_event_handler>
  midi_register_event_handler(EVT_CHAN_NOTE_OFF, &note_off);
 8000b76:	490a      	ldr	r1, [pc, #40]	; (8000ba0 <main+0x8c>)
 8000b78:	2008      	movs	r0, #8
 8000b7a:	f000 fb1f 	bl	80011bc <midi_register_event_handler>

  //HAL_UART_Receive(&huart2, Rx_data, 1);
  HAL_UART_Receive_IT(&huart1, Rx_data, sizeof(Rx_data));
 8000b7e:	2201      	movs	r2, #1
 8000b80:	4908      	ldr	r1, [pc, #32]	; (8000ba4 <main+0x90>)
 8000b82:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <main+0x94>)
 8000b84:	f003 f9d6 	bl	8003f34 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000b88:	e7fe      	b.n	8000b88 <main+0x74>
 8000b8a:	bf00      	nop
 8000b8c:	20000500 	.word	0x20000500
 8000b90:	20000514 	.word	0x20000514
 8000b94:	20000000 	.word	0x20000000
 8000b98:	20000658 	.word	0x20000658
 8000b9c:	08001279 	.word	0x08001279
 8000ba0:	08001329 	.word	0x08001329
 8000ba4:	2000047c 	.word	0x2000047c
 8000ba8:	20000480 	.word	0x20000480

08000bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b09c      	sub	sp, #112	; 0x70
 8000bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bb6:	2228      	movs	r2, #40	; 0x28
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f003 ffbe 	bl	8004b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	2234      	movs	r2, #52	; 0x34
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f003 ffb0 	bl	8004b3c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be0:	2301      	movs	r3, #1
 8000be2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000be4:	2310      	movs	r3, #16
 8000be6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be8:	2302      	movs	r3, #2
 8000bea:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bec:	2300      	movs	r3, #0
 8000bee:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000bf0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000bf4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f001 fa90 	bl	8002120 <HAL_RCC_OscConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000c06:	f000 f931 	bl	8000e6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c0a:	230f      	movs	r3, #15
 8000c0c:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c20:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c24:	2102      	movs	r1, #2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f002 f982 	bl	8002f30 <HAL_RCC_ClockConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000c32:	f000 f91b 	bl	8000e6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c36:	2301      	movs	r3, #1
 8000c38:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c3e:	463b      	mov	r3, r7
 8000c40:	4618      	mov	r0, r3
 8000c42:	f002 fbab 	bl	800339c <HAL_RCCEx_PeriphCLKConfig>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000c4c:	f000 f90e 	bl	8000e6c <Error_Handler>
  }
}
 8000c50:	bf00      	nop
 8000c52:	3770      	adds	r7, #112	; 0x70
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8000c68:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <MX_DAC_Init+0x4c>)
 8000c6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ca8 <MX_DAC_Init+0x50>)
 8000c6c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000c6e:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <MX_DAC_Init+0x4c>)
 8000c70:	f000 ffc9 	bl	8001c06 <HAL_DAC_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_DAC_Init+0x26>
  {
    Error_Handler();
 8000c7a:	f000 f8f7 	bl	8000e6c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <MX_DAC_Init+0x4c>)
 8000c8e:	f001 f832 	bl	8001cf6 <HAL_DAC_ConfigChannel>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_DAC_Init+0x44>
  {
    Error_Handler();
 8000c98:	f000 f8e8 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000500 	.word	0x20000500
 8000ca8:	40007400 	.word	0x40007400

08000cac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b088      	sub	sp, #32
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cb2:	f107 0310 	add.w	r3, r7, #16
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cca:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <MX_TIM2_Init+0x98>)
 8000ccc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cd0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	; (8000d44 <MX_TIM2_Init+0x98>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd8:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <MX_TIM2_Init+0x98>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1600;
 8000cde:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <MX_TIM2_Init+0x98>)
 8000ce0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000ce4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce6:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <MX_TIM2_Init+0x98>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cec:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <MX_TIM2_Init+0x98>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cf2:	4814      	ldr	r0, [pc, #80]	; (8000d44 <MX_TIM2_Init+0x98>)
 8000cf4:	f002 fce4 	bl	80036c0 <HAL_TIM_Base_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000cfe:	f000 f8b5 	bl	8000e6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d08:	f107 0310 	add.w	r3, r7, #16
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480d      	ldr	r0, [pc, #52]	; (8000d44 <MX_TIM2_Init+0x98>)
 8000d10:	f002 fe4b 	bl	80039aa <HAL_TIM_ConfigClockSource>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d1a:	f000 f8a7 	bl	8000e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4806      	ldr	r0, [pc, #24]	; (8000d44 <MX_TIM2_Init+0x98>)
 8000d2c:	f003 f830 	bl	8003d90 <HAL_TIMEx_MasterConfigSynchronization>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d36:	f000 f899 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	3720      	adds	r7, #32
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000658 	.word	0x20000658

08000d48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d4c:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <MX_USART1_UART_Init+0x58>)
 8000d4e:	4a15      	ldr	r2, [pc, #84]	; (8000da4 <MX_USART1_UART_Init+0x5c>)
 8000d50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000d52:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <MX_USART1_UART_Init+0x58>)
 8000d54:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000d58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_USART1_UART_Init+0x58>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <MX_USART1_UART_Init+0x58>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <MX_USART1_UART_Init+0x58>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <MX_USART1_UART_Init+0x58>)
 8000d6e:	220c      	movs	r2, #12
 8000d70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <MX_USART1_UART_Init+0x58>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d78:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_USART1_UART_Init+0x58>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <MX_USART1_UART_Init+0x58>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <MX_USART1_UART_Init+0x58>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_USART1_UART_Init+0x58>)
 8000d8c:	f003 f884 	bl	8003e98 <HAL_UART_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d96:	f000 f869 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000480 	.word	0x20000480
 8000da4:	40013800 	.word	0x40013800

08000da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dae:	f107 030c 	add.w	r3, r7, #12
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <MX_GPIO_Init+0x90>)
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	4a1d      	ldr	r2, [pc, #116]	; (8000e38 <MX_GPIO_Init+0x90>)
 8000dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc8:	6153      	str	r3, [r2, #20]
 8000dca:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <MX_GPIO_Init+0x90>)
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <MX_GPIO_Init+0x90>)
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	4a17      	ldr	r2, [pc, #92]	; (8000e38 <MX_GPIO_Init+0x90>)
 8000ddc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000de0:	6153      	str	r3, [r2, #20]
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <MX_GPIO_Init+0x90>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <MX_GPIO_Init+0x90>)
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	4a11      	ldr	r2, [pc, #68]	; (8000e38 <MX_GPIO_Init+0x90>)
 8000df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df8:	6153      	str	r3, [r2, #20]
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <MX_GPIO_Init+0x90>)
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e0c:	480b      	ldr	r0, [pc, #44]	; (8000e3c <MX_GPIO_Init+0x94>)
 8000e0e:	f001 f96f 	bl	80020f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4804      	ldr	r0, [pc, #16]	; (8000e3c <MX_GPIO_Init+0x94>)
 8000e2c:	f000 ffee 	bl	8001e0c <HAL_GPIO_Init>

}
 8000e30:	bf00      	nop
 8000e32:	3720      	adds	r7, #32
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	48000400 	.word	0x48000400

08000e40 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	//__disable_irq();
	midi_receive_byte(Rx_data[0]);
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_UART_RxCpltCallback+0x24>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 f9d5 	bl	80011fc <midi_receive_byte>
	//__enable_irq();
	//HAL_UART_Transmit(&huart2, Rx_data, sizeof(Rx_data), 100);
	HAL_UART_Receive_IT(&huart1, Rx_data, sizeof(Rx_data));
 8000e52:	2201      	movs	r2, #1
 8000e54:	4903      	ldr	r1, [pc, #12]	; (8000e64 <HAL_UART_RxCpltCallback+0x24>)
 8000e56:	4804      	ldr	r0, [pc, #16]	; (8000e68 <HAL_UART_RxCpltCallback+0x28>)
 8000e58:	f003 f86c 	bl	8003f34 <HAL_UART_Receive_IT>
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	2000047c 	.word	0x2000047c
 8000e68:	20000480 	.word	0x20000480

08000e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <null_event_cb>:
// Callback table.
static midi_event_callback_t g_callbacks[EVT_MAX] = {0};


// The null event callback is used by default for all events.
static void null_event_cb(char channel, char a, char b) {
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4603      	mov	r3, r0
 8000e82:	71fb      	strb	r3, [r7, #7]
 8000e84:	460b      	mov	r3, r1
 8000e86:	71bb      	strb	r3, [r7, #6]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	717b      	strb	r3, [r7, #5]
  // Do nothing. The invoke_callback() function will properly implement the
  // global message counter.
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <invoke_callback>:


// Wrapper that invokes callback functions.
static inline void invoke_callback(int evt) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
    // Reject invalid events.
    if ((evt < 0) || (evt >= EVT_MAX)) {
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	db19      	blt.n	8000eda <invoke_callback+0x42>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b0e      	cmp	r3, #14
 8000eaa:	dc16      	bgt.n	8000eda <invoke_callback+0x42>
        return;
    }

    // Increment the global event counter.
    ++g_message_counter;
 8000eac:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <invoke_callback+0x4c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	4a0c      	ldr	r2, [pc, #48]	; (8000ee4 <invoke_callback+0x4c>)
 8000eb4:	6013      	str	r3, [r2, #0]

    // Invoke the callback.
    (g_callbacks[evt])(g_current_channel, g_data_byte_one, g_data_byte_two);
 8000eb6:	4a0c      	ldr	r2, [pc, #48]	; (8000ee8 <invoke_callback+0x50>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebe:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <invoke_callback+0x54>)
 8000ec0:	7810      	ldrb	r0, [r2, #0]
 8000ec2:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <invoke_callback+0x58>)
 8000ec4:	7811      	ldrb	r1, [r2, #0]
 8000ec6:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <invoke_callback+0x5c>)
 8000ec8:	7812      	ldrb	r2, [r2, #0]
 8000eca:	4798      	blx	r3

    // Clear data state
    g_data_byte_one = 0;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <invoke_callback+0x58>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
    g_data_byte_two = 0;
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <invoke_callback+0x5c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
 8000ed8:	e000      	b.n	8000edc <invoke_callback+0x44>
        return;
 8000eda:	bf00      	nop
}
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000430 	.word	0x20000430
 8000ee8:	20000434 	.word	0x20000434
 8000eec:	2000042b 	.word	0x2000042b
 8000ef0:	2000042c 	.word	0x2000042c
 8000ef4:	2000042d 	.word	0x2000042d

08000ef8 <rx_status_sys_realtime_byte>:
 * For this reason, the rx_status_sys_realtime_byte() handler does NOT update
 * much state; messages of this type should conceptually just be handled
 * and then processing of the MIDI byte stream should continue as though the
 * real-time byte was never received.
 */
static status_t rx_status_sys_realtime_byte(char byte) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
    switch (byte) {
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	3bf8      	subs	r3, #248	; 0xf8
 8000f06:	2b07      	cmp	r3, #7
 8000f08:	d832      	bhi.n	8000f70 <rx_status_sys_realtime_byte+0x78>
 8000f0a:	a201      	add	r2, pc, #4	; (adr r2, 8000f10 <rx_status_sys_realtime_byte+0x18>)
 8000f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f10:	08000f31 	.word	0x08000f31
 8000f14:	08000f39 	.word	0x08000f39
 8000f18:	08000f41 	.word	0x08000f41
 8000f1c:	08000f49 	.word	0x08000f49
 8000f20:	08000f51 	.word	0x08000f51
 8000f24:	08000f59 	.word	0x08000f59
 8000f28:	08000f61 	.word	0x08000f61
 8000f2c:	08000f69 	.word	0x08000f69
        case SYS_REALTIME_TIMING_CLOCK:
            invoke_callback(EVT_SYS_REALTIME_TIMING_CLOCK);
 8000f30:	2000      	movs	r0, #0
 8000f32:	f7ff ffb1 	bl	8000e98 <invoke_callback>
            break;
 8000f36:	e01b      	b.n	8000f70 <rx_status_sys_realtime_byte+0x78>

        case SYS_REALTIME_RESERVED_F9:
            invoke_callback(EVT_SYS_REALTIME_RESERVED_F9);
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f7ff ffad 	bl	8000e98 <invoke_callback>
            break;
 8000f3e:	e017      	b.n	8000f70 <rx_status_sys_realtime_byte+0x78>

        case SYS_REALTIME_SEQ_START:
            invoke_callback(EVT_SYS_REALTIME_SEQ_START);
 8000f40:	2002      	movs	r0, #2
 8000f42:	f7ff ffa9 	bl	8000e98 <invoke_callback>
            break;
 8000f46:	e013      	b.n	8000f70 <rx_status_sys_realtime_byte+0x78>

        case SYS_REALTIME_SEQ_CONTINUE:
            invoke_callback(EVT_SYS_REALTIME_SEQ_CONTINUE);
 8000f48:	2003      	movs	r0, #3
 8000f4a:	f7ff ffa5 	bl	8000e98 <invoke_callback>
            break;
 8000f4e:	e00f      	b.n	8000f70 <rx_status_sys_realtime_byte+0x78>

        case SYS_REALTIME_SEQ_STOP:
            invoke_callback(EVT_SYS_REALTIME_SEQ_STOP);
 8000f50:	2004      	movs	r0, #4
 8000f52:	f7ff ffa1 	bl	8000e98 <invoke_callback>
            break;
 8000f56:	e00b      	b.n	8000f70 <rx_status_sys_realtime_byte+0x78>

        case SYS_REALTIME_RESERVED_FD:
            invoke_callback(EVT_SYS_REALTIME_RESERVED_FD);
 8000f58:	2005      	movs	r0, #5
 8000f5a:	f7ff ff9d 	bl	8000e98 <invoke_callback>
            break;
 8000f5e:	e007      	b.n	8000f70 <rx_status_sys_realtime_byte+0x78>

        case SYS_REALTIME_ACTIVE_SENSE:
            invoke_callback(EVT_SYS_REALTIME_ACTIVE_SENSE);
 8000f60:	2006      	movs	r0, #6
 8000f62:	f7ff ff99 	bl	8000e98 <invoke_callback>
            break;
 8000f66:	e003      	b.n	8000f70 <rx_status_sys_realtime_byte+0x78>

        case SYS_REALTIME_RESET:
            invoke_callback(EVT_SYS_REALTIME_RESET);
 8000f68:	2007      	movs	r0, #7
 8000f6a:	f7ff ff95 	bl	8000e98 <invoke_callback>
            break;
 8000f6e:	bf00      	nop
    }
    return 1;
 8000f70:	2301      	movs	r3, #1
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop

08000f7c <rx_status_sys_common_byte>:


// Process a "system common" status byte (0 or more data bytes follow.)
static status_t rx_status_sys_common_byte(char byte) {
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
    // TODO(tdial): Implement
    return 0;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <rx_status_channel_byte>:


// Process a "channel" status byte. (1 or 2 data bytes follow.)
static status_t rx_status_channel_byte(char byte) {
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
    // Mask of the channel bits, leaving only the message type.
    const char type = (byte & CHAN_TYPE_MASK);
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	f023 030f 	bic.w	r3, r3, #15
 8000fa4:	73fb      	strb	r3, [r7, #15]

    // Update the state machine with the MIDI channel of the message that
    // we are now processing. This is held in a global.
    g_current_channel = (byte & CHAN_MASK);
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f003 030f 	and.w	r3, r3, #15
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4b1f      	ldr	r3, [pc, #124]	; (800102c <rx_status_channel_byte+0x98>)
 8000fb0:	701a      	strb	r2, [r3, #0]

    switch (type) {
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	2bb0      	cmp	r3, #176	; 0xb0
 8000fb6:	d01b      	beq.n	8000ff0 <rx_status_channel_byte+0x5c>
 8000fb8:	2bb0      	cmp	r3, #176	; 0xb0
 8000fba:	dc06      	bgt.n	8000fca <rx_status_channel_byte+0x36>
 8000fbc:	2b90      	cmp	r3, #144	; 0x90
 8000fbe:	d00f      	beq.n	8000fe0 <rx_status_channel_byte+0x4c>
 8000fc0:	2ba0      	cmp	r3, #160	; 0xa0
 8000fc2:	d011      	beq.n	8000fe8 <rx_status_channel_byte+0x54>
 8000fc4:	2b80      	cmp	r3, #128	; 0x80
 8000fc6:	d007      	beq.n	8000fd8 <rx_status_channel_byte+0x44>
 8000fc8:	e022      	b.n	8001010 <rx_status_channel_byte+0x7c>
 8000fca:	2bd0      	cmp	r3, #208	; 0xd0
 8000fcc:	d018      	beq.n	8001000 <rx_status_channel_byte+0x6c>
 8000fce:	2be0      	cmp	r3, #224	; 0xe0
 8000fd0:	d01a      	beq.n	8001008 <rx_status_channel_byte+0x74>
 8000fd2:	2bc0      	cmp	r3, #192	; 0xc0
 8000fd4:	d010      	beq.n	8000ff8 <rx_status_channel_byte+0x64>
 8000fd6:	e01b      	b.n	8001010 <rx_status_channel_byte+0x7c>
        case CHAN_NOTE_OFF:
            g_state = STATE_WAITING_CHAN_NOTE_OFF_KEY;
 8000fd8:	4b15      	ldr	r3, [pc, #84]	; (8001030 <rx_status_channel_byte+0x9c>)
 8000fda:	2202      	movs	r2, #2
 8000fdc:	701a      	strb	r2, [r3, #0]
            break;
 8000fde:	e01d      	b.n	800101c <rx_status_channel_byte+0x88>

        case CHAN_NOTE_ON:
            g_state = STATE_WAITING_CHAN_NOTE_ON_KEY;
 8000fe0:	4b13      	ldr	r3, [pc, #76]	; (8001030 <rx_status_channel_byte+0x9c>)
 8000fe2:	2204      	movs	r2, #4
 8000fe4:	701a      	strb	r2, [r3, #0]
            break;
 8000fe6:	e019      	b.n	800101c <rx_status_channel_byte+0x88>

        case CHAN_POLY_AFTER_TOUCH:
            g_state = STATE_WAITING_CHAN_POLY_AFTERTOUCH_KEY;
 8000fe8:	4b11      	ldr	r3, [pc, #68]	; (8001030 <rx_status_channel_byte+0x9c>)
 8000fea:	2206      	movs	r2, #6
 8000fec:	701a      	strb	r2, [r3, #0]
            break;
 8000fee:	e015      	b.n	800101c <rx_status_channel_byte+0x88>

        case CHAN_CONTROL_CHANGE:
            g_state = STATE_WAITING_CHAN_CONTROL_CHANGE_CONTROL;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <rx_status_channel_byte+0x9c>)
 8000ff2:	2208      	movs	r2, #8
 8000ff4:	701a      	strb	r2, [r3, #0]
            break;
 8000ff6:	e011      	b.n	800101c <rx_status_channel_byte+0x88>

        case CHAN_PROGRAM_CHANGE:
            g_state = STATE_WAITING_CHAN_PROGRAM_CHANGE_PROGRAM;
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <rx_status_channel_byte+0x9c>)
 8000ffa:	220a      	movs	r2, #10
 8000ffc:	701a      	strb	r2, [r3, #0]
            break;
 8000ffe:	e00d      	b.n	800101c <rx_status_channel_byte+0x88>

        case CHAN_AFTER_TOUCH:
            g_state = STATE_WAITING_CHAN_AFTERTOUCH_PRESSURE;
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <rx_status_channel_byte+0x9c>)
 8001002:	220b      	movs	r2, #11
 8001004:	701a      	strb	r2, [r3, #0]
            break;
 8001006:	e009      	b.n	800101c <rx_status_channel_byte+0x88>

        case CHAN_PITCH_BEND:
            g_state = STATE_WAITING_CHAN_PITCH_BEND_LSBITS;
 8001008:	4b09      	ldr	r3, [pc, #36]	; (8001030 <rx_status_channel_byte+0x9c>)
 800100a:	220c      	movs	r2, #12
 800100c:	701a      	strb	r2, [r3, #0]
            break;
 800100e:	e005      	b.n	800101c <rx_status_channel_byte+0x88>

        default:
            g_state = STATE_ERROR;
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <rx_status_channel_byte+0x9c>)
 8001012:	2201      	movs	r2, #1
 8001014:	701a      	strb	r2, [r3, #0]
            return E_MIDI_BAD_CHANNEL_STATE;
 8001016:	f06f 0301 	mvn.w	r3, #1
 800101a:	e000      	b.n	800101e <rx_status_channel_byte+0x8a>
    }
    return 0;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	2000042b 	.word	0x2000042b
 8001030:	20000428 	.word	0x20000428

08001034 <rx_data_byte>:


// Process a trailing data byte.
static status_t rx_data_byte(char byte) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
    switch (g_state) {
 800103e:	4b4e      	ldr	r3, [pc, #312]	; (8001178 <rx_data_byte+0x144>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	3b02      	subs	r3, #2
 8001044:	2b0b      	cmp	r3, #11
 8001046:	f200 808b 	bhi.w	8001160 <rx_data_byte+0x12c>
 800104a:	a201      	add	r2, pc, #4	; (adr r2, 8001050 <rx_data_byte+0x1c>)
 800104c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001050:	08001081 	.word	0x08001081
 8001054:	0800108f 	.word	0x0800108f
 8001058:	080010a5 	.word	0x080010a5
 800105c:	080010b3 	.word	0x080010b3
 8001060:	080010c9 	.word	0x080010c9
 8001064:	080010d7 	.word	0x080010d7
 8001068:	080010ed 	.word	0x080010ed
 800106c:	080010fb 	.word	0x080010fb
 8001070:	08001111 	.word	0x08001111
 8001074:	08001127 	.word	0x08001127
 8001078:	0800113d 	.word	0x0800113d
 800107c:	0800114b 	.word	0x0800114b
        // Process first byte of a "note off" message.
        case STATE_WAITING_CHAN_NOTE_OFF_KEY:
            g_data_byte_one = byte;
 8001080:	4a3e      	ldr	r2, [pc, #248]	; (800117c <rx_data_byte+0x148>)
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	7013      	strb	r3, [r2, #0]
            g_state = STATE_WAITING_CHAN_NOTE_OFF_VELOCITY;
 8001086:	4b3c      	ldr	r3, [pc, #240]	; (8001178 <rx_data_byte+0x144>)
 8001088:	2203      	movs	r2, #3
 800108a:	701a      	strb	r2, [r3, #0]
            break;
 800108c:	e06f      	b.n	800116e <rx_data_byte+0x13a>

        // Process second byte of a "note off" message, and invoke callback.
        // We reset the state in case there is a "running status" note off.
        case STATE_WAITING_CHAN_NOTE_OFF_VELOCITY:
            g_data_byte_two = byte;
 800108e:	4a3c      	ldr	r2, [pc, #240]	; (8001180 <rx_data_byte+0x14c>)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	7013      	strb	r3, [r2, #0]
            invoke_callback(EVT_CHAN_NOTE_OFF);
 8001094:	2008      	movs	r0, #8
 8001096:	f7ff feff 	bl	8000e98 <invoke_callback>
            g_state = STATE_WAITING_CHAN_NOTE_OFF_KEY;
 800109a:	4b37      	ldr	r3, [pc, #220]	; (8001178 <rx_data_byte+0x144>)
 800109c:	2202      	movs	r2, #2
 800109e:	701a      	strb	r2, [r3, #0]
            return 1;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e065      	b.n	8001170 <rx_data_byte+0x13c>

        // Process first byte of a "note on" message.
        case STATE_WAITING_CHAN_NOTE_ON_KEY:
            g_data_byte_one = byte;
 80010a4:	4a35      	ldr	r2, [pc, #212]	; (800117c <rx_data_byte+0x148>)
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	7013      	strb	r3, [r2, #0]
            g_state = STATE_WAITING_CHAN_NOTE_ON_VELOCITY;
 80010aa:	4b33      	ldr	r3, [pc, #204]	; (8001178 <rx_data_byte+0x144>)
 80010ac:	2205      	movs	r2, #5
 80010ae:	701a      	strb	r2, [r3, #0]
            break;
 80010b0:	e05d      	b.n	800116e <rx_data_byte+0x13a>

        // Process second byte of a "note on" message, and invoke callback.
        case STATE_WAITING_CHAN_NOTE_ON_VELOCITY:
            g_data_byte_two = byte;
 80010b2:	4a33      	ldr	r2, [pc, #204]	; (8001180 <rx_data_byte+0x14c>)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	7013      	strb	r3, [r2, #0]
            invoke_callback(EVT_CHAN_NOTE_ON);
 80010b8:	2009      	movs	r0, #9
 80010ba:	f7ff feed 	bl	8000e98 <invoke_callback>
            g_state = STATE_WAITING_CHAN_NOTE_ON_KEY;
 80010be:	4b2e      	ldr	r3, [pc, #184]	; (8001178 <rx_data_byte+0x144>)
 80010c0:	2204      	movs	r2, #4
 80010c2:	701a      	strb	r2, [r3, #0]
            return 1;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e053      	b.n	8001170 <rx_data_byte+0x13c>

        // Process first byte of a poly after-touch message.
        case STATE_WAITING_CHAN_POLY_AFTERTOUCH_KEY:
            g_data_byte_one = byte;
 80010c8:	4a2c      	ldr	r2, [pc, #176]	; (800117c <rx_data_byte+0x148>)
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	7013      	strb	r3, [r2, #0]
            g_state = STATE_WAITING_CHAN_POLY_AFTERTOUCH_PRESSURE;
 80010ce:	4b2a      	ldr	r3, [pc, #168]	; (8001178 <rx_data_byte+0x144>)
 80010d0:	2207      	movs	r2, #7
 80010d2:	701a      	strb	r2, [r3, #0]
            break;
 80010d4:	e04b      	b.n	800116e <rx_data_byte+0x13a>

        // Process second byte of a poly after-touch message, invoke callback.
        case STATE_WAITING_CHAN_POLY_AFTERTOUCH_PRESSURE:
            g_data_byte_two = byte;
 80010d6:	4a2a      	ldr	r2, [pc, #168]	; (8001180 <rx_data_byte+0x14c>)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	7013      	strb	r3, [r2, #0]
            invoke_callback(EVT_CHAN_POLY_AFTERTOUCH);
 80010dc:	200a      	movs	r0, #10
 80010de:	f7ff fedb 	bl	8000e98 <invoke_callback>
            g_state = STATE_WAITING_CHAN_POLY_AFTERTOUCH_KEY;
 80010e2:	4b25      	ldr	r3, [pc, #148]	; (8001178 <rx_data_byte+0x144>)
 80010e4:	2206      	movs	r2, #6
 80010e6:	701a      	strb	r2, [r3, #0]
            return 1;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e041      	b.n	8001170 <rx_data_byte+0x13c>

        // Process first byte of a channel control change message.
        case STATE_WAITING_CHAN_CONTROL_CHANGE_CONTROL:
            g_data_byte_one = byte;
 80010ec:	4a23      	ldr	r2, [pc, #140]	; (800117c <rx_data_byte+0x148>)
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	7013      	strb	r3, [r2, #0]
            g_state = STATE_WAITING_CHAN_CONTROL_CHANGE_VALUE;
 80010f2:	4b21      	ldr	r3, [pc, #132]	; (8001178 <rx_data_byte+0x144>)
 80010f4:	2209      	movs	r2, #9
 80010f6:	701a      	strb	r2, [r3, #0]
            break;
 80010f8:	e039      	b.n	800116e <rx_data_byte+0x13a>

        // Process second byte of a channel control change, invoke callback.
        case STATE_WAITING_CHAN_CONTROL_CHANGE_VALUE:
            g_data_byte_two = byte;
 80010fa:	4a21      	ldr	r2, [pc, #132]	; (8001180 <rx_data_byte+0x14c>)
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	7013      	strb	r3, [r2, #0]
            invoke_callback(EVT_CHAN_CONTROL_CHANGE);
 8001100:	200b      	movs	r0, #11
 8001102:	f7ff fec9 	bl	8000e98 <invoke_callback>
            g_state = STATE_WAITING_CHAN_CONTROL_CHANGE_CONTROL;
 8001106:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <rx_data_byte+0x144>)
 8001108:	2208      	movs	r2, #8
 800110a:	701a      	strb	r2, [r3, #0]
            return 1;
 800110c:	2301      	movs	r3, #1
 800110e:	e02f      	b.n	8001170 <rx_data_byte+0x13c>

        // Process program change, invoke callback.
        case STATE_WAITING_CHAN_PROGRAM_CHANGE_PROGRAM:
            g_data_byte_one = byte;
 8001110:	4a1a      	ldr	r2, [pc, #104]	; (800117c <rx_data_byte+0x148>)
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	7013      	strb	r3, [r2, #0]
            g_data_byte_two = 0;
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <rx_data_byte+0x14c>)
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
            invoke_callback(EVT_CHAN_PROGRAM_CHANGE);
 800111c:	200c      	movs	r0, #12
 800111e:	f7ff febb 	bl	8000e98 <invoke_callback>
            // Leave state intact in case there is another via running status.
            return 1;
 8001122:	2301      	movs	r3, #1
 8001124:	e024      	b.n	8001170 <rx_data_byte+0x13c>

        // Process channel after-touch message, invoke callback.
        case STATE_WAITING_CHAN_AFTERTOUCH_PRESSURE:
            g_data_byte_one = byte;
 8001126:	4a15      	ldr	r2, [pc, #84]	; (800117c <rx_data_byte+0x148>)
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	7013      	strb	r3, [r2, #0]
            g_data_byte_two = 0;
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <rx_data_byte+0x14c>)
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
            invoke_callback(EVT_CHAN_AFTERTOUCH);
 8001132:	200d      	movs	r0, #13
 8001134:	f7ff feb0 	bl	8000e98 <invoke_callback>
            // Leave state intact in case there is another via running status.
            return 1;
 8001138:	2301      	movs	r3, #1
 800113a:	e019      	b.n	8001170 <rx_data_byte+0x13c>

        // Process first byte of pitch bend.
        case STATE_WAITING_CHAN_PITCH_BEND_LSBITS:
            g_data_byte_one = byte;
 800113c:	4a0f      	ldr	r2, [pc, #60]	; (800117c <rx_data_byte+0x148>)
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	7013      	strb	r3, [r2, #0]
            g_state = STATE_WAITING_CHAN_PITCH_BEND_MSBITS;
 8001142:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <rx_data_byte+0x144>)
 8001144:	220d      	movs	r2, #13
 8001146:	701a      	strb	r2, [r3, #0]
            break;
 8001148:	e011      	b.n	800116e <rx_data_byte+0x13a>

        // Process second byte of pitch bend.
        case STATE_WAITING_CHAN_PITCH_BEND_MSBITS:
            g_data_byte_two = byte;
 800114a:	4a0d      	ldr	r2, [pc, #52]	; (8001180 <rx_data_byte+0x14c>)
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	7013      	strb	r3, [r2, #0]
            invoke_callback(EVT_CHAN_PITCH_BEND);
 8001150:	200e      	movs	r0, #14
 8001152:	f7ff fea1 	bl	8000e98 <invoke_callback>
            g_state = STATE_WAITING_CHAN_PITCH_BEND_LSBITS;
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <rx_data_byte+0x144>)
 8001158:	220c      	movs	r2, #12
 800115a:	701a      	strb	r2, [r3, #0]
            return 1;
 800115c:	2301      	movs	r3, #1
 800115e:	e007      	b.n	8001170 <rx_data_byte+0x13c>

        // Handle bad state.
        default:
            g_data_byte_one = 0;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <rx_data_byte+0x148>)
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
            g_data_byte_two = 0;
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <rx_data_byte+0x14c>)
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
            // TODO(tdial): Do we have to touch the state?
            break;
 800116c:	bf00      	nop
    }

    // No messages processed; return 0.
    return 0;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000428 	.word	0x20000428
 800117c:	2000042c 	.word	0x2000042c
 8001180:	2000042d 	.word	0x2000042d

08001184 <midi_init>:
/****************************************************************************
 * Public APIs                                                              *
 ****************************************************************************/


status_t midi_init() {
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
    // Initialize the callback table; all events to the null callback.
    for (int i = 0; i < EVT_MAX; ++i) {
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	e007      	b.n	80011a0 <midi_init+0x1c>
        g_callbacks[i] = null_event_cb;
 8001190:	4a08      	ldr	r2, [pc, #32]	; (80011b4 <midi_init+0x30>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4908      	ldr	r1, [pc, #32]	; (80011b8 <midi_init+0x34>)
 8001196:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < EVT_MAX; ++i) {
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3301      	adds	r3, #1
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b0e      	cmp	r3, #14
 80011a4:	ddf4      	ble.n	8001190 <midi_init+0xc>
    }
    return 0;
 80011a6:	2300      	movs	r3, #0
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	20000434 	.word	0x20000434
 80011b8:	08000e7b 	.word	0x08000e7b

080011bc <midi_register_event_handler>:


status_t midi_register_event_handler(event_type evt, midi_event_callback_t cb) {
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]
    if (cb) {
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d005      	beq.n	80011da <midi_register_event_handler+0x1e>
        g_callbacks[evt] = cb;
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	4908      	ldr	r1, [pc, #32]	; (80011f4 <midi_register_event_handler+0x38>)
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80011d8:	e004      	b.n	80011e4 <midi_register_event_handler+0x28>
    } else {
        g_callbacks[evt] = null_event_cb;
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	4a05      	ldr	r2, [pc, #20]	; (80011f4 <midi_register_event_handler+0x38>)
 80011de:	4906      	ldr	r1, [pc, #24]	; (80011f8 <midi_register_event_handler+0x3c>)
 80011e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }

    return 0;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000434 	.word	0x20000434
 80011f8:	08000e7b 	.word	0x08000e7b

080011fc <midi_receive_byte>:


status_t midi_receive_byte(char byte) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
     *
     * If it is determined that the byte is not any type of status byte, then
     * by process of elimination, it must be a data byte.
     */

    if ((byte & SYS_REALTIME_MASK) == SYS_REALTIME_MASK) {
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800120c:	2bf8      	cmp	r3, #248	; 0xf8
 800120e:	d108      	bne.n	8001222 <midi_receive_byte+0x26>
        // The byte is a system real-time status byte.
        g_debug_last_status_byte = byte;
 8001210:	4a17      	ldr	r2, [pc, #92]	; (8001270 <midi_receive_byte+0x74>)
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	7013      	strb	r3, [r2, #0]
        return rx_status_sys_realtime_byte(byte);
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fe6d 	bl	8000ef8 <rx_status_sys_realtime_byte>
 800121e:	4603      	mov	r3, r0
 8001220:	e022      	b.n	8001268 <midi_receive_byte+0x6c>
    } else if ((byte & SYS_COMMON_MASK) == SYS_COMMON_MASK) {
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001228:	2bf0      	cmp	r3, #240	; 0xf0
 800122a:	d108      	bne.n	800123e <midi_receive_byte+0x42>
        // The byte is a system common status byte.
        g_debug_last_status_byte = byte;
 800122c:	4a10      	ldr	r2, [pc, #64]	; (8001270 <midi_receive_byte+0x74>)
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	7013      	strb	r3, [r2, #0]
        return rx_status_sys_common_byte(byte);
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fea1 	bl	8000f7c <rx_status_sys_common_byte>
 800123a:	4603      	mov	r3, r0
 800123c:	e014      	b.n	8001268 <midi_receive_byte+0x6c>
    } else if (byte & CHAN_STATUS_MASK) {
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	2b00      	cmp	r3, #0
 8001244:	da08      	bge.n	8001258 <midi_receive_byte+0x5c>
        // The byte is a channel voice or channel mode status byte.
        g_debug_last_status_byte = byte;
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <midi_receive_byte+0x74>)
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	7013      	strb	r3, [r2, #0]
        return rx_status_channel_byte(byte);
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fea0 	bl	8000f94 <rx_status_channel_byte>
 8001254:	4603      	mov	r3, r0
 8001256:	e007      	b.n	8001268 <midi_receive_byte+0x6c>
    } else {
        // The byte is a regular data byte.
        g_debug_last_data_byte = byte;
 8001258:	4a06      	ldr	r2, [pc, #24]	; (8001274 <midi_receive_byte+0x78>)
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	7013      	strb	r3, [r2, #0]
        return rx_data_byte(byte);
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fee7 	bl	8001034 <rx_data_byte>
 8001266:	4603      	mov	r3, r0
    }
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000429 	.word	0x20000429
 8001274:	2000042a 	.word	0x2000042a

08001278 <note_on>:
extern struct voice voices[];
extern int VOICE_TOTAL;
int lastVoice = 0;
//set_frequency(&voice1, midiNoteTable[data1]);

void note_on(char chan, char data1, char data2) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
 8001282:	460b      	mov	r3, r1
 8001284:	71bb      	strb	r3, [r7, #6]
 8001286:	4613      	mov	r3, r2
 8001288:	717b      	strb	r3, [r7, #5]
	if(lastVoice >= VOICE_TOTAL) lastVoice = 0;
 800128a:	4b23      	ldr	r3, [pc, #140]	; (8001318 <note_on+0xa0>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4b23      	ldr	r3, [pc, #140]	; (800131c <note_on+0xa4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	429a      	cmp	r2, r3
 8001294:	db02      	blt.n	800129c <note_on+0x24>
 8001296:	4b20      	ldr	r3, [pc, #128]	; (8001318 <note_on+0xa0>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
	voices[lastVoice].frequency = midiFreqTable[data1];
 800129c:	79bb      	ldrb	r3, [r7, #6]
 800129e:	4a1e      	ldr	r2, [pc, #120]	; (8001318 <note_on+0xa0>)
 80012a0:	6812      	ldr	r2, [r2, #0]
 80012a2:	491f      	ldr	r1, [pc, #124]	; (8001320 <note_on+0xa8>)
 80012a4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80012a8:	481e      	ldr	r0, [pc, #120]	; (8001324 <note_on+0xac>)
 80012aa:	4613      	mov	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4403      	add	r3, r0
 80012b4:	330c      	adds	r3, #12
 80012b6:	6019      	str	r1, [r3, #0]
	set_frequency(&voices[lastVoice], midiFreqTable[data1]);
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <note_on+0xa0>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4613      	mov	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4a17      	ldr	r2, [pc, #92]	; (8001324 <note_on+0xac>)
 80012c6:	1898      	adds	r0, r3, r2
 80012c8:	79bb      	ldrb	r3, [r7, #6]
 80012ca:	4a15      	ldr	r2, [pc, #84]	; (8001320 <note_on+0xa8>)
 80012cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d0:	4619      	mov	r1, r3
 80012d2:	f000 fad7 	bl	8001884 <set_frequency>
	voices[lastVoice].gain = 0;
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <note_on+0xa0>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4912      	ldr	r1, [pc, #72]	; (8001324 <note_on+0xac>)
 80012dc:	4613      	mov	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	440b      	add	r3, r1
 80012e6:	3310      	adds	r3, #16
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
	voices[lastVoice].state = attack;
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <note_on+0xa0>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	490c      	ldr	r1, [pc, #48]	; (8001324 <note_on+0xac>)
 80012f4:	4613      	mov	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	440b      	add	r3, r1
 80012fe:	3308      	adds	r3, #8
 8001300:	2203      	movs	r2, #3
 8001302:	701a      	strb	r2, [r3, #0]
	lastVoice += 1;
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <note_on+0xa0>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	3301      	adds	r3, #1
 800130a:	4a03      	ldr	r2, [pc, #12]	; (8001318 <note_on+0xa0>)
 800130c:	6013      	str	r3, [r2, #0]
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000470 	.word	0x20000470
 800131c:	20000000 	.word	0x20000000
 8001320:	20000004 	.word	0x20000004
 8001324:	20000514 	.word	0x20000514

08001328 <note_off>:


void note_off(char chan, char data1, char data2) {
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
 8001332:	460b      	mov	r3, r1
 8001334:	71bb      	strb	r3, [r7, #6]
 8001336:	4613      	mov	r3, r2
 8001338:	717b      	strb	r3, [r7, #5]

	int freq = midiFreqTable[data1];
 800133a:	79bb      	ldrb	r3, [r7, #6]
 800133c:	4a1a      	ldr	r2, [pc, #104]	; (80013a8 <note_off+0x80>)
 800133e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001342:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < VOICE_TOTAL; i++) {
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	e023      	b.n	8001392 <note_off+0x6a>
		if(voices[i].frequency == freq && voices[i].state != inactive) voices[i].state = decay;
 800134a:	4918      	ldr	r1, [pc, #96]	; (80013ac <note_off+0x84>)
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	4613      	mov	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	440b      	add	r3, r1
 8001358:	330c      	adds	r3, #12
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	68ba      	ldr	r2, [r7, #8]
 800135e:	429a      	cmp	r2, r3
 8001360:	d114      	bne.n	800138c <note_off+0x64>
 8001362:	4912      	ldr	r1, [pc, #72]	; (80013ac <note_off+0x84>)
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	440b      	add	r3, r1
 8001370:	3308      	adds	r3, #8
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d009      	beq.n	800138c <note_off+0x64>
 8001378:	490c      	ldr	r1, [pc, #48]	; (80013ac <note_off+0x84>)
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	440b      	add	r3, r1
 8001386:	3308      	adds	r3, #8
 8001388:	2202      	movs	r2, #2
 800138a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < VOICE_TOTAL; i++) {
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	3301      	adds	r3, #1
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <note_off+0x88>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	429a      	cmp	r2, r3
 800139a:	dbd6      	blt.n	800134a <note_off+0x22>
	}

}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	20000004 	.word	0x20000004
 80013ac:	20000514 	.word	0x20000514
 80013b0:	20000000 	.word	0x20000000

080013b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ba:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <HAL_MspInit+0x44>)
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	4a0e      	ldr	r2, [pc, #56]	; (80013f8 <HAL_MspInit+0x44>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6193      	str	r3, [r2, #24]
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <HAL_MspInit+0x44>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_MspInit+0x44>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	4a08      	ldr	r2, [pc, #32]	; (80013f8 <HAL_MspInit+0x44>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013dc:	61d3      	str	r3, [r2, #28]
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_MspInit+0x44>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40021000 	.word	0x40021000

080013fc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a15      	ldr	r2, [pc, #84]	; (8001470 <HAL_DAC_MspInit+0x74>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d124      	bne.n	8001468 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <HAL_DAC_MspInit+0x78>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	4a14      	ldr	r2, [pc, #80]	; (8001474 <HAL_DAC_MspInit+0x78>)
 8001424:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001428:	61d3      	str	r3, [r2, #28]
 800142a:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_DAC_MspInit+0x78>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <HAL_DAC_MspInit+0x78>)
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	4a0e      	ldr	r2, [pc, #56]	; (8001474 <HAL_DAC_MspInit+0x78>)
 800143c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001440:	6153      	str	r3, [r2, #20]
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <HAL_DAC_MspInit+0x78>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800144e:	2310      	movs	r3, #16
 8001450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001452:	2303      	movs	r3, #3
 8001454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001464:	f000 fcd2 	bl	8001e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001468:	bf00      	nop
 800146a:	3728      	adds	r7, #40	; 0x28
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40007400 	.word	0x40007400
 8001474:	40021000 	.word	0x40021000

08001478 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001488:	d113      	bne.n	80014b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <HAL_TIM_Base_MspInit+0x44>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <HAL_TIM_Base_MspInit+0x44>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	61d3      	str	r3, [r2, #28]
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <HAL_TIM_Base_MspInit+0x44>)
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	201c      	movs	r0, #28
 80014a8:	f000 fb77 	bl	8001b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014ac:	201c      	movs	r0, #28
 80014ae:	f000 fb90 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014b2:	bf00      	nop
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000

080014c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	; 0x28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a1b      	ldr	r2, [pc, #108]	; (800154c <HAL_UART_MspInit+0x8c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d12f      	bne.n	8001542 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014e2:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <HAL_UART_MspInit+0x90>)
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	4a1a      	ldr	r2, [pc, #104]	; (8001550 <HAL_UART_MspInit+0x90>)
 80014e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ec:	6193      	str	r3, [r2, #24]
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <HAL_UART_MspInit+0x90>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_UART_MspInit+0x90>)
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	4a14      	ldr	r2, [pc, #80]	; (8001550 <HAL_UART_MspInit+0x90>)
 8001500:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001504:	6153      	str	r3, [r2, #20]
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_UART_MspInit+0x90>)
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001512:	2330      	movs	r3, #48	; 0x30
 8001514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800151e:	2303      	movs	r3, #3
 8001520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001522:	2307      	movs	r3, #7
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	4619      	mov	r1, r3
 800152c:	4809      	ldr	r0, [pc, #36]	; (8001554 <HAL_UART_MspInit+0x94>)
 800152e:	f000 fc6d 	bl	8001e0c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	2025      	movs	r0, #37	; 0x25
 8001538:	f000 fb2f 	bl	8001b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800153c:	2025      	movs	r0, #37	; 0x25
 800153e:	f000 fb48 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001542:	bf00      	nop
 8001544:	3728      	adds	r7, #40	; 0x28
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40013800 	.word	0x40013800
 8001550:	40021000 	.word	0x40021000
 8001554:	48000800 	.word	0x48000800

08001558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <HardFault_Handler+0x4>

0800156c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <MemManage_Handler+0x4>

08001572 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001576:	e7fe      	b.n	8001576 <BusFault_Handler+0x4>

08001578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800157c:	e7fe      	b.n	800157c <UsageFault_Handler+0x4>

0800157e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ac:	f000 f9fa 	bl	80019a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	out = 0;
 80015ba:	4b27      	ldr	r3, [pc, #156]	; (8001658 <TIM2_IRQHandler+0xa4>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
	activeCount = 0;
 80015c0:	4b26      	ldr	r3, [pc, #152]	; (800165c <TIM2_IRQHandler+0xa8>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]


	 for(int i = 0; i < VOICE_TOTAL; i++) {
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	e01c      	b.n	8001606 <TIM2_IRQHandler+0x52>
          update_voice(&voices[i]);
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4a22      	ldr	r2, [pc, #136]	; (8001660 <TIM2_IRQHandler+0xac>)
 80015d8:	4413      	add	r3, r2
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 f890 	bl	8001700 <update_voice>
		  out += get_voice_out(&voices[i]);
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4a1d      	ldr	r2, [pc, #116]	; (8001660 <TIM2_IRQHandler+0xac>)
 80015ec:	4413      	add	r3, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 f85e 	bl	80016b0 <get_voice_out>
 80015f4:	4602      	mov	r2, r0
 80015f6:	4b18      	ldr	r3, [pc, #96]	; (8001658 <TIM2_IRQHandler+0xa4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	4a16      	ldr	r2, [pc, #88]	; (8001658 <TIM2_IRQHandler+0xa4>)
 80015fe:	6013      	str	r3, [r2, #0]
	 for(int i = 0; i < VOICE_TOTAL; i++) {
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3301      	adds	r3, #1
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	4b17      	ldr	r3, [pc, #92]	; (8001664 <TIM2_IRQHandler+0xb0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	429a      	cmp	r2, r3
 800160e:	dbdd      	blt.n	80015cc <TIM2_IRQHandler+0x18>
	 if(activeCount > 0) {
		 out /= activeCount;
	 }
	 */

	 out += 2048;
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <TIM2_IRQHandler+0xa4>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001618:	4a0f      	ldr	r2, [pc, #60]	; (8001658 <TIM2_IRQHandler+0xa4>)
 800161a:	6013      	str	r3, [r2, #0]

	 if(out > 4095) out = 4095;
 800161c:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <TIM2_IRQHandler+0xa4>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001624:	db03      	blt.n	800162e <TIM2_IRQHandler+0x7a>
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <TIM2_IRQHandler+0xa4>)
 8001628:	f640 72ff 	movw	r2, #4095	; 0xfff
 800162c:	601a      	str	r2, [r3, #0]
	 if(out < 0) out = 0;
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <TIM2_IRQHandler+0xa4>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	da02      	bge.n	800163c <TIM2_IRQHandler+0x88>
 8001636:	4b08      	ldr	r3, [pc, #32]	; (8001658 <TIM2_IRQHandler+0xa4>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]


	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, out);
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <TIM2_IRQHandler+0xa4>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2200      	movs	r2, #0
 8001642:	2100      	movs	r1, #0
 8001644:	4808      	ldr	r0, [pc, #32]	; (8001668 <TIM2_IRQHandler+0xb4>)
 8001646:	f000 fb00 	bl	8001c4a <HAL_DAC_SetValue>


  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800164a:	4808      	ldr	r0, [pc, #32]	; (800166c <TIM2_IRQHandler+0xb8>)
 800164c:	f002 f88e 	bl	800376c <HAL_TIM_IRQHandler>




  /* USER CODE END TIM2_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000474 	.word	0x20000474
 800165c:	20000478 	.word	0x20000478
 8001660:	20000514 	.word	0x20000514
 8001664:	20000000 	.word	0x20000000
 8001668:	20000500 	.word	0x20000500
 800166c:	20000658 	.word	0x20000658

08001670 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <USART1_IRQHandler+0x10>)
 8001676:	f002 fcff 	bl	8004078 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000480 	.word	0x20000480

08001684 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <SystemInit+0x28>)
 800168a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800168e:	4a07      	ldr	r2, [pc, #28]	; (80016ac <SystemInit+0x28>)
 8001690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <SystemInit+0x28>)
 800169a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800169e:	609a      	str	r2, [r3, #8]
#endif
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <get_voice_out>:
#include <math.h>
#include "wave_tables.h"

double interpolate_segment(double x0, int y0, double x1, int y1, double x);

int get_voice_out(struct voice* voice) {
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

	//TODO Implement interpolation
	int val = wavetable_sine[(int) voice->currentAngle] - 2048;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	edd3 7a00 	vldr	s15, [r3]
 80016be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016c2:	ee17 2a90 	vmov	r2, s15
 80016c6:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <get_voice_out+0x4c>)
 80016c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016cc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80016d0:	60fb      	str	r3, [r7, #12]
	//double cAngle = voice->currentAngle;
	//int val = (int) interpolate_segment((int) cAngle, wavetable_sine[(int) cAngle] ,(int) cAngle + 1, wavetable_sine[(int) cAngle + 1], cAngle);
	return (val * voice->gain);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	ee07 3a90 	vmov	s15, r3
 80016d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	edd3 7a04 	vldr	s15, [r3, #16]
 80016e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016ea:	ee17 3a90 	vmov	r3, s15
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	20000204 	.word	0x20000204

08001700 <update_voice>:

void update_voice(struct voice* voice) {
 8001700:	b590      	push	{r4, r7, lr}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	voice->currentAngle += voice->angleDelta;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	ed93 7a00 	vldr	s14, [r3]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	edd3 7a01 	vldr	s15, [r3, #4]
 8001714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	edc3 7a00 	vstr	s15, [r3]
	if (voice->currentAngle > WAVE_SAMPLE_COUNT) voice->currentAngle = 0;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	edd3 7a00 	vldr	s15, [r3]
 8001724:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001880 <update_voice+0x180>
 8001728:	eef4 7ac7 	vcmpe.f32	s15, s14
 800172c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001730:	dd03      	ble.n	800173a <update_voice+0x3a>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	601a      	str	r2, [r3, #0]

	switch(voice->state) {
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	7a1b      	ldrb	r3, [r3, #8]
 800173e:	2b03      	cmp	r3, #3
 8001740:	f200 8084 	bhi.w	800184c <update_voice+0x14c>
 8001744:	a201      	add	r2, pc, #4	; (adr r2, 800174c <update_voice+0x4c>)
 8001746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174a:	bf00      	nop
 800174c:	08001843 	.word	0x08001843
 8001750:	080017a7 	.word	0x080017a7
 8001754:	080017e9 	.word	0x080017e9
 8001758:	0800175d 	.word	0x0800175d
		case attack:
			if(voice->gain > ATTACK_PEAK) {
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe fe95 	bl	8000490 <__aeabi_f2d>
 8001766:	a33e      	add	r3, pc, #248	; (adr r3, 8001860 <update_voice+0x160>)
 8001768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176c:	f7ff f978 	bl	8000a60 <__aeabi_dcmpgt>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <update_voice+0x7e>
				voice->state = sustain;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	721a      	strb	r2, [r3, #8]
				break;
 800177c:	e069      	b.n	8001852 <update_voice+0x152>
			}
			voice->gain += ATTACK_DELTA;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fe84 	bl	8000490 <__aeabi_f2d>
 8001788:	a337      	add	r3, pc, #220	; (adr r3, 8001868 <update_voice+0x168>)
 800178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178e:	f7fe fd21 	bl	80001d4 <__adddf3>
 8001792:	4603      	mov	r3, r0
 8001794:	460c      	mov	r4, r1
 8001796:	4618      	mov	r0, r3
 8001798:	4621      	mov	r1, r4
 800179a:	f7ff f96b 	bl	8000a74 <__aeabi_d2f>
 800179e:	4602      	mov	r2, r0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	611a      	str	r2, [r3, #16]
			break;
 80017a4:	e055      	b.n	8001852 <update_voice+0x152>
		case sustain:
			if(voice->gain < SUSTAIN_PEAK) {
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe fe70 	bl	8000490 <__aeabi_f2d>
 80017b0:	a32f      	add	r3, pc, #188	; (adr r3, 8001870 <update_voice+0x170>)
 80017b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b6:	f7ff f935 	bl	8000a24 <__aeabi_dcmplt>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d147      	bne.n	8001850 <update_voice+0x150>
				break;
			}
			voice->gain -= ATTACK_DELTA;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fe63 	bl	8000490 <__aeabi_f2d>
 80017ca:	a327      	add	r3, pc, #156	; (adr r3, 8001868 <update_voice+0x168>)
 80017cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d0:	f7fe fcfe 	bl	80001d0 <__aeabi_dsub>
 80017d4:	4603      	mov	r3, r0
 80017d6:	460c      	mov	r4, r1
 80017d8:	4618      	mov	r0, r3
 80017da:	4621      	mov	r1, r4
 80017dc:	f7ff f94a 	bl	8000a74 <__aeabi_d2f>
 80017e0:	4602      	mov	r2, r0
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	611a      	str	r2, [r3, #16]
			break;
 80017e6:	e034      	b.n	8001852 <update_voice+0x152>
		case decay:
			if(voice->gain <= 0) {
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80017ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f6:	d803      	bhi.n	8001800 <update_voice+0x100>
				voice->state = inactive;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	721a      	strb	r2, [r3, #8]
				break;
 80017fe:	e028      	b.n	8001852 <update_voice+0x152>
			}
			voice->gain -= DECAY_DELTA;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fe43 	bl	8000490 <__aeabi_f2d>
 800180a:	a31b      	add	r3, pc, #108	; (adr r3, 8001878 <update_voice+0x178>)
 800180c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001810:	f7fe fcde 	bl	80001d0 <__aeabi_dsub>
 8001814:	4603      	mov	r3, r0
 8001816:	460c      	mov	r4, r1
 8001818:	4618      	mov	r0, r3
 800181a:	4621      	mov	r1, r4
 800181c:	f7ff f92a 	bl	8000a74 <__aeabi_d2f>
 8001820:	4602      	mov	r2, r0
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	611a      	str	r2, [r3, #16]
			if(voice->gain < 0) voice->gain = 0;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	edd3 7a04 	vldr	s15, [r3, #16]
 800182c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001834:	d400      	bmi.n	8001838 <update_voice+0x138>
			break;
 8001836:	e00c      	b.n	8001852 <update_voice+0x152>
			if(voice->gain < 0) voice->gain = 0;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
			break;
 8001840:	e007      	b.n	8001852 <update_voice+0x152>
		case inactive:
			voice->gain = 0;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	611a      	str	r2, [r3, #16]
			break;
 800184a:	e002      	b.n	8001852 <update_voice+0x152>
		default:
			break;
 800184c:	bf00      	nop
 800184e:	e000      	b.n	8001852 <update_voice+0x152>
				break;
 8001850:	bf00      	nop
	}


}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	bd90      	pop	{r4, r7, pc}
 800185a:	bf00      	nop
 800185c:	f3af 8000 	nop.w
 8001860:	9999999a 	.word	0x9999999a
 8001864:	3fd99999 	.word	0x3fd99999
 8001868:	47ae147b 	.word	0x47ae147b
 800186c:	3f947ae1 	.word	0x3f947ae1
 8001870:	9999999a 	.word	0x9999999a
 8001874:	3fc99999 	.word	0x3fc99999
 8001878:	88e368f1 	.word	0x88e368f1
 800187c:	3ee4f8b5 	.word	0x3ee4f8b5
 8001880:	43000000 	.word	0x43000000

08001884 <set_frequency>:

void set_frequency(struct voice* voice, int freq) {
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
	voice->angleDelta = freq/200.0;
 800188e:	6838      	ldr	r0, [r7, #0]
 8001890:	f7fe fdec 	bl	800046c <__aeabi_i2d>
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <set_frequency+0x3c>)
 800189a:	f7fe ff7b 	bl	8000794 <__aeabi_ddiv>
 800189e:	4603      	mov	r3, r0
 80018a0:	460c      	mov	r4, r1
 80018a2:	4618      	mov	r0, r3
 80018a4:	4621      	mov	r1, r4
 80018a6:	f7ff f8e5 	bl	8000a74 <__aeabi_d2f>
 80018aa:	4602      	mov	r2, r0
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	605a      	str	r2, [r3, #4]
	voice->frequency = freq;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	60da      	str	r2, [r3, #12]
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd90      	pop	{r4, r7, pc}
 80018be:	bf00      	nop
 80018c0:	40690000 	.word	0x40690000

080018c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018fc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80018c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80018ca:	e003      	b.n	80018d4 <LoopCopyDataInit>

080018cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80018ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80018d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80018d2:	3104      	adds	r1, #4

080018d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80018d4:	480b      	ldr	r0, [pc, #44]	; (8001904 <LoopForever+0xa>)
	ldr	r3, =_edata
 80018d6:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <LoopForever+0xe>)
	adds	r2, r0, r1
 80018d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80018da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80018dc:	d3f6      	bcc.n	80018cc <CopyDataInit>
	ldr	r2, =_sbss
 80018de:	4a0b      	ldr	r2, [pc, #44]	; (800190c <LoopForever+0x12>)
	b	LoopFillZerobss
 80018e0:	e002      	b.n	80018e8 <LoopFillZerobss>

080018e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80018e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80018e4:	f842 3b04 	str.w	r3, [r2], #4

080018e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80018e8:	4b09      	ldr	r3, [pc, #36]	; (8001910 <LoopForever+0x16>)
	cmp	r2, r3
 80018ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80018ec:	d3f9      	bcc.n	80018e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018ee:	f7ff fec9 	bl	8001684 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018f2:	f003 f8ff 	bl	8004af4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018f6:	f7ff f90d 	bl	8000b14 <main>

080018fa <LoopForever>:

LoopForever:
    b LoopForever
 80018fa:	e7fe      	b.n	80018fa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018fc:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8001900:	08004ba4 	.word	0x08004ba4
	ldr	r0, =_sdata
 8001904:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001908:	2000040c 	.word	0x2000040c
	ldr	r2, =_sbss
 800190c:	2000040c 	.word	0x2000040c
	ldr	r3, = _ebss
 8001910:	2000069c 	.word	0x2000069c

08001914 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001914:	e7fe      	b.n	8001914 <ADC1_IRQHandler>
	...

08001918 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <HAL_Init+0x28>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a07      	ldr	r2, [pc, #28]	; (8001940 <HAL_Init+0x28>)
 8001922:	f043 0310 	orr.w	r3, r3, #16
 8001926:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001928:	2003      	movs	r0, #3
 800192a:	f000 f92b 	bl	8001b84 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800192e:	2000      	movs	r0, #0
 8001930:	f000 f808 	bl	8001944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001934:	f7ff fd3e 	bl	80013b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40022000 	.word	0x40022000

08001944 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_InitTick+0x54>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_InitTick+0x58>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	4619      	mov	r1, r3
 8001956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800195a:	fbb3 f3f1 	udiv	r3, r3, r1
 800195e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001962:	4618      	mov	r0, r3
 8001964:	f000 f943 	bl	8001bee <HAL_SYSTICK_Config>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e00e      	b.n	8001990 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b0f      	cmp	r3, #15
 8001976:	d80a      	bhi.n	800198e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001978:	2200      	movs	r2, #0
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001980:	f000 f90b 	bl	8001b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001984:	4a06      	ldr	r2, [pc, #24]	; (80019a0 <HAL_InitTick+0x5c>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	e000      	b.n	8001990 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
}
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000200 	.word	0x20000200
 800199c:	20000408 	.word	0x20000408
 80019a0:	20000404 	.word	0x20000404

080019a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_IncTick+0x20>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_IncTick+0x24>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <HAL_IncTick+0x24>)
 80019b6:	6013      	str	r3, [r2, #0]
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000408 	.word	0x20000408
 80019c8:	20000698 	.word	0x20000698

080019cc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return uwTick;  
 80019d0:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <HAL_GetTick+0x14>)
 80019d2:	681b      	ldr	r3, [r3, #0]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20000698 	.word	0x20000698

080019e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a00:	4013      	ands	r3, r2
 8001a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a16:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	60d3      	str	r3, [r2, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <__NVIC_GetPriorityGrouping+0x18>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	f003 0307 	and.w	r3, r3, #7
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	db0b      	blt.n	8001a72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	f003 021f 	and.w	r2, r3, #31
 8001a60:	4907      	ldr	r1, [pc, #28]	; (8001a80 <__NVIC_EnableIRQ+0x38>)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	095b      	lsrs	r3, r3, #5
 8001a68:	2001      	movs	r0, #1
 8001a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000e100 	.word	0xe000e100

08001a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	6039      	str	r1, [r7, #0]
 8001a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	db0a      	blt.n	8001aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	490c      	ldr	r1, [pc, #48]	; (8001ad0 <__NVIC_SetPriority+0x4c>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	0112      	lsls	r2, r2, #4
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aac:	e00a      	b.n	8001ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4908      	ldr	r1, [pc, #32]	; (8001ad4 <__NVIC_SetPriority+0x50>)
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	3b04      	subs	r3, #4
 8001abc:	0112      	lsls	r2, r2, #4
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	761a      	strb	r2, [r3, #24]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000e100 	.word	0xe000e100
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b089      	sub	sp, #36	; 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f1c3 0307 	rsb	r3, r3, #7
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	bf28      	it	cs
 8001af6:	2304      	movcs	r3, #4
 8001af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3304      	adds	r3, #4
 8001afe:	2b06      	cmp	r3, #6
 8001b00:	d902      	bls.n	8001b08 <NVIC_EncodePriority+0x30>
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3b03      	subs	r3, #3
 8001b06:	e000      	b.n	8001b0a <NVIC_EncodePriority+0x32>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43da      	mvns	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	43d9      	mvns	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	4313      	orrs	r3, r2
         );
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3724      	adds	r7, #36	; 0x24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b50:	d301      	bcc.n	8001b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00f      	b.n	8001b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b56:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <SysTick_Config+0x40>)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5e:	210f      	movs	r1, #15
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b64:	f7ff ff8e 	bl	8001a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <SysTick_Config+0x40>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6e:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <SysTick_Config+0x40>)
 8001b70:	2207      	movs	r2, #7
 8001b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	e000e010 	.word	0xe000e010

08001b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ff29 	bl	80019e4 <__NVIC_SetPriorityGrouping>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bac:	f7ff ff3e 	bl	8001a2c <__NVIC_GetPriorityGrouping>
 8001bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	6978      	ldr	r0, [r7, #20]
 8001bb8:	f7ff ff8e 	bl	8001ad8 <NVIC_EncodePriority>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff5d 	bl	8001a84 <__NVIC_SetPriority>
}
 8001bca:	bf00      	nop
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	4603      	mov	r3, r0
 8001bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff31 	bl	8001a48 <__NVIC_EnableIRQ>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff ffa2 	bl	8001b40 <SysTick_Config>
 8001bfc:	4603      	mov	r3, r0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e014      	b.n	8001c42 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	791b      	ldrb	r3, [r3, #4]
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d105      	bne.n	8001c2e <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff fbe7 	bl	80013fc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2202      	movs	r2, #2
 8001c32:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8001c4a:	b480      	push	{r7}
 8001c4c:	b087      	sub	sp, #28
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	60f8      	str	r0, [r7, #12]
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d104      	bne.n	8001c72 <HAL_DAC_SetValue+0x28>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3308      	adds	r3, #8
 8001c70:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	461a      	mov	r2, r3
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	371c      	adds	r7, #28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 selected
  * @retval HAL status 
  */

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	795b      	ldrb	r3, [r3, #5]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d101      	bne.n	8001c9e <HAL_DAC_Start+0x16>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e025      	b.n	8001cea <HAL_DAC_Start+0x62>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6819      	ldr	r1, [r3, #0]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	409a      	lsls	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	601a      	str	r2, [r3, #0]
  
  /* Check if software trigger enabled */
  if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001cc8:	2b3c      	cmp	r3, #60	; 0x3c
 8001cca:	d107      	bne.n	8001cdc <HAL_DAC_Start+0x54>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0201 	orr.w	r2, r2, #1
 8001cda:	605a      	str	r2, [r3, #4]
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b087      	sub	sp, #28
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	795b      	ldrb	r3, [r3, #5]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_DAC_ConfigChannel+0x20>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e036      	b.n	8001d84 <HAL_DAC_ConfigChannel+0x8e>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2202      	movs	r2, #2
 8001d20:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001d2a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6819      	ldr	r1, [r3, #0]
 8001d64:	22c0      	movs	r2, #192	; 0xc0
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43da      	mvns	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	400a      	ands	r2, r1
 8001d74:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	371c      	adds	r7, #28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d005      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2204      	movs	r2, #4
 8001daa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	73fb      	strb	r3, [r7, #15]
 8001db0:	e027      	b.n	8001e02 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 020e 	bic.w	r2, r2, #14
 8001dc0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0201 	bic.w	r2, r2, #1
 8001dd0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dda:	2101      	movs	r1, #1
 8001ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8001de0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	4798      	blx	r3
    } 
  }
  return status;
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e1a:	e14e      	b.n	80020ba <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	2101      	movs	r1, #1
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	fa01 f303 	lsl.w	r3, r1, r3
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 8140 	beq.w	80020b4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d003      	beq.n	8001e44 <HAL_GPIO_Init+0x38>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b12      	cmp	r3, #18
 8001e42:	d123      	bne.n	8001e8c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	08da      	lsrs	r2, r3, #3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3208      	adds	r2, #8
 8001e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e50:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	220f      	movs	r2, #15
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	08da      	lsrs	r2, r3, #3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3208      	adds	r2, #8
 8001e86:	6939      	ldr	r1, [r7, #16]
 8001e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	2203      	movs	r2, #3
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 0203 	and.w	r2, r3, #3
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d00b      	beq.n	8001ee0 <HAL_GPIO_Init+0xd4>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d007      	beq.n	8001ee0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ed4:	2b11      	cmp	r3, #17
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b12      	cmp	r3, #18
 8001ede:	d130      	bne.n	8001f42 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	2203      	movs	r2, #3
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f16:	2201      	movs	r2, #1
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4013      	ands	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	f003 0201 	and.w	r2, r3, #1
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 809a 	beq.w	80020b4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f80:	4b55      	ldr	r3, [pc, #340]	; (80020d8 <HAL_GPIO_Init+0x2cc>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	4a54      	ldr	r2, [pc, #336]	; (80020d8 <HAL_GPIO_Init+0x2cc>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6193      	str	r3, [r2, #24]
 8001f8c:	4b52      	ldr	r3, [pc, #328]	; (80020d8 <HAL_GPIO_Init+0x2cc>)
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f98:	4a50      	ldr	r2, [pc, #320]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	089b      	lsrs	r3, r3, #2
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	220f      	movs	r2, #15
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fc2:	d013      	beq.n	8001fec <HAL_GPIO_Init+0x1e0>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a46      	ldr	r2, [pc, #280]	; (80020e0 <HAL_GPIO_Init+0x2d4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d00d      	beq.n	8001fe8 <HAL_GPIO_Init+0x1dc>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a45      	ldr	r2, [pc, #276]	; (80020e4 <HAL_GPIO_Init+0x2d8>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d007      	beq.n	8001fe4 <HAL_GPIO_Init+0x1d8>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a44      	ldr	r2, [pc, #272]	; (80020e8 <HAL_GPIO_Init+0x2dc>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d101      	bne.n	8001fe0 <HAL_GPIO_Init+0x1d4>
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e006      	b.n	8001fee <HAL_GPIO_Init+0x1e2>
 8001fe0:	2305      	movs	r3, #5
 8001fe2:	e004      	b.n	8001fee <HAL_GPIO_Init+0x1e2>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e002      	b.n	8001fee <HAL_GPIO_Init+0x1e2>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <HAL_GPIO_Init+0x1e2>
 8001fec:	2300      	movs	r3, #0
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	f002 0203 	and.w	r2, r2, #3
 8001ff4:	0092      	lsls	r2, r2, #2
 8001ff6:	4093      	lsls	r3, r2
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ffe:	4937      	ldr	r1, [pc, #220]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	089b      	lsrs	r3, r3, #2
 8002004:	3302      	adds	r3, #2
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800200c:	4b37      	ldr	r3, [pc, #220]	; (80020ec <HAL_GPIO_Init+0x2e0>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	43db      	mvns	r3, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4313      	orrs	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002030:	4a2e      	ldr	r2, [pc, #184]	; (80020ec <HAL_GPIO_Init+0x2e0>)
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002036:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_GPIO_Init+0x2e0>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	43db      	mvns	r3, r3
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	4013      	ands	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800205a:	4a24      	ldr	r2, [pc, #144]	; (80020ec <HAL_GPIO_Init+0x2e0>)
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002060:	4b22      	ldr	r3, [pc, #136]	; (80020ec <HAL_GPIO_Init+0x2e0>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	43db      	mvns	r3, r3
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4013      	ands	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002084:	4a19      	ldr	r2, [pc, #100]	; (80020ec <HAL_GPIO_Init+0x2e0>)
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800208a:	4b18      	ldr	r3, [pc, #96]	; (80020ec <HAL_GPIO_Init+0x2e0>)
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	43db      	mvns	r3, r3
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4013      	ands	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020ae:	4a0f      	ldr	r2, [pc, #60]	; (80020ec <HAL_GPIO_Init+0x2e0>)
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	3301      	adds	r3, #1
 80020b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	fa22 f303 	lsr.w	r3, r2, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f47f aea9 	bne.w	8001e1c <HAL_GPIO_Init+0x10>
  }
}
 80020ca:	bf00      	nop
 80020cc:	371c      	adds	r7, #28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40021000 	.word	0x40021000
 80020dc:	40010000 	.word	0x40010000
 80020e0:	48000400 	.word	0x48000400
 80020e4:	48000800 	.word	0x48000800
 80020e8:	48000c00 	.word	0x48000c00
 80020ec:	40010400 	.word	0x40010400

080020f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	807b      	strh	r3, [r7, #2]
 80020fc:	4613      	mov	r3, r2
 80020fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002100:	787b      	ldrb	r3, [r7, #1]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002106:	887a      	ldrh	r2, [r7, #2]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800210c:	e002      	b.n	8002114 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800210e:	887a      	ldrh	r2, [r7, #2]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002126:	af00      	add	r7, sp, #0
 8002128:	1d3b      	adds	r3, r7, #4
 800212a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800212c:	1d3b      	adds	r3, r7, #4
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d102      	bne.n	800213a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	f000 bef4 	b.w	8002f22 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 816a 	beq.w	800241e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800214a:	4bb3      	ldr	r3, [pc, #716]	; (8002418 <HAL_RCC_OscConfig+0x2f8>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 030c 	and.w	r3, r3, #12
 8002152:	2b04      	cmp	r3, #4
 8002154:	d00c      	beq.n	8002170 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002156:	4bb0      	ldr	r3, [pc, #704]	; (8002418 <HAL_RCC_OscConfig+0x2f8>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 030c 	and.w	r3, r3, #12
 800215e:	2b08      	cmp	r3, #8
 8002160:	d159      	bne.n	8002216 <HAL_RCC_OscConfig+0xf6>
 8002162:	4bad      	ldr	r3, [pc, #692]	; (8002418 <HAL_RCC_OscConfig+0x2f8>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800216a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800216e:	d152      	bne.n	8002216 <HAL_RCC_OscConfig+0xf6>
 8002170:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002174:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800217c:	fa93 f3a3 	rbit	r3, r3
 8002180:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002184:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002188:	fab3 f383 	clz	r3, r3
 800218c:	b2db      	uxtb	r3, r3
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	b2db      	uxtb	r3, r3
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b01      	cmp	r3, #1
 800219a:	d102      	bne.n	80021a2 <HAL_RCC_OscConfig+0x82>
 800219c:	4b9e      	ldr	r3, [pc, #632]	; (8002418 <HAL_RCC_OscConfig+0x2f8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	e015      	b.n	80021ce <HAL_RCC_OscConfig+0xae>
 80021a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021a6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021aa:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80021ae:	fa93 f3a3 	rbit	r3, r3
 80021b2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80021b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ba:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80021be:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80021c2:	fa93 f3a3 	rbit	r3, r3
 80021c6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80021ca:	4b93      	ldr	r3, [pc, #588]	; (8002418 <HAL_RCC_OscConfig+0x2f8>)
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021d2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80021d6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80021da:	fa92 f2a2 	rbit	r2, r2
 80021de:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80021e2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80021e6:	fab2 f282 	clz	r2, r2
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	f042 0220 	orr.w	r2, r2, #32
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	f002 021f 	and.w	r2, r2, #31
 80021f6:	2101      	movs	r1, #1
 80021f8:	fa01 f202 	lsl.w	r2, r1, r2
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 810c 	beq.w	800241c <HAL_RCC_OscConfig+0x2fc>
 8002204:	1d3b      	adds	r3, r7, #4
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	f040 8106 	bne.w	800241c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	f000 be86 	b.w	8002f22 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002216:	1d3b      	adds	r3, r7, #4
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002220:	d106      	bne.n	8002230 <HAL_RCC_OscConfig+0x110>
 8002222:	4b7d      	ldr	r3, [pc, #500]	; (8002418 <HAL_RCC_OscConfig+0x2f8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a7c      	ldr	r2, [pc, #496]	; (8002418 <HAL_RCC_OscConfig+0x2f8>)
 8002228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	e030      	b.n	8002292 <HAL_RCC_OscConfig+0x172>
 8002230:	1d3b      	adds	r3, r7, #4
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0x134>
 800223a:	4b77      	ldr	r3, [pc, #476]	; (8002418 <HAL_RCC_OscConfig+0x2f8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a76      	ldr	r2, [pc, #472]	; (8002418 <HAL_RCC_OscConfig+0x2f8>)
 8002240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	4b74      	ldr	r3, [pc, #464]	; (8002418 <HAL_RCC_OscConfig+0x2f8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a73      	ldr	r2, [pc, #460]	; (8002418 <HAL_RCC_OscConfig+0x2f8>)
 800224c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e01e      	b.n	8002292 <HAL_RCC_OscConfig+0x172>
 8002254:	1d3b      	adds	r3, r7, #4
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800225e:	d10c      	bne.n	800227a <HAL_RCC_OscConfig+0x15a>
 8002260:	4b6d      	ldr	r3, [pc, #436]	; (8002418 <HAL_RCC_OscConfig+0x2f8>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a6c      	ldr	r2, [pc, #432]	; (8002418 <HAL_RCC_OscConfig+0x2f8>)
 8002266:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	4b6a      	ldr	r3, [pc, #424]	; (8002418 <HAL_RCC_OscConfig+0x2f8>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a69      	ldr	r2, [pc, #420]	; (8002418 <HAL_RCC_OscConfig+0x2f8>)
 8002272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	e00b      	b.n	8002292 <HAL_RCC_OscConfig+0x172>
 800227a:	4b67      	ldr	r3, [pc, #412]	; (8002418 <HAL_RCC_OscConfig+0x2f8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a66      	ldr	r2, [pc, #408]	; (8002418 <HAL_RCC_OscConfig+0x2f8>)
 8002280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	4b64      	ldr	r3, [pc, #400]	; (8002418 <HAL_RCC_OscConfig+0x2f8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a63      	ldr	r2, [pc, #396]	; (8002418 <HAL_RCC_OscConfig+0x2f8>)
 800228c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002290:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002292:	4b61      	ldr	r3, [pc, #388]	; (8002418 <HAL_RCC_OscConfig+0x2f8>)
 8002294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002296:	f023 020f 	bic.w	r2, r3, #15
 800229a:	1d3b      	adds	r3, r7, #4
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	495d      	ldr	r1, [pc, #372]	; (8002418 <HAL_RCC_OscConfig+0x2f8>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d059      	beq.n	8002364 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7ff fb8c 	bl	80019cc <HAL_GetTick>
 80022b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b8:	e00a      	b.n	80022d0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022ba:	f7ff fb87 	bl	80019cc <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b64      	cmp	r3, #100	; 0x64
 80022c8:	d902      	bls.n	80022d0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	f000 be29 	b.w	8002f22 <HAL_RCC_OscConfig+0xe02>
 80022d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022d4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80022dc:	fa93 f3a3 	rbit	r3, r3
 80022e0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80022e4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e8:	fab3 f383 	clz	r3, r3
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d102      	bne.n	8002302 <HAL_RCC_OscConfig+0x1e2>
 80022fc:	4b46      	ldr	r3, [pc, #280]	; (8002418 <HAL_RCC_OscConfig+0x2f8>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	e015      	b.n	800232e <HAL_RCC_OscConfig+0x20e>
 8002302:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002306:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800230e:	fa93 f3a3 	rbit	r3, r3
 8002312:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002316:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800231a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800231e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002322:	fa93 f3a3 	rbit	r3, r3
 8002326:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800232a:	4b3b      	ldr	r3, [pc, #236]	; (8002418 <HAL_RCC_OscConfig+0x2f8>)
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002332:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002336:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800233a:	fa92 f2a2 	rbit	r2, r2
 800233e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002342:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002346:	fab2 f282 	clz	r2, r2
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	f042 0220 	orr.w	r2, r2, #32
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	f002 021f 	and.w	r2, r2, #31
 8002356:	2101      	movs	r1, #1
 8002358:	fa01 f202 	lsl.w	r2, r1, r2
 800235c:	4013      	ands	r3, r2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0ab      	beq.n	80022ba <HAL_RCC_OscConfig+0x19a>
 8002362:	e05c      	b.n	800241e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002364:	f7ff fb32 	bl	80019cc <HAL_GetTick>
 8002368:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800236c:	e00a      	b.n	8002384 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800236e:	f7ff fb2d 	bl	80019cc <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	; 0x64
 800237c:	d902      	bls.n	8002384 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	f000 bdcf 	b.w	8002f22 <HAL_RCC_OscConfig+0xe02>
 8002384:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002388:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002398:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800239c:	fab3 f383 	clz	r3, r3
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	095b      	lsrs	r3, r3, #5
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d102      	bne.n	80023b6 <HAL_RCC_OscConfig+0x296>
 80023b0:	4b19      	ldr	r3, [pc, #100]	; (8002418 <HAL_RCC_OscConfig+0x2f8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	e015      	b.n	80023e2 <HAL_RCC_OscConfig+0x2c2>
 80023b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023ba:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80023c2:	fa93 f3a3 	rbit	r3, r3
 80023c6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80023ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023ce:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80023d2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80023d6:	fa93 f3a3 	rbit	r3, r3
 80023da:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80023de:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <HAL_RCC_OscConfig+0x2f8>)
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023e6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80023ea:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80023ee:	fa92 f2a2 	rbit	r2, r2
 80023f2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80023f6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80023fa:	fab2 f282 	clz	r2, r2
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	f042 0220 	orr.w	r2, r2, #32
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	f002 021f 	and.w	r2, r2, #31
 800240a:	2101      	movs	r1, #1
 800240c:	fa01 f202 	lsl.w	r2, r1, r2
 8002410:	4013      	ands	r3, r2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1ab      	bne.n	800236e <HAL_RCC_OscConfig+0x24e>
 8002416:	e002      	b.n	800241e <HAL_RCC_OscConfig+0x2fe>
 8002418:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 816f 	beq.w	800270c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800242e:	4bd0      	ldr	r3, [pc, #832]	; (8002770 <HAL_RCC_OscConfig+0x650>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 030c 	and.w	r3, r3, #12
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00b      	beq.n	8002452 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800243a:	4bcd      	ldr	r3, [pc, #820]	; (8002770 <HAL_RCC_OscConfig+0x650>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b08      	cmp	r3, #8
 8002444:	d16c      	bne.n	8002520 <HAL_RCC_OscConfig+0x400>
 8002446:	4bca      	ldr	r3, [pc, #808]	; (8002770 <HAL_RCC_OscConfig+0x650>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d166      	bne.n	8002520 <HAL_RCC_OscConfig+0x400>
 8002452:	2302      	movs	r3, #2
 8002454:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002458:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800245c:	fa93 f3a3 	rbit	r3, r3
 8002460:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002464:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002468:	fab3 f383 	clz	r3, r3
 800246c:	b2db      	uxtb	r3, r3
 800246e:	095b      	lsrs	r3, r3, #5
 8002470:	b2db      	uxtb	r3, r3
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b01      	cmp	r3, #1
 800247a:	d102      	bne.n	8002482 <HAL_RCC_OscConfig+0x362>
 800247c:	4bbc      	ldr	r3, [pc, #752]	; (8002770 <HAL_RCC_OscConfig+0x650>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	e013      	b.n	80024aa <HAL_RCC_OscConfig+0x38a>
 8002482:	2302      	movs	r3, #2
 8002484:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800248c:	fa93 f3a3 	rbit	r3, r3
 8002490:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002494:	2302      	movs	r3, #2
 8002496:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800249a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800249e:	fa93 f3a3 	rbit	r3, r3
 80024a2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80024a6:	4bb2      	ldr	r3, [pc, #712]	; (8002770 <HAL_RCC_OscConfig+0x650>)
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	2202      	movs	r2, #2
 80024ac:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80024b0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80024b4:	fa92 f2a2 	rbit	r2, r2
 80024b8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80024bc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80024c0:	fab2 f282 	clz	r2, r2
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	f042 0220 	orr.w	r2, r2, #32
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	f002 021f 	and.w	r2, r2, #31
 80024d0:	2101      	movs	r1, #1
 80024d2:	fa01 f202 	lsl.w	r2, r1, r2
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d007      	beq.n	80024ec <HAL_RCC_OscConfig+0x3cc>
 80024dc:	1d3b      	adds	r3, r7, #4
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d002      	beq.n	80024ec <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	f000 bd1b 	b.w	8002f22 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ec:	4ba0      	ldr	r3, [pc, #640]	; (8002770 <HAL_RCC_OscConfig+0x650>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024f4:	1d3b      	adds	r3, r7, #4
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	21f8      	movs	r1, #248	; 0xf8
 80024fc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002500:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002504:	fa91 f1a1 	rbit	r1, r1
 8002508:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800250c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002510:	fab1 f181 	clz	r1, r1
 8002514:	b2c9      	uxtb	r1, r1
 8002516:	408b      	lsls	r3, r1
 8002518:	4995      	ldr	r1, [pc, #596]	; (8002770 <HAL_RCC_OscConfig+0x650>)
 800251a:	4313      	orrs	r3, r2
 800251c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251e:	e0f5      	b.n	800270c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002520:	1d3b      	adds	r3, r7, #4
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 8085 	beq.w	8002636 <HAL_RCC_OscConfig+0x516>
 800252c:	2301      	movs	r3, #1
 800252e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002536:	fa93 f3a3 	rbit	r3, r3
 800253a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800253e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002542:	fab3 f383 	clz	r3, r3
 8002546:	b2db      	uxtb	r3, r3
 8002548:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800254c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	461a      	mov	r2, r3
 8002554:	2301      	movs	r3, #1
 8002556:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002558:	f7ff fa38 	bl	80019cc <HAL_GetTick>
 800255c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002560:	e00a      	b.n	8002578 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002562:	f7ff fa33 	bl	80019cc <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d902      	bls.n	8002578 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	f000 bcd5 	b.w	8002f22 <HAL_RCC_OscConfig+0xe02>
 8002578:	2302      	movs	r3, #2
 800257a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002582:	fa93 f3a3 	rbit	r3, r3
 8002586:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800258a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258e:	fab3 f383 	clz	r3, r3
 8002592:	b2db      	uxtb	r3, r3
 8002594:	095b      	lsrs	r3, r3, #5
 8002596:	b2db      	uxtb	r3, r3
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d102      	bne.n	80025a8 <HAL_RCC_OscConfig+0x488>
 80025a2:	4b73      	ldr	r3, [pc, #460]	; (8002770 <HAL_RCC_OscConfig+0x650>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	e013      	b.n	80025d0 <HAL_RCC_OscConfig+0x4b0>
 80025a8:	2302      	movs	r3, #2
 80025aa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80025ba:	2302      	movs	r3, #2
 80025bc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80025c0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80025c4:	fa93 f3a3 	rbit	r3, r3
 80025c8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80025cc:	4b68      	ldr	r3, [pc, #416]	; (8002770 <HAL_RCC_OscConfig+0x650>)
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	2202      	movs	r2, #2
 80025d2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80025d6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80025da:	fa92 f2a2 	rbit	r2, r2
 80025de:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80025e2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80025e6:	fab2 f282 	clz	r2, r2
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	f042 0220 	orr.w	r2, r2, #32
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	f002 021f 	and.w	r2, r2, #31
 80025f6:	2101      	movs	r1, #1
 80025f8:	fa01 f202 	lsl.w	r2, r1, r2
 80025fc:	4013      	ands	r3, r2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0af      	beq.n	8002562 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002602:	4b5b      	ldr	r3, [pc, #364]	; (8002770 <HAL_RCC_OscConfig+0x650>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800260a:	1d3b      	adds	r3, r7, #4
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	21f8      	movs	r1, #248	; 0xf8
 8002612:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002616:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800261a:	fa91 f1a1 	rbit	r1, r1
 800261e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002622:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002626:	fab1 f181 	clz	r1, r1
 800262a:	b2c9      	uxtb	r1, r1
 800262c:	408b      	lsls	r3, r1
 800262e:	4950      	ldr	r1, [pc, #320]	; (8002770 <HAL_RCC_OscConfig+0x650>)
 8002630:	4313      	orrs	r3, r2
 8002632:	600b      	str	r3, [r1, #0]
 8002634:	e06a      	b.n	800270c <HAL_RCC_OscConfig+0x5ec>
 8002636:	2301      	movs	r3, #1
 8002638:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002640:	fa93 f3a3 	rbit	r3, r3
 8002644:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002648:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800264c:	fab3 f383 	clz	r3, r3
 8002650:	b2db      	uxtb	r3, r3
 8002652:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002656:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	461a      	mov	r2, r3
 800265e:	2300      	movs	r3, #0
 8002660:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002662:	f7ff f9b3 	bl	80019cc <HAL_GetTick>
 8002666:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266a:	e00a      	b.n	8002682 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800266c:	f7ff f9ae 	bl	80019cc <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d902      	bls.n	8002682 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	f000 bc50 	b.w	8002f22 <HAL_RCC_OscConfig+0xe02>
 8002682:	2302      	movs	r3, #2
 8002684:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800268c:	fa93 f3a3 	rbit	r3, r3
 8002690:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002694:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002698:	fab3 f383 	clz	r3, r3
 800269c:	b2db      	uxtb	r3, r3
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d102      	bne.n	80026b2 <HAL_RCC_OscConfig+0x592>
 80026ac:	4b30      	ldr	r3, [pc, #192]	; (8002770 <HAL_RCC_OscConfig+0x650>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	e013      	b.n	80026da <HAL_RCC_OscConfig+0x5ba>
 80026b2:	2302      	movs	r3, #2
 80026b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80026bc:	fa93 f3a3 	rbit	r3, r3
 80026c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80026c4:	2302      	movs	r3, #2
 80026c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80026ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80026d6:	4b26      	ldr	r3, [pc, #152]	; (8002770 <HAL_RCC_OscConfig+0x650>)
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	2202      	movs	r2, #2
 80026dc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80026e0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80026e4:	fa92 f2a2 	rbit	r2, r2
 80026e8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80026ec:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80026f0:	fab2 f282 	clz	r2, r2
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	f042 0220 	orr.w	r2, r2, #32
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	f002 021f 	and.w	r2, r2, #31
 8002700:	2101      	movs	r1, #1
 8002702:	fa01 f202 	lsl.w	r2, r1, r2
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1af      	bne.n	800266c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800270c:	1d3b      	adds	r3, r7, #4
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 80da 	beq.w	80028d0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800271c:	1d3b      	adds	r3, r7, #4
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d069      	beq.n	80027fa <HAL_RCC_OscConfig+0x6da>
 8002726:	2301      	movs	r3, #1
 8002728:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002730:	fa93 f3a3 	rbit	r3, r3
 8002734:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002738:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800273c:	fab3 f383 	clz	r3, r3
 8002740:	b2db      	uxtb	r3, r3
 8002742:	461a      	mov	r2, r3
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_RCC_OscConfig+0x654>)
 8002746:	4413      	add	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	461a      	mov	r2, r3
 800274c:	2301      	movs	r3, #1
 800274e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002750:	f7ff f93c 	bl	80019cc <HAL_GetTick>
 8002754:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002758:	e00e      	b.n	8002778 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800275a:	f7ff f937 	bl	80019cc <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d906      	bls.n	8002778 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e3d9      	b.n	8002f22 <HAL_RCC_OscConfig+0xe02>
 800276e:	bf00      	nop
 8002770:	40021000 	.word	0x40021000
 8002774:	10908120 	.word	0x10908120
 8002778:	2302      	movs	r3, #2
 800277a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002782:	fa93 f3a3 	rbit	r3, r3
 8002786:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800278a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800278e:	2202      	movs	r2, #2
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	fa93 f2a3 	rbit	r2, r3
 800279c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80027a6:	2202      	movs	r2, #2
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	fa93 f2a3 	rbit	r2, r3
 80027b4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80027b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ba:	4ba5      	ldr	r3, [pc, #660]	; (8002a50 <HAL_RCC_OscConfig+0x930>)
 80027bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027be:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80027c2:	2102      	movs	r1, #2
 80027c4:	6019      	str	r1, [r3, #0]
 80027c6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	fa93 f1a3 	rbit	r1, r3
 80027d0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80027d4:	6019      	str	r1, [r3, #0]
  return result;
 80027d6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	fab3 f383 	clz	r3, r3
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	2101      	movs	r1, #1
 80027ee:	fa01 f303 	lsl.w	r3, r1, r3
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0b0      	beq.n	800275a <HAL_RCC_OscConfig+0x63a>
 80027f8:	e06a      	b.n	80028d0 <HAL_RCC_OscConfig+0x7b0>
 80027fa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80027fe:	2201      	movs	r2, #1
 8002800:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002802:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	fa93 f2a3 	rbit	r2, r3
 800280c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002810:	601a      	str	r2, [r3, #0]
  return result;
 8002812:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002816:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002818:	fab3 f383 	clz	r3, r3
 800281c:	b2db      	uxtb	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	4b8c      	ldr	r3, [pc, #560]	; (8002a54 <HAL_RCC_OscConfig+0x934>)
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	461a      	mov	r2, r3
 8002828:	2300      	movs	r3, #0
 800282a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282c:	f7ff f8ce 	bl	80019cc <HAL_GetTick>
 8002830:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002834:	e009      	b.n	800284a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002836:	f7ff f8c9 	bl	80019cc <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e36b      	b.n	8002f22 <HAL_RCC_OscConfig+0xe02>
 800284a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800284e:	2202      	movs	r2, #2
 8002850:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002852:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	fa93 f2a3 	rbit	r2, r3
 800285c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002866:	2202      	movs	r2, #2
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	fa93 f2a3 	rbit	r2, r3
 8002874:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800287e:	2202      	movs	r2, #2
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	fa93 f2a3 	rbit	r2, r3
 800288c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002890:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002892:	4b6f      	ldr	r3, [pc, #444]	; (8002a50 <HAL_RCC_OscConfig+0x930>)
 8002894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002896:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800289a:	2102      	movs	r1, #2
 800289c:	6019      	str	r1, [r3, #0]
 800289e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	fa93 f1a3 	rbit	r1, r3
 80028a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80028ac:	6019      	str	r1, [r3, #0]
  return result;
 80028ae:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	fab3 f383 	clz	r3, r3
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	f003 031f 	and.w	r3, r3, #31
 80028c4:	2101      	movs	r1, #1
 80028c6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1b2      	bne.n	8002836 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d0:	1d3b      	adds	r3, r7, #4
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 8158 	beq.w	8002b90 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028e0:	2300      	movs	r3, #0
 80028e2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e6:	4b5a      	ldr	r3, [pc, #360]	; (8002a50 <HAL_RCC_OscConfig+0x930>)
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d112      	bne.n	8002918 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f2:	4b57      	ldr	r3, [pc, #348]	; (8002a50 <HAL_RCC_OscConfig+0x930>)
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	4a56      	ldr	r2, [pc, #344]	; (8002a50 <HAL_RCC_OscConfig+0x930>)
 80028f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fc:	61d3      	str	r3, [r2, #28]
 80028fe:	4b54      	ldr	r3, [pc, #336]	; (8002a50 <HAL_RCC_OscConfig+0x930>)
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002906:	f107 0308 	add.w	r3, r7, #8
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	f107 0308 	add.w	r3, r7, #8
 8002910:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002912:	2301      	movs	r3, #1
 8002914:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002918:	4b4f      	ldr	r3, [pc, #316]	; (8002a58 <HAL_RCC_OscConfig+0x938>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002920:	2b00      	cmp	r3, #0
 8002922:	d11a      	bne.n	800295a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002924:	4b4c      	ldr	r3, [pc, #304]	; (8002a58 <HAL_RCC_OscConfig+0x938>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a4b      	ldr	r2, [pc, #300]	; (8002a58 <HAL_RCC_OscConfig+0x938>)
 800292a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002930:	f7ff f84c 	bl	80019cc <HAL_GetTick>
 8002934:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002938:	e009      	b.n	800294e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293a:	f7ff f847 	bl	80019cc <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b64      	cmp	r3, #100	; 0x64
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e2e9      	b.n	8002f22 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294e:	4b42      	ldr	r3, [pc, #264]	; (8002a58 <HAL_RCC_OscConfig+0x938>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0ef      	beq.n	800293a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800295a:	1d3b      	adds	r3, r7, #4
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d106      	bne.n	8002972 <HAL_RCC_OscConfig+0x852>
 8002964:	4b3a      	ldr	r3, [pc, #232]	; (8002a50 <HAL_RCC_OscConfig+0x930>)
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	4a39      	ldr	r2, [pc, #228]	; (8002a50 <HAL_RCC_OscConfig+0x930>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	6213      	str	r3, [r2, #32]
 8002970:	e02f      	b.n	80029d2 <HAL_RCC_OscConfig+0x8b2>
 8002972:	1d3b      	adds	r3, r7, #4
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10c      	bne.n	8002996 <HAL_RCC_OscConfig+0x876>
 800297c:	4b34      	ldr	r3, [pc, #208]	; (8002a50 <HAL_RCC_OscConfig+0x930>)
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	4a33      	ldr	r2, [pc, #204]	; (8002a50 <HAL_RCC_OscConfig+0x930>)
 8002982:	f023 0301 	bic.w	r3, r3, #1
 8002986:	6213      	str	r3, [r2, #32]
 8002988:	4b31      	ldr	r3, [pc, #196]	; (8002a50 <HAL_RCC_OscConfig+0x930>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	4a30      	ldr	r2, [pc, #192]	; (8002a50 <HAL_RCC_OscConfig+0x930>)
 800298e:	f023 0304 	bic.w	r3, r3, #4
 8002992:	6213      	str	r3, [r2, #32]
 8002994:	e01d      	b.n	80029d2 <HAL_RCC_OscConfig+0x8b2>
 8002996:	1d3b      	adds	r3, r7, #4
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	2b05      	cmp	r3, #5
 800299e:	d10c      	bne.n	80029ba <HAL_RCC_OscConfig+0x89a>
 80029a0:	4b2b      	ldr	r3, [pc, #172]	; (8002a50 <HAL_RCC_OscConfig+0x930>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	4a2a      	ldr	r2, [pc, #168]	; (8002a50 <HAL_RCC_OscConfig+0x930>)
 80029a6:	f043 0304 	orr.w	r3, r3, #4
 80029aa:	6213      	str	r3, [r2, #32]
 80029ac:	4b28      	ldr	r3, [pc, #160]	; (8002a50 <HAL_RCC_OscConfig+0x930>)
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	4a27      	ldr	r2, [pc, #156]	; (8002a50 <HAL_RCC_OscConfig+0x930>)
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	6213      	str	r3, [r2, #32]
 80029b8:	e00b      	b.n	80029d2 <HAL_RCC_OscConfig+0x8b2>
 80029ba:	4b25      	ldr	r3, [pc, #148]	; (8002a50 <HAL_RCC_OscConfig+0x930>)
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	4a24      	ldr	r2, [pc, #144]	; (8002a50 <HAL_RCC_OscConfig+0x930>)
 80029c0:	f023 0301 	bic.w	r3, r3, #1
 80029c4:	6213      	str	r3, [r2, #32]
 80029c6:	4b22      	ldr	r3, [pc, #136]	; (8002a50 <HAL_RCC_OscConfig+0x930>)
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	4a21      	ldr	r2, [pc, #132]	; (8002a50 <HAL_RCC_OscConfig+0x930>)
 80029cc:	f023 0304 	bic.w	r3, r3, #4
 80029d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029d2:	1d3b      	adds	r3, r7, #4
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d06b      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029dc:	f7fe fff6 	bl	80019cc <HAL_GetTick>
 80029e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e4:	e00b      	b.n	80029fe <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e6:	f7fe fff1 	bl	80019cc <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e291      	b.n	8002f22 <HAL_RCC_OscConfig+0xe02>
 80029fe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002a02:	2202      	movs	r2, #2
 8002a04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	fa93 f2a3 	rbit	r2, r3
 8002a10:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	fa93 f2a3 	rbit	r2, r3
 8002a28:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002a2c:	601a      	str	r2, [r3, #0]
  return result;
 8002a2e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002a32:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a34:	fab3 f383 	clz	r3, r3
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	095b      	lsrs	r3, r3, #5
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	f043 0302 	orr.w	r3, r3, #2
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d109      	bne.n	8002a5c <HAL_RCC_OscConfig+0x93c>
 8002a48:	4b01      	ldr	r3, [pc, #4]	; (8002a50 <HAL_RCC_OscConfig+0x930>)
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	e014      	b.n	8002a78 <HAL_RCC_OscConfig+0x958>
 8002a4e:	bf00      	nop
 8002a50:	40021000 	.word	0x40021000
 8002a54:	10908120 	.word	0x10908120
 8002a58:	40007000 	.word	0x40007000
 8002a5c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002a60:	2202      	movs	r2, #2
 8002a62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a64:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	fa93 f2a3 	rbit	r2, r3
 8002a6e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	4bbb      	ldr	r3, [pc, #748]	; (8002d64 <HAL_RCC_OscConfig+0xc44>)
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	6011      	str	r1, [r2, #0]
 8002a80:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002a84:	6812      	ldr	r2, [r2, #0]
 8002a86:	fa92 f1a2 	rbit	r1, r2
 8002a8a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002a8e:	6011      	str	r1, [r2, #0]
  return result;
 8002a90:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002a94:	6812      	ldr	r2, [r2, #0]
 8002a96:	fab2 f282 	clz	r2, r2
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	f002 021f 	and.w	r2, r2, #31
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d099      	beq.n	80029e6 <HAL_RCC_OscConfig+0x8c6>
 8002ab2:	e063      	b.n	8002b7c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab4:	f7fe ff8a 	bl	80019cc <HAL_GetTick>
 8002ab8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002abc:	e00b      	b.n	8002ad6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002abe:	f7fe ff85 	bl	80019cc <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e225      	b.n	8002f22 <HAL_RCC_OscConfig+0xe02>
 8002ad6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002ada:	2202      	movs	r2, #2
 8002adc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	fa93 f2a3 	rbit	r2, r3
 8002ae8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002af2:	2202      	movs	r2, #2
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	fa93 f2a3 	rbit	r2, r3
 8002b00:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002b04:	601a      	str	r2, [r3, #0]
  return result;
 8002b06:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002b0a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b0c:	fab3 f383 	clz	r3, r3
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	f043 0302 	orr.w	r3, r3, #2
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d102      	bne.n	8002b26 <HAL_RCC_OscConfig+0xa06>
 8002b20:	4b90      	ldr	r3, [pc, #576]	; (8002d64 <HAL_RCC_OscConfig+0xc44>)
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	e00d      	b.n	8002b42 <HAL_RCC_OscConfig+0xa22>
 8002b26:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	fa93 f2a3 	rbit	r2, r3
 8002b38:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	4b89      	ldr	r3, [pc, #548]	; (8002d64 <HAL_RCC_OscConfig+0xc44>)
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002b46:	2102      	movs	r1, #2
 8002b48:	6011      	str	r1, [r2, #0]
 8002b4a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	fa92 f1a2 	rbit	r1, r2
 8002b54:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002b58:	6011      	str	r1, [r2, #0]
  return result;
 8002b5a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002b5e:	6812      	ldr	r2, [r2, #0]
 8002b60:	fab2 f282 	clz	r2, r2
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	f002 021f 	and.w	r2, r2, #31
 8002b70:	2101      	movs	r1, #1
 8002b72:	fa01 f202 	lsl.w	r2, r1, r2
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1a0      	bne.n	8002abe <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b7c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d105      	bne.n	8002b90 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b84:	4b77      	ldr	r3, [pc, #476]	; (8002d64 <HAL_RCC_OscConfig+0xc44>)
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	4a76      	ldr	r2, [pc, #472]	; (8002d64 <HAL_RCC_OscConfig+0xc44>)
 8002b8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b8e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b90:	1d3b      	adds	r3, r7, #4
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 81c2 	beq.w	8002f20 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b9c:	4b71      	ldr	r3, [pc, #452]	; (8002d64 <HAL_RCC_OscConfig+0xc44>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 030c 	and.w	r3, r3, #12
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	f000 819c 	beq.w	8002ee2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002baa:	1d3b      	adds	r3, r7, #4
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	f040 8114 	bne.w	8002dde <HAL_RCC_OscConfig+0xcbe>
 8002bb6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002bba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	fa93 f2a3 	rbit	r2, r3
 8002bca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002bce:	601a      	str	r2, [r3, #0]
  return result;
 8002bd0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002bd4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd6:	fab3 f383 	clz	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002be0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	461a      	mov	r2, r3
 8002be8:	2300      	movs	r3, #0
 8002bea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bec:	f7fe feee 	bl	80019cc <HAL_GetTick>
 8002bf0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf4:	e009      	b.n	8002c0a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bf6:	f7fe fee9 	bl	80019cc <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e18b      	b.n	8002f22 <HAL_RCC_OscConfig+0xe02>
 8002c0a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002c0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c14:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	fa93 f2a3 	rbit	r2, r3
 8002c1e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002c22:	601a      	str	r2, [r3, #0]
  return result;
 8002c24:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002c28:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c2a:	fab3 f383 	clz	r3, r3
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	095b      	lsrs	r3, r3, #5
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d102      	bne.n	8002c44 <HAL_RCC_OscConfig+0xb24>
 8002c3e:	4b49      	ldr	r3, [pc, #292]	; (8002d64 <HAL_RCC_OscConfig+0xc44>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	e01b      	b.n	8002c7c <HAL_RCC_OscConfig+0xb5c>
 8002c44:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002c48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	fa93 f2a3 	rbit	r2, r3
 8002c58:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002c62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	fa93 f2a3 	rbit	r2, r3
 8002c72:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	4b3a      	ldr	r3, [pc, #232]	; (8002d64 <HAL_RCC_OscConfig+0xc44>)
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002c80:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c84:	6011      	str	r1, [r2, #0]
 8002c86:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	fa92 f1a2 	rbit	r1, r2
 8002c90:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002c94:	6011      	str	r1, [r2, #0]
  return result;
 8002c96:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	fab2 f282 	clz	r2, r2
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	f042 0220 	orr.w	r2, r2, #32
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	f002 021f 	and.w	r2, r2, #31
 8002cac:	2101      	movs	r1, #1
 8002cae:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d19e      	bne.n	8002bf6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cb8:	4b2a      	ldr	r3, [pc, #168]	; (8002d64 <HAL_RCC_OscConfig+0xc44>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002cc0:	1d3b      	adds	r3, r7, #4
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002cc6:	1d3b      	adds	r3, r7, #4
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	430b      	orrs	r3, r1
 8002cce:	4925      	ldr	r1, [pc, #148]	; (8002d64 <HAL_RCC_OscConfig+0xc44>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	604b      	str	r3, [r1, #4]
 8002cd4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002cd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	fa93 f2a3 	rbit	r2, r3
 8002ce8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002cec:	601a      	str	r2, [r3, #0]
  return result;
 8002cee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002cf2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf4:	fab3 f383 	clz	r3, r3
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cfe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	461a      	mov	r2, r3
 8002d06:	2301      	movs	r3, #1
 8002d08:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0a:	f7fe fe5f 	bl	80019cc <HAL_GetTick>
 8002d0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d12:	e009      	b.n	8002d28 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d14:	f7fe fe5a 	bl	80019cc <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e0fc      	b.n	8002f22 <HAL_RCC_OscConfig+0xe02>
 8002d28:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	fa93 f2a3 	rbit	r2, r3
 8002d3c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d40:	601a      	str	r2, [r3, #0]
  return result;
 8002d42:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d46:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d48:	fab3 f383 	clz	r3, r3
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	095b      	lsrs	r3, r3, #5
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	f043 0301 	orr.w	r3, r3, #1
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d105      	bne.n	8002d68 <HAL_RCC_OscConfig+0xc48>
 8002d5c:	4b01      	ldr	r3, [pc, #4]	; (8002d64 <HAL_RCC_OscConfig+0xc44>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	e01e      	b.n	8002da0 <HAL_RCC_OscConfig+0xc80>
 8002d62:	bf00      	nop
 8002d64:	40021000 	.word	0x40021000
 8002d68:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	fa93 f2a3 	rbit	r2, r3
 8002d7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	fa93 f2a3 	rbit	r2, r3
 8002d96:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	4b63      	ldr	r3, [pc, #396]	; (8002f2c <HAL_RCC_OscConfig+0xe0c>)
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002da4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002da8:	6011      	str	r1, [r2, #0]
 8002daa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	fa92 f1a2 	rbit	r1, r2
 8002db4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002db8:	6011      	str	r1, [r2, #0]
  return result;
 8002dba:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002dbe:	6812      	ldr	r2, [r2, #0]
 8002dc0:	fab2 f282 	clz	r2, r2
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	f042 0220 	orr.w	r2, r2, #32
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	f002 021f 	and.w	r2, r2, #31
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d09b      	beq.n	8002d14 <HAL_RCC_OscConfig+0xbf4>
 8002ddc:	e0a0      	b.n	8002f20 <HAL_RCC_OscConfig+0xe00>
 8002dde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002de2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002de6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	fa93 f2a3 	rbit	r2, r3
 8002df2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002df6:	601a      	str	r2, [r3, #0]
  return result;
 8002df8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dfc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dfe:	fab3 f383 	clz	r3, r3
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e08:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2300      	movs	r3, #0
 8002e12:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e14:	f7fe fdda 	bl	80019cc <HAL_GetTick>
 8002e18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e1c:	e009      	b.n	8002e32 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e1e:	f7fe fdd5 	bl	80019cc <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e077      	b.n	8002f22 <HAL_RCC_OscConfig+0xe02>
 8002e32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	fa93 f2a3 	rbit	r2, r3
 8002e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e4a:	601a      	str	r2, [r3, #0]
  return result;
 8002e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e50:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e52:	fab3 f383 	clz	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	095b      	lsrs	r3, r3, #5
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d102      	bne.n	8002e6c <HAL_RCC_OscConfig+0xd4c>
 8002e66:	4b31      	ldr	r3, [pc, #196]	; (8002f2c <HAL_RCC_OscConfig+0xe0c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	e01b      	b.n	8002ea4 <HAL_RCC_OscConfig+0xd84>
 8002e6c:	f107 0320 	add.w	r3, r7, #32
 8002e70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e76:	f107 0320 	add.w	r3, r7, #32
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	fa93 f2a3 	rbit	r2, r3
 8002e80:	f107 031c 	add.w	r3, r7, #28
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	f107 0318 	add.w	r3, r7, #24
 8002e8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	f107 0318 	add.w	r3, r7, #24
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	fa93 f2a3 	rbit	r2, r3
 8002e9a:	f107 0314 	add.w	r3, r7, #20
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	4b22      	ldr	r3, [pc, #136]	; (8002f2c <HAL_RCC_OscConfig+0xe0c>)
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	f107 0210 	add.w	r2, r7, #16
 8002ea8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002eac:	6011      	str	r1, [r2, #0]
 8002eae:	f107 0210 	add.w	r2, r7, #16
 8002eb2:	6812      	ldr	r2, [r2, #0]
 8002eb4:	fa92 f1a2 	rbit	r1, r2
 8002eb8:	f107 020c 	add.w	r2, r7, #12
 8002ebc:	6011      	str	r1, [r2, #0]
  return result;
 8002ebe:	f107 020c 	add.w	r2, r7, #12
 8002ec2:	6812      	ldr	r2, [r2, #0]
 8002ec4:	fab2 f282 	clz	r2, r2
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	f042 0220 	orr.w	r2, r2, #32
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	f002 021f 	and.w	r2, r2, #31
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eda:	4013      	ands	r3, r2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d19e      	bne.n	8002e1e <HAL_RCC_OscConfig+0xcfe>
 8002ee0:	e01e      	b.n	8002f20 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ee2:	1d3b      	adds	r3, r7, #4
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e018      	b.n	8002f22 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ef0:	4b0e      	ldr	r3, [pc, #56]	; (8002f2c <HAL_RCC_OscConfig+0xe0c>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ef8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002efc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f00:	1d3b      	adds	r3, r7, #4
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d108      	bne.n	8002f1c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002f0a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002f0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f12:	1d3b      	adds	r3, r7, #4
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d001      	beq.n	8002f20 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e000      	b.n	8002f22 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40021000 	.word	0x40021000

08002f30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b09e      	sub	sp, #120	; 0x78
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e162      	b.n	800320e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f48:	4b90      	ldr	r3, [pc, #576]	; (800318c <HAL_RCC_ClockConfig+0x25c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d910      	bls.n	8002f78 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f56:	4b8d      	ldr	r3, [pc, #564]	; (800318c <HAL_RCC_ClockConfig+0x25c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f023 0207 	bic.w	r2, r3, #7
 8002f5e:	498b      	ldr	r1, [pc, #556]	; (800318c <HAL_RCC_ClockConfig+0x25c>)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f66:	4b89      	ldr	r3, [pc, #548]	; (800318c <HAL_RCC_ClockConfig+0x25c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e14a      	b.n	800320e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d008      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f84:	4b82      	ldr	r3, [pc, #520]	; (8003190 <HAL_RCC_ClockConfig+0x260>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	497f      	ldr	r1, [pc, #508]	; (8003190 <HAL_RCC_ClockConfig+0x260>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 80dc 	beq.w	800315c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d13c      	bne.n	8003026 <HAL_RCC_ClockConfig+0xf6>
 8002fac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fb0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fb4:	fa93 f3a3 	rbit	r3, r3
 8002fb8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fbc:	fab3 f383 	clz	r3, r3
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	095b      	lsrs	r3, r3, #5
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d102      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xa6>
 8002fd0:	4b6f      	ldr	r3, [pc, #444]	; (8003190 <HAL_RCC_ClockConfig+0x260>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	e00f      	b.n	8002ff6 <HAL_RCC_ClockConfig+0xc6>
 8002fd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fda:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fde:	fa93 f3a3 	rbit	r3, r3
 8002fe2:	667b      	str	r3, [r7, #100]	; 0x64
 8002fe4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fe8:	663b      	str	r3, [r7, #96]	; 0x60
 8002fea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fec:	fa93 f3a3 	rbit	r3, r3
 8002ff0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ff2:	4b67      	ldr	r3, [pc, #412]	; (8003190 <HAL_RCC_ClockConfig+0x260>)
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ffa:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ffc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ffe:	fa92 f2a2 	rbit	r2, r2
 8003002:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003004:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003006:	fab2 f282 	clz	r2, r2
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	f042 0220 	orr.w	r2, r2, #32
 8003010:	b2d2      	uxtb	r2, r2
 8003012:	f002 021f 	and.w	r2, r2, #31
 8003016:	2101      	movs	r1, #1
 8003018:	fa01 f202 	lsl.w	r2, r1, r2
 800301c:	4013      	ands	r3, r2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d17b      	bne.n	800311a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e0f3      	b.n	800320e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b02      	cmp	r3, #2
 800302c:	d13c      	bne.n	80030a8 <HAL_RCC_ClockConfig+0x178>
 800302e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003032:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003036:	fa93 f3a3 	rbit	r3, r3
 800303a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800303c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800303e:	fab3 f383 	clz	r3, r3
 8003042:	b2db      	uxtb	r3, r3
 8003044:	095b      	lsrs	r3, r3, #5
 8003046:	b2db      	uxtb	r3, r3
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b01      	cmp	r3, #1
 8003050:	d102      	bne.n	8003058 <HAL_RCC_ClockConfig+0x128>
 8003052:	4b4f      	ldr	r3, [pc, #316]	; (8003190 <HAL_RCC_ClockConfig+0x260>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	e00f      	b.n	8003078 <HAL_RCC_ClockConfig+0x148>
 8003058:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800305c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003060:	fa93 f3a3 	rbit	r3, r3
 8003064:	647b      	str	r3, [r7, #68]	; 0x44
 8003066:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800306a:	643b      	str	r3, [r7, #64]	; 0x40
 800306c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800306e:	fa93 f3a3 	rbit	r3, r3
 8003072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003074:	4b46      	ldr	r3, [pc, #280]	; (8003190 <HAL_RCC_ClockConfig+0x260>)
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800307c:	63ba      	str	r2, [r7, #56]	; 0x38
 800307e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003080:	fa92 f2a2 	rbit	r2, r2
 8003084:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003086:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003088:	fab2 f282 	clz	r2, r2
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	f042 0220 	orr.w	r2, r2, #32
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	f002 021f 	and.w	r2, r2, #31
 8003098:	2101      	movs	r1, #1
 800309a:	fa01 f202 	lsl.w	r2, r1, r2
 800309e:	4013      	ands	r3, r2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d13a      	bne.n	800311a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0b2      	b.n	800320e <HAL_RCC_ClockConfig+0x2de>
 80030a8:	2302      	movs	r3, #2
 80030aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ae:	fa93 f3a3 	rbit	r3, r3
 80030b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80030b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b6:	fab3 f383 	clz	r3, r3
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	095b      	lsrs	r3, r3, #5
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d102      	bne.n	80030d0 <HAL_RCC_ClockConfig+0x1a0>
 80030ca:	4b31      	ldr	r3, [pc, #196]	; (8003190 <HAL_RCC_ClockConfig+0x260>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	e00d      	b.n	80030ec <HAL_RCC_ClockConfig+0x1bc>
 80030d0:	2302      	movs	r3, #2
 80030d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d6:	fa93 f3a3 	rbit	r3, r3
 80030da:	627b      	str	r3, [r7, #36]	; 0x24
 80030dc:	2302      	movs	r3, #2
 80030de:	623b      	str	r3, [r7, #32]
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	fa93 f3a3 	rbit	r3, r3
 80030e6:	61fb      	str	r3, [r7, #28]
 80030e8:	4b29      	ldr	r3, [pc, #164]	; (8003190 <HAL_RCC_ClockConfig+0x260>)
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	2202      	movs	r2, #2
 80030ee:	61ba      	str	r2, [r7, #24]
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	fa92 f2a2 	rbit	r2, r2
 80030f6:	617a      	str	r2, [r7, #20]
  return result;
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	fab2 f282 	clz	r2, r2
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	f042 0220 	orr.w	r2, r2, #32
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	f002 021f 	and.w	r2, r2, #31
 800310a:	2101      	movs	r1, #1
 800310c:	fa01 f202 	lsl.w	r2, r1, r2
 8003110:	4013      	ands	r3, r2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e079      	b.n	800320e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800311a:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <HAL_RCC_ClockConfig+0x260>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f023 0203 	bic.w	r2, r3, #3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	491a      	ldr	r1, [pc, #104]	; (8003190 <HAL_RCC_ClockConfig+0x260>)
 8003128:	4313      	orrs	r3, r2
 800312a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800312c:	f7fe fc4e 	bl	80019cc <HAL_GetTick>
 8003130:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003132:	e00a      	b.n	800314a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003134:	f7fe fc4a 	bl	80019cc <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003142:	4293      	cmp	r3, r2
 8003144:	d901      	bls.n	800314a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e061      	b.n	800320e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314a:	4b11      	ldr	r3, [pc, #68]	; (8003190 <HAL_RCC_ClockConfig+0x260>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f003 020c 	and.w	r2, r3, #12
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	429a      	cmp	r2, r3
 800315a:	d1eb      	bne.n	8003134 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800315c:	4b0b      	ldr	r3, [pc, #44]	; (800318c <HAL_RCC_ClockConfig+0x25c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d214      	bcs.n	8003194 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316a:	4b08      	ldr	r3, [pc, #32]	; (800318c <HAL_RCC_ClockConfig+0x25c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f023 0207 	bic.w	r2, r3, #7
 8003172:	4906      	ldr	r1, [pc, #24]	; (800318c <HAL_RCC_ClockConfig+0x25c>)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	4313      	orrs	r3, r2
 8003178:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800317a:	4b04      	ldr	r3, [pc, #16]	; (800318c <HAL_RCC_ClockConfig+0x25c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d005      	beq.n	8003194 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e040      	b.n	800320e <HAL_RCC_ClockConfig+0x2de>
 800318c:	40022000 	.word	0x40022000
 8003190:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031a0:	4b1d      	ldr	r3, [pc, #116]	; (8003218 <HAL_RCC_ClockConfig+0x2e8>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	491a      	ldr	r1, [pc, #104]	; (8003218 <HAL_RCC_ClockConfig+0x2e8>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d009      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031be:	4b16      	ldr	r3, [pc, #88]	; (8003218 <HAL_RCC_ClockConfig+0x2e8>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	4912      	ldr	r1, [pc, #72]	; (8003218 <HAL_RCC_ClockConfig+0x2e8>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80031d2:	f000 f829 	bl	8003228 <HAL_RCC_GetSysClockFreq>
 80031d6:	4601      	mov	r1, r0
 80031d8:	4b0f      	ldr	r3, [pc, #60]	; (8003218 <HAL_RCC_ClockConfig+0x2e8>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031e0:	22f0      	movs	r2, #240	; 0xf0
 80031e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	fa92 f2a2 	rbit	r2, r2
 80031ea:	60fa      	str	r2, [r7, #12]
  return result;
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	fab2 f282 	clz	r2, r2
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	40d3      	lsrs	r3, r2
 80031f6:	4a09      	ldr	r2, [pc, #36]	; (800321c <HAL_RCC_ClockConfig+0x2ec>)
 80031f8:	5cd3      	ldrb	r3, [r2, r3]
 80031fa:	fa21 f303 	lsr.w	r3, r1, r3
 80031fe:	4a08      	ldr	r2, [pc, #32]	; (8003220 <HAL_RCC_ClockConfig+0x2f0>)
 8003200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003202:	4b08      	ldr	r3, [pc, #32]	; (8003224 <HAL_RCC_ClockConfig+0x2f4>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f7fe fb9c 	bl	8001944 <HAL_InitTick>
  
  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3778      	adds	r7, #120	; 0x78
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40021000 	.word	0x40021000
 800321c:	08004b64 	.word	0x08004b64
 8003220:	20000200 	.word	0x20000200
 8003224:	20000404 	.word	0x20000404

08003228 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003228:	b480      	push	{r7}
 800322a:	b08b      	sub	sp, #44	; 0x2c
 800322c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	61fb      	str	r3, [r7, #28]
 8003232:	2300      	movs	r3, #0
 8003234:	61bb      	str	r3, [r7, #24]
 8003236:	2300      	movs	r3, #0
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
 800323a:	2300      	movs	r3, #0
 800323c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003242:	4b29      	ldr	r3, [pc, #164]	; (80032e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f003 030c 	and.w	r3, r3, #12
 800324e:	2b04      	cmp	r3, #4
 8003250:	d002      	beq.n	8003258 <HAL_RCC_GetSysClockFreq+0x30>
 8003252:	2b08      	cmp	r3, #8
 8003254:	d003      	beq.n	800325e <HAL_RCC_GetSysClockFreq+0x36>
 8003256:	e03c      	b.n	80032d2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003258:	4b24      	ldr	r3, [pc, #144]	; (80032ec <HAL_RCC_GetSysClockFreq+0xc4>)
 800325a:	623b      	str	r3, [r7, #32]
      break;
 800325c:	e03c      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003264:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003268:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	fa92 f2a2 	rbit	r2, r2
 8003270:	607a      	str	r2, [r7, #4]
  return result;
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	fab2 f282 	clz	r2, r2
 8003278:	b2d2      	uxtb	r2, r2
 800327a:	40d3      	lsrs	r3, r2
 800327c:	4a1c      	ldr	r2, [pc, #112]	; (80032f0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800327e:	5cd3      	ldrb	r3, [r2, r3]
 8003280:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003282:	4b19      	ldr	r3, [pc, #100]	; (80032e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	220f      	movs	r2, #15
 800328c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	fa92 f2a2 	rbit	r2, r2
 8003294:	60fa      	str	r2, [r7, #12]
  return result;
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	fab2 f282 	clz	r2, r2
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	40d3      	lsrs	r3, r2
 80032a0:	4a14      	ldr	r2, [pc, #80]	; (80032f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80032a2:	5cd3      	ldrb	r3, [r2, r3]
 80032a4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80032b0:	4a0e      	ldr	r2, [pc, #56]	; (80032ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	fb02 f303 	mul.w	r3, r2, r3
 80032be:	627b      	str	r3, [r7, #36]	; 0x24
 80032c0:	e004      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	4a0c      	ldr	r2, [pc, #48]	; (80032f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80032c6:	fb02 f303 	mul.w	r3, r2, r3
 80032ca:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	623b      	str	r3, [r7, #32]
      break;
 80032d0:	e002      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032d2:	4b06      	ldr	r3, [pc, #24]	; (80032ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80032d4:	623b      	str	r3, [r7, #32]
      break;
 80032d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032d8:	6a3b      	ldr	r3, [r7, #32]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	372c      	adds	r7, #44	; 0x2c
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	40021000 	.word	0x40021000
 80032ec:	007a1200 	.word	0x007a1200
 80032f0:	08004b7c 	.word	0x08004b7c
 80032f4:	08004b8c 	.word	0x08004b8c
 80032f8:	003d0900 	.word	0x003d0900

080032fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003300:	4b03      	ldr	r3, [pc, #12]	; (8003310 <HAL_RCC_GetHCLKFreq+0x14>)
 8003302:	681b      	ldr	r3, [r3, #0]
}
 8003304:	4618      	mov	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	20000200 	.word	0x20000200

08003314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800331a:	f7ff ffef 	bl	80032fc <HAL_RCC_GetHCLKFreq>
 800331e:	4601      	mov	r1, r0
 8003320:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003328:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800332c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	fa92 f2a2 	rbit	r2, r2
 8003334:	603a      	str	r2, [r7, #0]
  return result;
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	fab2 f282 	clz	r2, r2
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	40d3      	lsrs	r3, r2
 8003340:	4a04      	ldr	r2, [pc, #16]	; (8003354 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003342:	5cd3      	ldrb	r3, [r2, r3]
 8003344:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40021000 	.word	0x40021000
 8003354:	08004b74 	.word	0x08004b74

08003358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800335e:	f7ff ffcd 	bl	80032fc <HAL_RCC_GetHCLKFreq>
 8003362:	4601      	mov	r1, r0
 8003364:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800336c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003370:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	fa92 f2a2 	rbit	r2, r2
 8003378:	603a      	str	r2, [r7, #0]
  return result;
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	fab2 f282 	clz	r2, r2
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	40d3      	lsrs	r3, r2
 8003384:	4a04      	ldr	r2, [pc, #16]	; (8003398 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003386:	5cd3      	ldrb	r3, [r2, r3]
 8003388:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800338c:	4618      	mov	r0, r3
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40021000 	.word	0x40021000
 8003398:	08004b74 	.word	0x08004b74

0800339c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b092      	sub	sp, #72	; 0x48
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 80d7 	beq.w	8003568 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80033ba:	2300      	movs	r3, #0
 80033bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033c0:	4b4e      	ldr	r3, [pc, #312]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10e      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033cc:	4b4b      	ldr	r3, [pc, #300]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	4a4a      	ldr	r2, [pc, #296]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d6:	61d3      	str	r3, [r2, #28]
 80033d8:	4b48      	ldr	r3, [pc, #288]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e0:	60bb      	str	r3, [r7, #8]
 80033e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e4:	2301      	movs	r3, #1
 80033e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ea:	4b45      	ldr	r3, [pc, #276]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d118      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033f6:	4b42      	ldr	r3, [pc, #264]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a41      	ldr	r2, [pc, #260]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003400:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003402:	f7fe fae3 	bl	80019cc <HAL_GetTick>
 8003406:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003408:	e008      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800340a:	f7fe fadf 	bl	80019cc <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b64      	cmp	r3, #100	; 0x64
 8003416:	d901      	bls.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e14b      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341c:	4b38      	ldr	r3, [pc, #224]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f0      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003428:	4b34      	ldr	r3, [pc, #208]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003430:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 8084 	beq.w	8003542 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003442:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003444:	429a      	cmp	r2, r3
 8003446:	d07c      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003448:	4b2c      	ldr	r3, [pc, #176]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003450:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003452:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003456:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345a:	fa93 f3a3 	rbit	r3, r3
 800345e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003462:	fab3 f383 	clz	r3, r3
 8003466:	b2db      	uxtb	r3, r3
 8003468:	461a      	mov	r2, r3
 800346a:	4b26      	ldr	r3, [pc, #152]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	461a      	mov	r2, r3
 8003472:	2301      	movs	r3, #1
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800347a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347e:	fa93 f3a3 	rbit	r3, r3
 8003482:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003486:	fab3 f383 	clz	r3, r3
 800348a:	b2db      	uxtb	r3, r3
 800348c:	461a      	mov	r2, r3
 800348e:	4b1d      	ldr	r3, [pc, #116]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003490:	4413      	add	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	461a      	mov	r2, r3
 8003496:	2300      	movs	r3, #0
 8003498:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800349a:	4a18      	ldr	r2, [pc, #96]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800349c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800349e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d04b      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034aa:	f7fe fa8f 	bl	80019cc <HAL_GetTick>
 80034ae:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b0:	e00a      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b2:	f7fe fa8b 	bl	80019cc <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e0f5      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80034c8:	2302      	movs	r3, #2
 80034ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ce:	fa93 f3a3 	rbit	r3, r3
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24
 80034d4:	2302      	movs	r3, #2
 80034d6:	623b      	str	r3, [r7, #32]
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	fa93 f3a3 	rbit	r3, r3
 80034de:	61fb      	str	r3, [r7, #28]
  return result;
 80034e0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e2:	fab3 f383 	clz	r3, r3
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	095b      	lsrs	r3, r3, #5
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	f043 0302 	orr.w	r3, r3, #2
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d108      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80034f6:	4b01      	ldr	r3, [pc, #4]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	e00d      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80034fc:	40021000 	.word	0x40021000
 8003500:	40007000 	.word	0x40007000
 8003504:	10908100 	.word	0x10908100
 8003508:	2302      	movs	r3, #2
 800350a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	fa93 f3a3 	rbit	r3, r3
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	4b69      	ldr	r3, [pc, #420]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	2202      	movs	r2, #2
 800351a:	613a      	str	r2, [r7, #16]
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	fa92 f2a2 	rbit	r2, r2
 8003522:	60fa      	str	r2, [r7, #12]
  return result;
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	fab2 f282 	clz	r2, r2
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	f002 021f 	and.w	r2, r2, #31
 8003536:	2101      	movs	r1, #1
 8003538:	fa01 f202 	lsl.w	r2, r1, r2
 800353c:	4013      	ands	r3, r2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0b7      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003542:	4b5e      	ldr	r3, [pc, #376]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	495b      	ldr	r1, [pc, #364]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003550:	4313      	orrs	r3, r2
 8003552:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003554:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003558:	2b01      	cmp	r3, #1
 800355a:	d105      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800355c:	4b57      	ldr	r3, [pc, #348]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	4a56      	ldr	r2, [pc, #344]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003566:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d008      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003574:	4b51      	ldr	r3, [pc, #324]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	f023 0203 	bic.w	r2, r3, #3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	494e      	ldr	r1, [pc, #312]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003582:	4313      	orrs	r3, r2
 8003584:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b00      	cmp	r3, #0
 8003590:	d008      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003592:	4b4a      	ldr	r3, [pc, #296]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	f023 0210 	bic.w	r2, r3, #16
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	4947      	ldr	r1, [pc, #284]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d008      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80035b0:	4b42      	ldr	r3, [pc, #264]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035bc:	493f      	ldr	r1, [pc, #252]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d008      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035ce:	4b3b      	ldr	r3, [pc, #236]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	f023 0220 	bic.w	r2, r3, #32
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	4938      	ldr	r1, [pc, #224]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d008      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035ec:	4b33      	ldr	r3, [pc, #204]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	4930      	ldr	r1, [pc, #192]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003606:	2b00      	cmp	r3, #0
 8003608:	d008      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800360a:	4b2c      	ldr	r3, [pc, #176]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	4929      	ldr	r1, [pc, #164]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003618:	4313      	orrs	r3, r2
 800361a:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003624:	2b00      	cmp	r3, #0
 8003626:	d008      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003628:	4b24      	ldr	r3, [pc, #144]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	4921      	ldr	r1, [pc, #132]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003636:	4313      	orrs	r3, r2
 8003638:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d008      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003646:	4b1d      	ldr	r3, [pc, #116]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	491a      	ldr	r1, [pc, #104]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003654:	4313      	orrs	r3, r2
 8003656:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d008      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003664:	4b15      	ldr	r3, [pc, #84]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	4912      	ldr	r1, [pc, #72]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003672:	4313      	orrs	r3, r2
 8003674:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d008      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003682:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368e:	490b      	ldr	r1, [pc, #44]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003690:	4313      	orrs	r3, r2
 8003692:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d008      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80036a0:	4b06      	ldr	r3, [pc, #24]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	4903      	ldr	r1, [pc, #12]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3748      	adds	r7, #72	; 0x48
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40021000 	.word	0x40021000

080036c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e01d      	b.n	800370e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d106      	bne.n	80036ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7fd fec6 	bl	8001478 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3304      	adds	r3, #4
 80036fc:	4619      	mov	r1, r3
 80036fe:	4610      	mov	r0, r2
 8003700:	f000 fa3e 	bl	8003b80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0201 	orr.w	r2, r2, #1
 800372e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	4b0c      	ldr	r3, [pc, #48]	; (8003768 <HAL_TIM_Base_Start_IT+0x50>)
 8003738:	4013      	ands	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2b06      	cmp	r3, #6
 8003740:	d00b      	beq.n	800375a <HAL_TIM_Base_Start_IT+0x42>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003748:	d007      	beq.n	800375a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f042 0201 	orr.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	00010007 	.word	0x00010007

0800376c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b02      	cmp	r3, #2
 8003780:	d122      	bne.n	80037c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b02      	cmp	r3, #2
 800378e:	d11b      	bne.n	80037c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0202 	mvn.w	r2, #2
 8003798:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f9c8 	bl	8003b44 <HAL_TIM_IC_CaptureCallback>
 80037b4:	e005      	b.n	80037c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f9ba 	bl	8003b30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f9cb 	bl	8003b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d122      	bne.n	800381c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d11b      	bne.n	800381c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f06f 0204 	mvn.w	r2, #4
 80037ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2202      	movs	r2, #2
 80037f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f99e 	bl	8003b44 <HAL_TIM_IC_CaptureCallback>
 8003808:	e005      	b.n	8003816 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f990 	bl	8003b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f9a1 	bl	8003b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b08      	cmp	r3, #8
 8003828:	d122      	bne.n	8003870 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f003 0308 	and.w	r3, r3, #8
 8003834:	2b08      	cmp	r3, #8
 8003836:	d11b      	bne.n	8003870 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f06f 0208 	mvn.w	r2, #8
 8003840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2204      	movs	r2, #4
 8003846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f974 	bl	8003b44 <HAL_TIM_IC_CaptureCallback>
 800385c:	e005      	b.n	800386a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f966 	bl	8003b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f977 	bl	8003b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	f003 0310 	and.w	r3, r3, #16
 800387a:	2b10      	cmp	r3, #16
 800387c:	d122      	bne.n	80038c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	2b10      	cmp	r3, #16
 800388a:	d11b      	bne.n	80038c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f06f 0210 	mvn.w	r2, #16
 8003894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2208      	movs	r2, #8
 800389a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f94a 	bl	8003b44 <HAL_TIM_IC_CaptureCallback>
 80038b0:	e005      	b.n	80038be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f93c 	bl	8003b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f94d 	bl	8003b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d10e      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d107      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f06f 0201 	mvn.w	r2, #1
 80038e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f916 	bl	8003b1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fa:	2b80      	cmp	r3, #128	; 0x80
 80038fc:	d10e      	bne.n	800391c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003908:	2b80      	cmp	r3, #128	; 0x80
 800390a:	d107      	bne.n	800391c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 faaa 	bl	8003e70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800392a:	d10e      	bne.n	800394a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003936:	2b80      	cmp	r3, #128	; 0x80
 8003938:	d107      	bne.n	800394a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 fa9d 	bl	8003e84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003954:	2b40      	cmp	r3, #64	; 0x40
 8003956:	d10e      	bne.n	8003976 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003962:	2b40      	cmp	r3, #64	; 0x40
 8003964:	d107      	bne.n	8003976 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800396e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f8fb 	bl	8003b6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	2b20      	cmp	r3, #32
 8003982:	d10e      	bne.n	80039a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b20      	cmp	r3, #32
 8003990:	d107      	bne.n	80039a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f06f 0220 	mvn.w	r2, #32
 800399a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 fa5d 	bl	8003e5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039a2:	bf00      	nop
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b084      	sub	sp, #16
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d101      	bne.n	80039c2 <HAL_TIM_ConfigClockSource+0x18>
 80039be:	2302      	movs	r3, #2
 80039c0:	e0a8      	b.n	8003b14 <HAL_TIM_ConfigClockSource+0x16a>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2202      	movs	r2, #2
 80039ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039e4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039ec:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2b40      	cmp	r3, #64	; 0x40
 80039fc:	d067      	beq.n	8003ace <HAL_TIM_ConfigClockSource+0x124>
 80039fe:	2b40      	cmp	r3, #64	; 0x40
 8003a00:	d80b      	bhi.n	8003a1a <HAL_TIM_ConfigClockSource+0x70>
 8003a02:	2b10      	cmp	r3, #16
 8003a04:	d073      	beq.n	8003aee <HAL_TIM_ConfigClockSource+0x144>
 8003a06:	2b10      	cmp	r3, #16
 8003a08:	d802      	bhi.n	8003a10 <HAL_TIM_ConfigClockSource+0x66>
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d06f      	beq.n	8003aee <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003a0e:	e078      	b.n	8003b02 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003a10:	2b20      	cmp	r3, #32
 8003a12:	d06c      	beq.n	8003aee <HAL_TIM_ConfigClockSource+0x144>
 8003a14:	2b30      	cmp	r3, #48	; 0x30
 8003a16:	d06a      	beq.n	8003aee <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003a18:	e073      	b.n	8003b02 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003a1a:	2b70      	cmp	r3, #112	; 0x70
 8003a1c:	d00d      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x90>
 8003a1e:	2b70      	cmp	r3, #112	; 0x70
 8003a20:	d804      	bhi.n	8003a2c <HAL_TIM_ConfigClockSource+0x82>
 8003a22:	2b50      	cmp	r3, #80	; 0x50
 8003a24:	d033      	beq.n	8003a8e <HAL_TIM_ConfigClockSource+0xe4>
 8003a26:	2b60      	cmp	r3, #96	; 0x60
 8003a28:	d041      	beq.n	8003aae <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003a2a:	e06a      	b.n	8003b02 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a30:	d066      	beq.n	8003b00 <HAL_TIM_ConfigClockSource+0x156>
 8003a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a36:	d017      	beq.n	8003a68 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003a38:	e063      	b.n	8003b02 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6818      	ldr	r0, [r3, #0]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	6899      	ldr	r1, [r3, #8]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f000 f981 	bl	8003d50 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a5c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	609a      	str	r2, [r3, #8]
      break;
 8003a66:	e04c      	b.n	8003b02 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6818      	ldr	r0, [r3, #0]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	6899      	ldr	r1, [r3, #8]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f000 f96a 	bl	8003d50 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a8a:	609a      	str	r2, [r3, #8]
      break;
 8003a8c:	e039      	b.n	8003b02 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6818      	ldr	r0, [r3, #0]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	6859      	ldr	r1, [r3, #4]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	f000 f8de 	bl	8003c5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2150      	movs	r1, #80	; 0x50
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 f937 	bl	8003d1a <TIM_ITRx_SetConfig>
      break;
 8003aac:	e029      	b.n	8003b02 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	6859      	ldr	r1, [r3, #4]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	461a      	mov	r2, r3
 8003abc:	f000 f8fd 	bl	8003cba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2160      	movs	r1, #96	; 0x60
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 f927 	bl	8003d1a <TIM_ITRx_SetConfig>
      break;
 8003acc:	e019      	b.n	8003b02 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	6859      	ldr	r1, [r3, #4]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	461a      	mov	r2, r3
 8003adc:	f000 f8be 	bl	8003c5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2140      	movs	r1, #64	; 0x40
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 f917 	bl	8003d1a <TIM_ITRx_SetConfig>
      break;
 8003aec:	e009      	b.n	8003b02 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4619      	mov	r1, r3
 8003af8:	4610      	mov	r0, r2
 8003afa:	f000 f90e 	bl	8003d1a <TIM_ITRx_SetConfig>
      break;
 8003afe:	e000      	b.n	8003b02 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003b00:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a2e      	ldr	r2, [pc, #184]	; (8003c4c <TIM_Base_SetConfig+0xcc>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d003      	beq.n	8003ba0 <TIM_Base_SetConfig+0x20>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b9e:	d108      	bne.n	8003bb2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ba6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a25      	ldr	r2, [pc, #148]	; (8003c4c <TIM_Base_SetConfig+0xcc>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d00f      	beq.n	8003bda <TIM_Base_SetConfig+0x5a>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc0:	d00b      	beq.n	8003bda <TIM_Base_SetConfig+0x5a>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a22      	ldr	r2, [pc, #136]	; (8003c50 <TIM_Base_SetConfig+0xd0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d007      	beq.n	8003bda <TIM_Base_SetConfig+0x5a>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a21      	ldr	r2, [pc, #132]	; (8003c54 <TIM_Base_SetConfig+0xd4>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d003      	beq.n	8003bda <TIM_Base_SetConfig+0x5a>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a20      	ldr	r2, [pc, #128]	; (8003c58 <TIM_Base_SetConfig+0xd8>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d108      	bne.n	8003bec <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a0e      	ldr	r2, [pc, #56]	; (8003c4c <TIM_Base_SetConfig+0xcc>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d00b      	beq.n	8003c30 <TIM_Base_SetConfig+0xb0>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a0d      	ldr	r2, [pc, #52]	; (8003c50 <TIM_Base_SetConfig+0xd0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d007      	beq.n	8003c30 <TIM_Base_SetConfig+0xb0>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a0c      	ldr	r2, [pc, #48]	; (8003c54 <TIM_Base_SetConfig+0xd4>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d003      	beq.n	8003c30 <TIM_Base_SetConfig+0xb0>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a0b      	ldr	r2, [pc, #44]	; (8003c58 <TIM_Base_SetConfig+0xd8>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d103      	bne.n	8003c38 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	691a      	ldr	r2, [r3, #16]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	615a      	str	r2, [r3, #20]
}
 8003c3e:	bf00      	nop
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	40012c00 	.word	0x40012c00
 8003c50:	40014000 	.word	0x40014000
 8003c54:	40014400 	.word	0x40014400
 8003c58:	40014800 	.word	0x40014800

08003c5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	f023 0201 	bic.w	r2, r3, #1
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f023 030a 	bic.w	r3, r3, #10
 8003c98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	621a      	str	r2, [r3, #32]
}
 8003cae:	bf00      	nop
 8003cb0:	371c      	adds	r7, #28
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b087      	sub	sp, #28
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	f023 0210 	bic.w	r2, r3, #16
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ce4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	031b      	lsls	r3, r3, #12
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cf6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	621a      	str	r2, [r3, #32]
}
 8003d0e:	bf00      	nop
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b085      	sub	sp, #20
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f043 0307 	orr.w	r3, r3, #7
 8003d3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	609a      	str	r2, [r3, #8]
}
 8003d44:	bf00      	nop
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b087      	sub	sp, #28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
 8003d5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	021a      	lsls	r2, r3, #8
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	609a      	str	r2, [r3, #8]
}
 8003d84:	bf00      	nop
 8003d86:	371c      	adds	r7, #28
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e04f      	b.n	8003e48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a21      	ldr	r2, [pc, #132]	; (8003e54 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d108      	bne.n	8003de4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003dd8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a14      	ldr	r2, [pc, #80]	; (8003e54 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d009      	beq.n	8003e1c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e10:	d004      	beq.n	8003e1c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a10      	ldr	r2, [pc, #64]	; (8003e58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d10c      	bne.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	40012c00 	.word	0x40012c00
 8003e58:	40014000 	.word	0x40014000

08003e5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e040      	b.n	8003f2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d106      	bne.n	8003ec0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7fd fb00 	bl	80014c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2224      	movs	r2, #36	; 0x24
 8003ec4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0201 	bic.w	r2, r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fa28 	bl	800432c <UART_SetConfig>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e022      	b.n	8003f2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fb9e 	bl	8004630 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fc25 	bl	8004774 <UART_CheckIdleState>
 8003f2a:	4603      	mov	r3, r0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	f040 808a 	bne.w	8004060 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_UART_Receive_IT+0x24>
 8003f52:	88fb      	ldrh	r3, [r7, #6]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e082      	b.n	8004062 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d101      	bne.n	8003f6a <HAL_UART_Receive_IT+0x36>
 8003f66:	2302      	movs	r3, #2
 8003f68:	e07b      	b.n	8004062 <HAL_UART_Receive_IT+0x12e>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	88fa      	ldrh	r2, [r7, #6]
 8003f7c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	88fa      	ldrh	r2, [r7, #6]
 8003f84:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f96:	d10e      	bne.n	8003fb6 <HAL_UART_Receive_IT+0x82>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d105      	bne.n	8003fac <HAL_UART_Receive_IT+0x78>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003fa6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003faa:	e02d      	b.n	8004008 <HAL_UART_Receive_IT+0xd4>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	22ff      	movs	r2, #255	; 0xff
 8003fb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fb4:	e028      	b.n	8004008 <HAL_UART_Receive_IT+0xd4>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10d      	bne.n	8003fda <HAL_UART_Receive_IT+0xa6>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d104      	bne.n	8003fd0 <HAL_UART_Receive_IT+0x9c>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	22ff      	movs	r2, #255	; 0xff
 8003fca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fce:	e01b      	b.n	8004008 <HAL_UART_Receive_IT+0xd4>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	227f      	movs	r2, #127	; 0x7f
 8003fd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fd8:	e016      	b.n	8004008 <HAL_UART_Receive_IT+0xd4>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fe2:	d10d      	bne.n	8004000 <HAL_UART_Receive_IT+0xcc>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d104      	bne.n	8003ff6 <HAL_UART_Receive_IT+0xc2>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	227f      	movs	r2, #127	; 0x7f
 8003ff0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ff4:	e008      	b.n	8004008 <HAL_UART_Receive_IT+0xd4>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	223f      	movs	r2, #63	; 0x3f
 8003ffa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ffe:	e003      	b.n	8004008 <HAL_UART_Receive_IT+0xd4>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2222      	movs	r2, #34	; 0x22
 8004012:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0201 	orr.w	r2, r2, #1
 8004022:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800402c:	d107      	bne.n	800403e <HAL_UART_Receive_IT+0x10a>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d103      	bne.n	800403e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	4a0d      	ldr	r2, [pc, #52]	; (8004070 <HAL_UART_Receive_IT+0x13c>)
 800403a:	661a      	str	r2, [r3, #96]	; 0x60
 800403c:	e002      	b.n	8004044 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4a0c      	ldr	r2, [pc, #48]	; (8004074 <HAL_UART_Receive_IT+0x140>)
 8004042:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800405a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800405c:	2300      	movs	r3, #0
 800405e:	e000      	b.n	8004062 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004060:	2302      	movs	r3, #2
  }
}
 8004062:	4618      	mov	r0, r3
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	08004a39 	.word	0x08004a39
 8004074:	08004993 	.word	0x08004993

08004078 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b088      	sub	sp, #32
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004098:	69fa      	ldr	r2, [r7, #28]
 800409a:	f640 030f 	movw	r3, #2063	; 0x80f
 800409e:	4013      	ands	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d113      	bne.n	80040d0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	f003 0320 	and.w	r3, r3, #32
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00e      	beq.n	80040d0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	f003 0320 	and.w	r3, r3, #32
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d009      	beq.n	80040d0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 8114 	beq.w	80042ee <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	4798      	blx	r3
      }
      return;
 80040ce:	e10e      	b.n	80042ee <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 80d6 	beq.w	8004284 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d105      	bne.n	80040ee <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 80cb 	beq.w	8004284 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00e      	beq.n	8004116 <HAL_UART_IRQHandler+0x9e>
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d009      	beq.n	8004116 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2201      	movs	r2, #1
 8004108:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800410e:	f043 0201 	orr.w	r2, r3, #1
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00e      	beq.n	800413e <HAL_UART_IRQHandler+0xc6>
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d009      	beq.n	800413e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2202      	movs	r2, #2
 8004130:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004136:	f043 0204 	orr.w	r2, r3, #4
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00e      	beq.n	8004166 <HAL_UART_IRQHandler+0xee>
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d009      	beq.n	8004166 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2204      	movs	r2, #4
 8004158:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800415e:	f043 0202 	orr.w	r2, r3, #2
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	f003 0308 	and.w	r3, r3, #8
 800416c:	2b00      	cmp	r3, #0
 800416e:	d013      	beq.n	8004198 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	f003 0320 	and.w	r3, r3, #32
 8004176:	2b00      	cmp	r3, #0
 8004178:	d104      	bne.n	8004184 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004180:	2b00      	cmp	r3, #0
 8004182:	d009      	beq.n	8004198 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2208      	movs	r2, #8
 800418a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004190:	f043 0208 	orr.w	r2, r3, #8
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00f      	beq.n	80041c2 <HAL_UART_IRQHandler+0x14a>
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00a      	beq.n	80041c2 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041ba:	f043 0220 	orr.w	r2, r3, #32
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f000 8093 	beq.w	80042f2 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f003 0320 	and.w	r3, r3, #32
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00c      	beq.n	80041f0 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	f003 0320 	and.w	r3, r3, #32
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d007      	beq.n	80041f0 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d003      	beq.n	80041f0 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041f4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004200:	2b40      	cmp	r3, #64	; 0x40
 8004202:	d004      	beq.n	800420e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800420a:	2b00      	cmp	r3, #0
 800420c:	d031      	beq.n	8004272 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fb70 	bl	80048f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421e:	2b40      	cmp	r3, #64	; 0x40
 8004220:	d123      	bne.n	800426a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004230:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004236:	2b00      	cmp	r3, #0
 8004238:	d013      	beq.n	8004262 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800423e:	4a30      	ldr	r2, [pc, #192]	; (8004300 <HAL_UART_IRQHandler+0x288>)
 8004240:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004246:	4618      	mov	r0, r3
 8004248:	f7fd fda2 	bl	8001d90 <HAL_DMA_Abort_IT>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d016      	beq.n	8004280 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800425c:	4610      	mov	r0, r2
 800425e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004260:	e00e      	b.n	8004280 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f858 	bl	8004318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004268:	e00a      	b.n	8004280 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f854 	bl	8004318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004270:	e006      	b.n	8004280 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f850 	bl	8004318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800427e:	e038      	b.n	80042f2 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004280:	bf00      	nop
    return;
 8004282:	e036      	b.n	80042f2 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00d      	beq.n	80042aa <HAL_UART_IRQHandler+0x232>
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d008      	beq.n	80042aa <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80042a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 fc1b 	bl	8004ade <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80042a8:	e026      	b.n	80042f8 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00d      	beq.n	80042d0 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d008      	beq.n	80042d0 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d017      	beq.n	80042f6 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	4798      	blx	r3
    }
    return;
 80042ce:	e012      	b.n	80042f6 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00e      	beq.n	80042f8 <HAL_UART_IRQHandler+0x280>
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d009      	beq.n	80042f8 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 fb3b 	bl	8004960 <UART_EndTransmit_IT>
    return;
 80042ea:	bf00      	nop
 80042ec:	e004      	b.n	80042f8 <HAL_UART_IRQHandler+0x280>
      return;
 80042ee:	bf00      	nop
 80042f0:	e002      	b.n	80042f8 <HAL_UART_IRQHandler+0x280>
    return;
 80042f2:	bf00      	nop
 80042f4:	e000      	b.n	80042f8 <HAL_UART_IRQHandler+0x280>
    return;
 80042f6:	bf00      	nop
  }

}
 80042f8:	3720      	adds	r7, #32
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	08004935 	.word	0x08004935

08004304 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b088      	sub	sp, #32
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004334:	2300      	movs	r3, #0
 8004336:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004338:	2300      	movs	r3, #0
 800433a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	4313      	orrs	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	4ba2      	ldr	r3, [pc, #648]	; (80045e4 <UART_SetConfig+0x2b8>)
 800435c:	4013      	ands	r3, r2
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6812      	ldr	r2, [r2, #0]
 8004362:	6939      	ldr	r1, [r7, #16]
 8004364:	430b      	orrs	r3, r1
 8004366:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	4313      	orrs	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	430a      	orrs	r2, r1
 80043a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a90      	ldr	r2, [pc, #576]	; (80045e8 <UART_SetConfig+0x2bc>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d121      	bne.n	80043f0 <UART_SetConfig+0xc4>
 80043ac:	4b8f      	ldr	r3, [pc, #572]	; (80045ec <UART_SetConfig+0x2c0>)
 80043ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b0:	f003 0303 	and.w	r3, r3, #3
 80043b4:	2b03      	cmp	r3, #3
 80043b6:	d817      	bhi.n	80043e8 <UART_SetConfig+0xbc>
 80043b8:	a201      	add	r2, pc, #4	; (adr r2, 80043c0 <UART_SetConfig+0x94>)
 80043ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043be:	bf00      	nop
 80043c0:	080043d1 	.word	0x080043d1
 80043c4:	080043dd 	.word	0x080043dd
 80043c8:	080043e3 	.word	0x080043e3
 80043cc:	080043d7 	.word	0x080043d7
 80043d0:	2300      	movs	r3, #0
 80043d2:	77fb      	strb	r3, [r7, #31]
 80043d4:	e01e      	b.n	8004414 <UART_SetConfig+0xe8>
 80043d6:	2302      	movs	r3, #2
 80043d8:	77fb      	strb	r3, [r7, #31]
 80043da:	e01b      	b.n	8004414 <UART_SetConfig+0xe8>
 80043dc:	2304      	movs	r3, #4
 80043de:	77fb      	strb	r3, [r7, #31]
 80043e0:	e018      	b.n	8004414 <UART_SetConfig+0xe8>
 80043e2:	2308      	movs	r3, #8
 80043e4:	77fb      	strb	r3, [r7, #31]
 80043e6:	e015      	b.n	8004414 <UART_SetConfig+0xe8>
 80043e8:	2310      	movs	r3, #16
 80043ea:	77fb      	strb	r3, [r7, #31]
 80043ec:	bf00      	nop
 80043ee:	e011      	b.n	8004414 <UART_SetConfig+0xe8>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a7e      	ldr	r2, [pc, #504]	; (80045f0 <UART_SetConfig+0x2c4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d102      	bne.n	8004400 <UART_SetConfig+0xd4>
 80043fa:	2300      	movs	r3, #0
 80043fc:	77fb      	strb	r3, [r7, #31]
 80043fe:	e009      	b.n	8004414 <UART_SetConfig+0xe8>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a7b      	ldr	r2, [pc, #492]	; (80045f4 <UART_SetConfig+0x2c8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d102      	bne.n	8004410 <UART_SetConfig+0xe4>
 800440a:	2300      	movs	r3, #0
 800440c:	77fb      	strb	r3, [r7, #31]
 800440e:	e001      	b.n	8004414 <UART_SetConfig+0xe8>
 8004410:	2310      	movs	r3, #16
 8004412:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800441c:	f040 8082 	bne.w	8004524 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8004420:	7ffb      	ldrb	r3, [r7, #31]
 8004422:	2b08      	cmp	r3, #8
 8004424:	d85e      	bhi.n	80044e4 <UART_SetConfig+0x1b8>
 8004426:	a201      	add	r2, pc, #4	; (adr r2, 800442c <UART_SetConfig+0x100>)
 8004428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442c:	08004451 	.word	0x08004451
 8004430:	08004471 	.word	0x08004471
 8004434:	08004491 	.word	0x08004491
 8004438:	080044e5 	.word	0x080044e5
 800443c:	080044ad 	.word	0x080044ad
 8004440:	080044e5 	.word	0x080044e5
 8004444:	080044e5 	.word	0x080044e5
 8004448:	080044e5 	.word	0x080044e5
 800444c:	080044cd 	.word	0x080044cd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004450:	f7fe ff60 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 8004454:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	005a      	lsls	r2, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	085b      	lsrs	r3, r3, #1
 8004460:	441a      	add	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	fbb2 f3f3 	udiv	r3, r2, r3
 800446a:	b29b      	uxth	r3, r3
 800446c:	61bb      	str	r3, [r7, #24]
        break;
 800446e:	e03c      	b.n	80044ea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004470:	f7fe ff72 	bl	8003358 <HAL_RCC_GetPCLK2Freq>
 8004474:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	005a      	lsls	r2, r3, #1
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	085b      	lsrs	r3, r3, #1
 8004480:	441a      	add	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	fbb2 f3f3 	udiv	r3, r2, r3
 800448a:	b29b      	uxth	r3, r3
 800448c:	61bb      	str	r3, [r7, #24]
        break;
 800448e:	e02c      	b.n	80044ea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	085b      	lsrs	r3, r3, #1
 8004496:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800449a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	6852      	ldr	r2, [r2, #4]
 80044a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	61bb      	str	r3, [r7, #24]
        break;
 80044aa:	e01e      	b.n	80044ea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ac:	f7fe febc 	bl	8003228 <HAL_RCC_GetSysClockFreq>
 80044b0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	005a      	lsls	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	085b      	lsrs	r3, r3, #1
 80044bc:	441a      	add	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	61bb      	str	r3, [r7, #24]
        break;
 80044ca:	e00e      	b.n	80044ea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	085b      	lsrs	r3, r3, #1
 80044d2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	fbb2 f3f3 	udiv	r3, r2, r3
 80044de:	b29b      	uxth	r3, r3
 80044e0:	61bb      	str	r3, [r7, #24]
        break;
 80044e2:	e002      	b.n	80044ea <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	75fb      	strb	r3, [r7, #23]
        break;
 80044e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	2b0f      	cmp	r3, #15
 80044ee:	d916      	bls.n	800451e <UART_SetConfig+0x1f2>
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f6:	d212      	bcs.n	800451e <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	f023 030f 	bic.w	r3, r3, #15
 8004500:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	085b      	lsrs	r3, r3, #1
 8004506:	b29b      	uxth	r3, r3
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	b29a      	uxth	r2, r3
 800450e:	897b      	ldrh	r3, [r7, #10]
 8004510:	4313      	orrs	r3, r2
 8004512:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	897a      	ldrh	r2, [r7, #10]
 800451a:	60da      	str	r2, [r3, #12]
 800451c:	e07d      	b.n	800461a <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	75fb      	strb	r3, [r7, #23]
 8004522:	e07a      	b.n	800461a <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 8004524:	7ffb      	ldrb	r3, [r7, #31]
 8004526:	2b08      	cmp	r3, #8
 8004528:	d866      	bhi.n	80045f8 <UART_SetConfig+0x2cc>
 800452a:	a201      	add	r2, pc, #4	; (adr r2, 8004530 <UART_SetConfig+0x204>)
 800452c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004530:	08004555 	.word	0x08004555
 8004534:	08004573 	.word	0x08004573
 8004538:	08004591 	.word	0x08004591
 800453c:	080045f9 	.word	0x080045f9
 8004540:	080045ad 	.word	0x080045ad
 8004544:	080045f9 	.word	0x080045f9
 8004548:	080045f9 	.word	0x080045f9
 800454c:	080045f9 	.word	0x080045f9
 8004550:	080045cb 	.word	0x080045cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004554:	f7fe fede 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 8004558:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	085a      	lsrs	r2, r3, #1
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	441a      	add	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	fbb2 f3f3 	udiv	r3, r2, r3
 800456c:	b29b      	uxth	r3, r3
 800456e:	61bb      	str	r3, [r7, #24]
        break;
 8004570:	e045      	b.n	80045fe <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004572:	f7fe fef1 	bl	8003358 <HAL_RCC_GetPCLK2Freq>
 8004576:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	085a      	lsrs	r2, r3, #1
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	441a      	add	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	fbb2 f3f3 	udiv	r3, r2, r3
 800458a:	b29b      	uxth	r3, r3
 800458c:	61bb      	str	r3, [r7, #24]
        break;
 800458e:	e036      	b.n	80045fe <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	085b      	lsrs	r3, r3, #1
 8004596:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800459a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6852      	ldr	r2, [r2, #4]
 80045a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	61bb      	str	r3, [r7, #24]
        break;
 80045aa:	e028      	b.n	80045fe <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ac:	f7fe fe3c 	bl	8003228 <HAL_RCC_GetSysClockFreq>
 80045b0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	085a      	lsrs	r2, r3, #1
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	441a      	add	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	61bb      	str	r3, [r7, #24]
        break;
 80045c8:	e019      	b.n	80045fe <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	085b      	lsrs	r3, r3, #1
 80045d0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045dc:	b29b      	uxth	r3, r3
 80045de:	61bb      	str	r3, [r7, #24]
        break;
 80045e0:	e00d      	b.n	80045fe <UART_SetConfig+0x2d2>
 80045e2:	bf00      	nop
 80045e4:	efff69f3 	.word	0xefff69f3
 80045e8:	40013800 	.word	0x40013800
 80045ec:	40021000 	.word	0x40021000
 80045f0:	40004400 	.word	0x40004400
 80045f4:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	75fb      	strb	r3, [r7, #23]
        break;
 80045fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	2b0f      	cmp	r3, #15
 8004602:	d908      	bls.n	8004616 <UART_SetConfig+0x2ea>
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800460a:	d204      	bcs.n	8004616 <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	60da      	str	r2, [r3, #12]
 8004614:	e001      	b.n	800461a <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004626:	7dfb      	ldrb	r3, [r7, #23]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3720      	adds	r7, #32
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00a      	beq.n	800465a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00a      	beq.n	800469e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	f003 0310 	and.w	r3, r3, #16
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00a      	beq.n	80046e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	f003 0320 	and.w	r3, r3, #32
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470c:	2b00      	cmp	r3, #0
 800470e:	d01a      	beq.n	8004746 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800472e:	d10a      	bne.n	8004746 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	605a      	str	r2, [r3, #4]
  }
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af02      	add	r7, sp, #8
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004782:	f7fd f923 	bl	80019cc <HAL_GetTick>
 8004786:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0308 	and.w	r3, r3, #8
 8004792:	2b08      	cmp	r3, #8
 8004794:	d10e      	bne.n	80047b4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004796:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f82a 	bl	80047fe <UART_WaitOnFlagUntilTimeout>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e020      	b.n	80047f6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0304 	and.w	r3, r3, #4
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d10e      	bne.n	80047e0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 f814 	bl	80047fe <UART_WaitOnFlagUntilTimeout>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e00a      	b.n	80047f6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2220      	movs	r2, #32
 80047e4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2220      	movs	r2, #32
 80047ea:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b084      	sub	sp, #16
 8004802:	af00      	add	r7, sp, #0
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	603b      	str	r3, [r7, #0]
 800480a:	4613      	mov	r3, r2
 800480c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800480e:	e05d      	b.n	80048cc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004816:	d059      	beq.n	80048cc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004818:	f7fd f8d8 	bl	80019cc <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	429a      	cmp	r2, r3
 8004826:	d302      	bcc.n	800482e <UART_WaitOnFlagUntilTimeout+0x30>
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d11b      	bne.n	8004866 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800483c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0201 	bic.w	r2, r2, #1
 800484c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2220      	movs	r2, #32
 8004852:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2220      	movs	r2, #32
 8004858:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e042      	b.n	80048ec <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d02b      	beq.n	80048cc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800487e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004882:	d123      	bne.n	80048cc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800488c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800489c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0201 	bic.w	r2, r2, #1
 80048ac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2220      	movs	r2, #32
 80048b2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2220      	movs	r2, #32
 80048b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2220      	movs	r2, #32
 80048be:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e00f      	b.n	80048ec <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	69da      	ldr	r2, [r3, #28]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	4013      	ands	r3, r2
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	429a      	cmp	r2, r3
 80048da:	bf0c      	ite	eq
 80048dc:	2301      	moveq	r3, #1
 80048de:	2300      	movne	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	461a      	mov	r2, r3
 80048e4:	79fb      	ldrb	r3, [r7, #7]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d092      	beq.n	8004810 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800490a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689a      	ldr	r2, [r3, #8]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0201 	bic.w	r2, r2, #1
 800491a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2220      	movs	r2, #32
 8004920:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004940:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f7ff fce0 	bl	8004318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004958:	bf00      	nop
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004976:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2220      	movs	r2, #32
 800497c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7ff fcbd 	bl	8004304 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800498a:	bf00      	nop
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b084      	sub	sp, #16
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80049a0:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049a6:	2b22      	cmp	r3, #34	; 0x22
 80049a8:	d13a      	bne.n	8004a20 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80049b0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80049b2:	89bb      	ldrh	r3, [r7, #12]
 80049b4:	b2d9      	uxtb	r1, r3
 80049b6:	89fb      	ldrh	r3, [r7, #14]
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049be:	400a      	ands	r2, r1
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	3b01      	subs	r3, #1
 80049d8:	b29a      	uxth	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d121      	bne.n	8004a30 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80049fa:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689a      	ldr	r2, [r3, #8]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 0201 	bic.w	r2, r2, #1
 8004a0a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7fc fa11 	bl	8000e40 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a1e:	e007      	b.n	8004a30 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	699a      	ldr	r2, [r3, #24]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0208 	orr.w	r2, r2, #8
 8004a2e:	619a      	str	r2, [r3, #24]
}
 8004a30:	bf00      	nop
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a46:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a4c:	2b22      	cmp	r3, #34	; 0x22
 8004a4e:	d13a      	bne.n	8004ac6 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a56:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004a5e:	89ba      	ldrh	r2, [r7, #12]
 8004a60:	89fb      	ldrh	r3, [r7, #14]
 8004a62:	4013      	ands	r3, r2
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6e:	1c9a      	adds	r2, r3, #2
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d121      	bne.n	8004ad6 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004aa0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0201 	bic.w	r2, r2, #1
 8004ab0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7fc f9be 	bl	8000e40 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ac4:	e007      	b.n	8004ad6 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	699a      	ldr	r2, [r3, #24]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f042 0208 	orr.w	r2, r2, #8
 8004ad4:	619a      	str	r2, [r3, #24]
}
 8004ad6:	bf00      	nop
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
	...

08004af4 <__libc_init_array>:
 8004af4:	b570      	push	{r4, r5, r6, lr}
 8004af6:	4e0d      	ldr	r6, [pc, #52]	; (8004b2c <__libc_init_array+0x38>)
 8004af8:	4c0d      	ldr	r4, [pc, #52]	; (8004b30 <__libc_init_array+0x3c>)
 8004afa:	1ba4      	subs	r4, r4, r6
 8004afc:	10a4      	asrs	r4, r4, #2
 8004afe:	2500      	movs	r5, #0
 8004b00:	42a5      	cmp	r5, r4
 8004b02:	d109      	bne.n	8004b18 <__libc_init_array+0x24>
 8004b04:	4e0b      	ldr	r6, [pc, #44]	; (8004b34 <__libc_init_array+0x40>)
 8004b06:	4c0c      	ldr	r4, [pc, #48]	; (8004b38 <__libc_init_array+0x44>)
 8004b08:	f000 f820 	bl	8004b4c <_init>
 8004b0c:	1ba4      	subs	r4, r4, r6
 8004b0e:	10a4      	asrs	r4, r4, #2
 8004b10:	2500      	movs	r5, #0
 8004b12:	42a5      	cmp	r5, r4
 8004b14:	d105      	bne.n	8004b22 <__libc_init_array+0x2e>
 8004b16:	bd70      	pop	{r4, r5, r6, pc}
 8004b18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b1c:	4798      	blx	r3
 8004b1e:	3501      	adds	r5, #1
 8004b20:	e7ee      	b.n	8004b00 <__libc_init_array+0xc>
 8004b22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b26:	4798      	blx	r3
 8004b28:	3501      	adds	r5, #1
 8004b2a:	e7f2      	b.n	8004b12 <__libc_init_array+0x1e>
 8004b2c:	08004b9c 	.word	0x08004b9c
 8004b30:	08004b9c 	.word	0x08004b9c
 8004b34:	08004b9c 	.word	0x08004b9c
 8004b38:	08004ba0 	.word	0x08004ba0

08004b3c <memset>:
 8004b3c:	4402      	add	r2, r0
 8004b3e:	4603      	mov	r3, r0
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d100      	bne.n	8004b46 <memset+0xa>
 8004b44:	4770      	bx	lr
 8004b46:	f803 1b01 	strb.w	r1, [r3], #1
 8004b4a:	e7f9      	b.n	8004b40 <memset+0x4>

08004b4c <_init>:
 8004b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4e:	bf00      	nop
 8004b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b52:	bc08      	pop	{r3}
 8004b54:	469e      	mov	lr, r3
 8004b56:	4770      	bx	lr

08004b58 <_fini>:
 8004b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5a:	bf00      	nop
 8004b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b5e:	bc08      	pop	{r3}
 8004b60:	469e      	mov	lr, r3
 8004b62:	4770      	bx	lr
