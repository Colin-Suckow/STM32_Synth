
PolyMidiSynth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049bc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004b44  08004b44  00014b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b7c  08004b7c  00020408  2**0
                  CONTENTS
  4 .ARM          00000000  08004b7c  08004b7c  00020408  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b7c  08004b7c  00020408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b7c  08004b7c  00014b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b80  08004b80  00014b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000408  20000000  08004b84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000408  08004f8c  00020408  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000698  08004f8c  00020698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020408  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb28  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025bb  00000000  00000000  0002ff60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e50  00000000  00000000  00032520  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d18  00000000  00000000  00033370  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018b82  00000000  00000000  00034088  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b234  00000000  00000000  0004cc0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008db5e  00000000  00000000  00057e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e599c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cec  00000000  00000000  000e5a18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000408 	.word	0x20000408
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004b2c 	.word	0x08004b2c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000040c 	.word	0x2000040c
 80001c4:	08004b2c 	.word	0x08004b2c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2f>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a7c:	bf24      	itt	cs
 8000a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a86:	d90d      	bls.n	8000aa4 <__aeabi_d2f+0x30>
 8000a88:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a9c:	bf08      	it	eq
 8000a9e:	f020 0001 	biceq.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa8:	d121      	bne.n	8000aee <__aeabi_d2f+0x7a>
 8000aaa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aae:	bfbc      	itt	lt
 8000ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	4770      	bxlt	lr
 8000ab6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000abe:	f1c2 0218 	rsb	r2, r2, #24
 8000ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aca:	fa20 f002 	lsr.w	r0, r0, r2
 8000ace:	bf18      	it	ne
 8000ad0:	f040 0001 	orrne.w	r0, r0, #1
 8000ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae0:	ea40 000c 	orr.w	r0, r0, ip
 8000ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aec:	e7cc      	b.n	8000a88 <__aeabi_d2f+0x14>
 8000aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af2:	d107      	bne.n	8000b04 <__aeabi_d2f+0x90>
 8000af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af8:	bf1e      	ittt	ne
 8000afa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000afe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b02:	4770      	bxne	lr
 8000b04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b1a:	f000 feed 	bl	80018f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b1e:	f000 f841 	bl	8000ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b22:	f000 f93d 	bl	8000da0 <MX_GPIO_Init>
  MX_DAC_Init();
 8000b26:	f000 f893 	bl	8000c50 <MX_DAC_Init>
  MX_TIM2_Init();
 8000b2a:	f000 f8bb 	bl	8000ca4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000b2e:	f000 f907 	bl	8000d40 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //HAL_DAC_MspInit(&hdac);
  //HAL_TIM_Base_MspInit(&htim2);

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000b32:	2100      	movs	r1, #0
 8000b34:	4814      	ldr	r0, [pc, #80]	; (8000b88 <main+0x74>)
 8000b36:	f001 f897 	bl	8001c68 <HAL_DAC_Start>


  //Initialize voices

  for(int i = 0; i < VOICE_TOTAL; i++) {
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	e00c      	b.n	8000b5a <main+0x46>
	  voices[i].state = 0;
 8000b40:	4912      	ldr	r1, [pc, #72]	; (8000b8c <main+0x78>)
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	4613      	mov	r3, r2
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	4413      	add	r3, r2
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	440b      	add	r3, r1
 8000b4e:	3308      	adds	r3, #8
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < VOICE_TOTAL; i++) {
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3301      	adds	r3, #1
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	ddef      	ble.n	8000b40 <main+0x2c>
  }

  HAL_TIM_Base_Start_IT(&htim2);
 8000b60:	480b      	ldr	r0, [pc, #44]	; (8000b90 <main+0x7c>)
 8000b62:	f002 fdc9 	bl	80036f8 <HAL_TIM_Base_Start_IT>

  midi_init();
 8000b66:	f000 fb09 	bl	800117c <midi_init>

  midi_register_event_handler(EVT_CHAN_NOTE_ON, &note_on);
 8000b6a:	490a      	ldr	r1, [pc, #40]	; (8000b94 <main+0x80>)
 8000b6c:	2009      	movs	r0, #9
 8000b6e:	f000 fb21 	bl	80011b4 <midi_register_event_handler>
  midi_register_event_handler(EVT_CHAN_NOTE_OFF, &note_off);
 8000b72:	4909      	ldr	r1, [pc, #36]	; (8000b98 <main+0x84>)
 8000b74:	2008      	movs	r0, #8
 8000b76:	f000 fb1d 	bl	80011b4 <midi_register_event_handler>

  //HAL_UART_Receive(&huart2, Rx_data, 1);
  HAL_UART_Receive_IT(&huart1, Rx_data, sizeof(Rx_data));
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	4907      	ldr	r1, [pc, #28]	; (8000b9c <main+0x88>)
 8000b7e:	4808      	ldr	r0, [pc, #32]	; (8000ba0 <main+0x8c>)
 8000b80:	f003 f9c8 	bl	8003f14 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000b84:	e7fe      	b.n	8000b84 <main+0x70>
 8000b86:	bf00      	nop
 8000b88:	200004fc 	.word	0x200004fc
 8000b8c:	20000510 	.word	0x20000510
 8000b90:	20000654 	.word	0x20000654
 8000b94:	08001271 	.word	0x08001271
 8000b98:	08001319 	.word	0x08001319
 8000b9c:	20000478 	.word	0x20000478
 8000ba0:	2000047c 	.word	0x2000047c

08000ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b09c      	sub	sp, #112	; 0x70
 8000ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000baa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bae:	2228      	movs	r2, #40	; 0x28
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f003 ffb2 	bl	8004b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc8:	463b      	mov	r3, r7
 8000bca:	2234      	movs	r2, #52	; 0x34
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f003 ffa4 	bl	8004b1c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bdc:	2310      	movs	r3, #16
 8000bde:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be0:	2302      	movs	r3, #2
 8000be2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000be4:	2300      	movs	r3, #0
 8000be6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000be8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000bec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 fa84 	bl	8002100 <HAL_RCC_OscConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000bfe:	f000 f931 	bl	8000e64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c02:	230f      	movs	r3, #15
 8000c04:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c06:	2302      	movs	r3, #2
 8000c08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c14:	2300      	movs	r3, #0
 8000c16:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f002 f976 	bl	8002f10 <HAL_RCC_ClockConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000c2a:	f000 f91b 	bl	8000e64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c36:	463b      	mov	r3, r7
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f002 fb9f 	bl	800337c <HAL_RCCEx_PeriphCLKConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000c44:	f000 f90e 	bl	8000e64 <Error_Handler>
  }
}
 8000c48:	bf00      	nop
 8000c4a:	3770      	adds	r7, #112	; 0x70
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <MX_DAC_Init+0x4c>)
 8000c62:	4a0f      	ldr	r2, [pc, #60]	; (8000ca0 <MX_DAC_Init+0x50>)
 8000c64:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000c66:	480d      	ldr	r0, [pc, #52]	; (8000c9c <MX_DAC_Init+0x4c>)
 8000c68:	f000 ffbd 	bl	8001be6 <HAL_DAC_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_DAC_Init+0x26>
  {
    Error_Handler();
 8000c72:	f000 f8f7 	bl	8000e64 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	2200      	movs	r2, #0
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	; (8000c9c <MX_DAC_Init+0x4c>)
 8000c86:	f001 f826 	bl	8001cd6 <HAL_DAC_ConfigChannel>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 8000c90:	f000 f8e8 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	200004fc 	.word	0x200004fc
 8000ca0:	40007400 	.word	0x40007400

08000ca4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000caa:	f107 0310 	add.w	r3, r7, #16
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cc2:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <MX_TIM2_Init+0x98>)
 8000cc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cc8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cca:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <MX_TIM2_Init+0x98>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <MX_TIM2_Init+0x98>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1600;
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <MX_TIM2_Init+0x98>)
 8000cd8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000cdc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cde:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <MX_TIM2_Init+0x98>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce4:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <MX_TIM2_Init+0x98>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cea:	4814      	ldr	r0, [pc, #80]	; (8000d3c <MX_TIM2_Init+0x98>)
 8000cec:	f002 fcd8 	bl	80036a0 <HAL_TIM_Base_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000cf6:	f000 f8b5 	bl	8000e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d00:	f107 0310 	add.w	r3, r7, #16
 8000d04:	4619      	mov	r1, r3
 8000d06:	480d      	ldr	r0, [pc, #52]	; (8000d3c <MX_TIM2_Init+0x98>)
 8000d08:	f002 fe3f 	bl	800398a <HAL_TIM_ConfigClockSource>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d12:	f000 f8a7 	bl	8000e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d16:	2300      	movs	r3, #0
 8000d18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	4619      	mov	r1, r3
 8000d22:	4806      	ldr	r0, [pc, #24]	; (8000d3c <MX_TIM2_Init+0x98>)
 8000d24:	f003 f824 	bl	8003d70 <HAL_TIMEx_MasterConfigSynchronization>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d2e:	f000 f899 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	3720      	adds	r7, #32
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000654 	.word	0x20000654

08000d40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d44:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <MX_USART1_UART_Init+0x58>)
 8000d46:	4a15      	ldr	r2, [pc, #84]	; (8000d9c <MX_USART1_UART_Init+0x5c>)
 8000d48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000d4a:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <MX_USART1_UART_Init+0x58>)
 8000d4c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000d50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <MX_USART1_UART_Init+0x58>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <MX_USART1_UART_Init+0x58>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <MX_USART1_UART_Init+0x58>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <MX_USART1_UART_Init+0x58>)
 8000d66:	220c      	movs	r2, #12
 8000d68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <MX_USART1_UART_Init+0x58>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <MX_USART1_UART_Init+0x58>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <MX_USART1_UART_Init+0x58>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <MX_USART1_UART_Init+0x58>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d82:	4805      	ldr	r0, [pc, #20]	; (8000d98 <MX_USART1_UART_Init+0x58>)
 8000d84:	f003 f878 	bl	8003e78 <HAL_UART_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d8e:	f000 f869 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	2000047c 	.word	0x2000047c
 8000d9c:	40013800 	.word	0x40013800

08000da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da6:	f107 030c 	add.w	r3, r7, #12
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
 8000db4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	4b1e      	ldr	r3, [pc, #120]	; (8000e30 <MX_GPIO_Init+0x90>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	4a1d      	ldr	r2, [pc, #116]	; (8000e30 <MX_GPIO_Init+0x90>)
 8000dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc0:	6153      	str	r3, [r2, #20]
 8000dc2:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <MX_GPIO_Init+0x90>)
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dce:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <MX_GPIO_Init+0x90>)
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	4a17      	ldr	r2, [pc, #92]	; (8000e30 <MX_GPIO_Init+0x90>)
 8000dd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dd8:	6153      	str	r3, [r2, #20]
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <MX_GPIO_Init+0x90>)
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de6:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <MX_GPIO_Init+0x90>)
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	4a11      	ldr	r2, [pc, #68]	; (8000e30 <MX_GPIO_Init+0x90>)
 8000dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df0:	6153      	str	r3, [r2, #20]
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <MX_GPIO_Init+0x90>)
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e04:	480b      	ldr	r0, [pc, #44]	; (8000e34 <MX_GPIO_Init+0x94>)
 8000e06:	f001 f963 	bl	80020d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	4619      	mov	r1, r3
 8000e22:	4804      	ldr	r0, [pc, #16]	; (8000e34 <MX_GPIO_Init+0x94>)
 8000e24:	f000 ffe2 	bl	8001dec <HAL_GPIO_Init>

}
 8000e28:	bf00      	nop
 8000e2a:	3720      	adds	r7, #32
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40021000 	.word	0x40021000
 8000e34:	48000400 	.word	0x48000400

08000e38 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	//__disable_irq();
	midi_receive_byte(Rx_data[0]);
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_UART_RxCpltCallback+0x24>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 f9d5 	bl	80011f4 <midi_receive_byte>
	//__enable_irq();
	//HAL_UART_Transmit(&huart2, Rx_data, sizeof(Rx_data), 100);
	HAL_UART_Receive_IT(&huart1, Rx_data, sizeof(Rx_data));
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	4903      	ldr	r1, [pc, #12]	; (8000e5c <HAL_UART_RxCpltCallback+0x24>)
 8000e4e:	4804      	ldr	r0, [pc, #16]	; (8000e60 <HAL_UART_RxCpltCallback+0x28>)
 8000e50:	f003 f860 	bl	8003f14 <HAL_UART_Receive_IT>
}
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000478 	.word	0x20000478
 8000e60:	2000047c 	.word	0x2000047c

08000e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <null_event_cb>:
// Callback table.
static midi_event_callback_t g_callbacks[EVT_MAX] = {0};


// The null event callback is used by default for all events.
static void null_event_cb(char channel, char a, char b) {
 8000e72:	b480      	push	{r7}
 8000e74:	b083      	sub	sp, #12
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	71fb      	strb	r3, [r7, #7]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	71bb      	strb	r3, [r7, #6]
 8000e80:	4613      	mov	r3, r2
 8000e82:	717b      	strb	r3, [r7, #5]
  // Do nothing. The invoke_callback() function will properly implement the
  // global message counter.
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <invoke_callback>:


// Wrapper that invokes callback functions.
static inline void invoke_callback(int evt) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
    // Reject invalid events.
    if ((evt < 0) || (evt >= EVT_MAX)) {
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	db19      	blt.n	8000ed2 <invoke_callback+0x42>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b0e      	cmp	r3, #14
 8000ea2:	dc16      	bgt.n	8000ed2 <invoke_callback+0x42>
        return;
    }

    // Increment the global event counter.
    ++g_message_counter;
 8000ea4:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <invoke_callback+0x4c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	4a0c      	ldr	r2, [pc, #48]	; (8000edc <invoke_callback+0x4c>)
 8000eac:	6013      	str	r3, [r2, #0]

    // Invoke the callback.
    (g_callbacks[evt])(g_current_channel, g_data_byte_one, g_data_byte_two);
 8000eae:	4a0c      	ldr	r2, [pc, #48]	; (8000ee0 <invoke_callback+0x50>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <invoke_callback+0x54>)
 8000eb8:	7810      	ldrb	r0, [r2, #0]
 8000eba:	4a0b      	ldr	r2, [pc, #44]	; (8000ee8 <invoke_callback+0x58>)
 8000ebc:	7811      	ldrb	r1, [r2, #0]
 8000ebe:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <invoke_callback+0x5c>)
 8000ec0:	7812      	ldrb	r2, [r2, #0]
 8000ec2:	4798      	blx	r3

    // Clear data state
    g_data_byte_one = 0;
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <invoke_callback+0x58>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
    g_data_byte_two = 0;
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <invoke_callback+0x5c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
 8000ed0:	e000      	b.n	8000ed4 <invoke_callback+0x44>
        return;
 8000ed2:	bf00      	nop
}
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2000042c 	.word	0x2000042c
 8000ee0:	20000430 	.word	0x20000430
 8000ee4:	20000427 	.word	0x20000427
 8000ee8:	20000428 	.word	0x20000428
 8000eec:	20000429 	.word	0x20000429

08000ef0 <rx_status_sys_realtime_byte>:
 * For this reason, the rx_status_sys_realtime_byte() handler does NOT update
 * much state; messages of this type should conceptually just be handled
 * and then processing of the MIDI byte stream should continue as though the
 * real-time byte was never received.
 */
static status_t rx_status_sys_realtime_byte(char byte) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
    switch (byte) {
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	3bf8      	subs	r3, #248	; 0xf8
 8000efe:	2b07      	cmp	r3, #7
 8000f00:	d832      	bhi.n	8000f68 <rx_status_sys_realtime_byte+0x78>
 8000f02:	a201      	add	r2, pc, #4	; (adr r2, 8000f08 <rx_status_sys_realtime_byte+0x18>)
 8000f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f08:	08000f29 	.word	0x08000f29
 8000f0c:	08000f31 	.word	0x08000f31
 8000f10:	08000f39 	.word	0x08000f39
 8000f14:	08000f41 	.word	0x08000f41
 8000f18:	08000f49 	.word	0x08000f49
 8000f1c:	08000f51 	.word	0x08000f51
 8000f20:	08000f59 	.word	0x08000f59
 8000f24:	08000f61 	.word	0x08000f61
        case SYS_REALTIME_TIMING_CLOCK:
            invoke_callback(EVT_SYS_REALTIME_TIMING_CLOCK);
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f7ff ffb1 	bl	8000e90 <invoke_callback>
            break;
 8000f2e:	e01b      	b.n	8000f68 <rx_status_sys_realtime_byte+0x78>

        case SYS_REALTIME_RESERVED_F9:
            invoke_callback(EVT_SYS_REALTIME_RESERVED_F9);
 8000f30:	2001      	movs	r0, #1
 8000f32:	f7ff ffad 	bl	8000e90 <invoke_callback>
            break;
 8000f36:	e017      	b.n	8000f68 <rx_status_sys_realtime_byte+0x78>

        case SYS_REALTIME_SEQ_START:
            invoke_callback(EVT_SYS_REALTIME_SEQ_START);
 8000f38:	2002      	movs	r0, #2
 8000f3a:	f7ff ffa9 	bl	8000e90 <invoke_callback>
            break;
 8000f3e:	e013      	b.n	8000f68 <rx_status_sys_realtime_byte+0x78>

        case SYS_REALTIME_SEQ_CONTINUE:
            invoke_callback(EVT_SYS_REALTIME_SEQ_CONTINUE);
 8000f40:	2003      	movs	r0, #3
 8000f42:	f7ff ffa5 	bl	8000e90 <invoke_callback>
            break;
 8000f46:	e00f      	b.n	8000f68 <rx_status_sys_realtime_byte+0x78>

        case SYS_REALTIME_SEQ_STOP:
            invoke_callback(EVT_SYS_REALTIME_SEQ_STOP);
 8000f48:	2004      	movs	r0, #4
 8000f4a:	f7ff ffa1 	bl	8000e90 <invoke_callback>
            break;
 8000f4e:	e00b      	b.n	8000f68 <rx_status_sys_realtime_byte+0x78>

        case SYS_REALTIME_RESERVED_FD:
            invoke_callback(EVT_SYS_REALTIME_RESERVED_FD);
 8000f50:	2005      	movs	r0, #5
 8000f52:	f7ff ff9d 	bl	8000e90 <invoke_callback>
            break;
 8000f56:	e007      	b.n	8000f68 <rx_status_sys_realtime_byte+0x78>

        case SYS_REALTIME_ACTIVE_SENSE:
            invoke_callback(EVT_SYS_REALTIME_ACTIVE_SENSE);
 8000f58:	2006      	movs	r0, #6
 8000f5a:	f7ff ff99 	bl	8000e90 <invoke_callback>
            break;
 8000f5e:	e003      	b.n	8000f68 <rx_status_sys_realtime_byte+0x78>

        case SYS_REALTIME_RESET:
            invoke_callback(EVT_SYS_REALTIME_RESET);
 8000f60:	2007      	movs	r0, #7
 8000f62:	f7ff ff95 	bl	8000e90 <invoke_callback>
            break;
 8000f66:	bf00      	nop
    }
    return 1;
 8000f68:	2301      	movs	r3, #1
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop

08000f74 <rx_status_sys_common_byte>:


// Process a "system common" status byte (0 or more data bytes follow.)
static status_t rx_status_sys_common_byte(char byte) {
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
    // TODO(tdial): Implement
    return 0;
 8000f7e:	2300      	movs	r3, #0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <rx_status_channel_byte>:


// Process a "channel" status byte. (1 or 2 data bytes follow.)
static status_t rx_status_channel_byte(char byte) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
    // Mask of the channel bits, leaving only the message type.
    const char type = (byte & CHAN_TYPE_MASK);
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	f023 030f 	bic.w	r3, r3, #15
 8000f9c:	73fb      	strb	r3, [r7, #15]

    // Update the state machine with the MIDI channel of the message that
    // we are now processing. This is held in a global.
    g_current_channel = (byte & CHAN_MASK);
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	f003 030f 	and.w	r3, r3, #15
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <rx_status_channel_byte+0x98>)
 8000fa8:	701a      	strb	r2, [r3, #0]

    switch (type) {
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	2bb0      	cmp	r3, #176	; 0xb0
 8000fae:	d01b      	beq.n	8000fe8 <rx_status_channel_byte+0x5c>
 8000fb0:	2bb0      	cmp	r3, #176	; 0xb0
 8000fb2:	dc06      	bgt.n	8000fc2 <rx_status_channel_byte+0x36>
 8000fb4:	2b90      	cmp	r3, #144	; 0x90
 8000fb6:	d00f      	beq.n	8000fd8 <rx_status_channel_byte+0x4c>
 8000fb8:	2ba0      	cmp	r3, #160	; 0xa0
 8000fba:	d011      	beq.n	8000fe0 <rx_status_channel_byte+0x54>
 8000fbc:	2b80      	cmp	r3, #128	; 0x80
 8000fbe:	d007      	beq.n	8000fd0 <rx_status_channel_byte+0x44>
 8000fc0:	e022      	b.n	8001008 <rx_status_channel_byte+0x7c>
 8000fc2:	2bd0      	cmp	r3, #208	; 0xd0
 8000fc4:	d018      	beq.n	8000ff8 <rx_status_channel_byte+0x6c>
 8000fc6:	2be0      	cmp	r3, #224	; 0xe0
 8000fc8:	d01a      	beq.n	8001000 <rx_status_channel_byte+0x74>
 8000fca:	2bc0      	cmp	r3, #192	; 0xc0
 8000fcc:	d010      	beq.n	8000ff0 <rx_status_channel_byte+0x64>
 8000fce:	e01b      	b.n	8001008 <rx_status_channel_byte+0x7c>
        case CHAN_NOTE_OFF:
            g_state = STATE_WAITING_CHAN_NOTE_OFF_KEY;
 8000fd0:	4b15      	ldr	r3, [pc, #84]	; (8001028 <rx_status_channel_byte+0x9c>)
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	701a      	strb	r2, [r3, #0]
            break;
 8000fd6:	e01d      	b.n	8001014 <rx_status_channel_byte+0x88>

        case CHAN_NOTE_ON:
            g_state = STATE_WAITING_CHAN_NOTE_ON_KEY;
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <rx_status_channel_byte+0x9c>)
 8000fda:	2204      	movs	r2, #4
 8000fdc:	701a      	strb	r2, [r3, #0]
            break;
 8000fde:	e019      	b.n	8001014 <rx_status_channel_byte+0x88>

        case CHAN_POLY_AFTER_TOUCH:
            g_state = STATE_WAITING_CHAN_POLY_AFTERTOUCH_KEY;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <rx_status_channel_byte+0x9c>)
 8000fe2:	2206      	movs	r2, #6
 8000fe4:	701a      	strb	r2, [r3, #0]
            break;
 8000fe6:	e015      	b.n	8001014 <rx_status_channel_byte+0x88>

        case CHAN_CONTROL_CHANGE:
            g_state = STATE_WAITING_CHAN_CONTROL_CHANGE_CONTROL;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <rx_status_channel_byte+0x9c>)
 8000fea:	2208      	movs	r2, #8
 8000fec:	701a      	strb	r2, [r3, #0]
            break;
 8000fee:	e011      	b.n	8001014 <rx_status_channel_byte+0x88>

        case CHAN_PROGRAM_CHANGE:
            g_state = STATE_WAITING_CHAN_PROGRAM_CHANGE_PROGRAM;
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <rx_status_channel_byte+0x9c>)
 8000ff2:	220a      	movs	r2, #10
 8000ff4:	701a      	strb	r2, [r3, #0]
            break;
 8000ff6:	e00d      	b.n	8001014 <rx_status_channel_byte+0x88>

        case CHAN_AFTER_TOUCH:
            g_state = STATE_WAITING_CHAN_AFTERTOUCH_PRESSURE;
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <rx_status_channel_byte+0x9c>)
 8000ffa:	220b      	movs	r2, #11
 8000ffc:	701a      	strb	r2, [r3, #0]
            break;
 8000ffe:	e009      	b.n	8001014 <rx_status_channel_byte+0x88>

        case CHAN_PITCH_BEND:
            g_state = STATE_WAITING_CHAN_PITCH_BEND_LSBITS;
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <rx_status_channel_byte+0x9c>)
 8001002:	220c      	movs	r2, #12
 8001004:	701a      	strb	r2, [r3, #0]
            break;
 8001006:	e005      	b.n	8001014 <rx_status_channel_byte+0x88>

        default:
            g_state = STATE_ERROR;
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <rx_status_channel_byte+0x9c>)
 800100a:	2201      	movs	r2, #1
 800100c:	701a      	strb	r2, [r3, #0]
            return E_MIDI_BAD_CHANNEL_STATE;
 800100e:	f06f 0301 	mvn.w	r3, #1
 8001012:	e000      	b.n	8001016 <rx_status_channel_byte+0x8a>
    }
    return 0;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000427 	.word	0x20000427
 8001028:	20000424 	.word	0x20000424

0800102c <rx_data_byte>:


// Process a trailing data byte.
static status_t rx_data_byte(char byte) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
    switch (g_state) {
 8001036:	4b4e      	ldr	r3, [pc, #312]	; (8001170 <rx_data_byte+0x144>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	3b02      	subs	r3, #2
 800103c:	2b0b      	cmp	r3, #11
 800103e:	f200 808b 	bhi.w	8001158 <rx_data_byte+0x12c>
 8001042:	a201      	add	r2, pc, #4	; (adr r2, 8001048 <rx_data_byte+0x1c>)
 8001044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001048:	08001079 	.word	0x08001079
 800104c:	08001087 	.word	0x08001087
 8001050:	0800109d 	.word	0x0800109d
 8001054:	080010ab 	.word	0x080010ab
 8001058:	080010c1 	.word	0x080010c1
 800105c:	080010cf 	.word	0x080010cf
 8001060:	080010e5 	.word	0x080010e5
 8001064:	080010f3 	.word	0x080010f3
 8001068:	08001109 	.word	0x08001109
 800106c:	0800111f 	.word	0x0800111f
 8001070:	08001135 	.word	0x08001135
 8001074:	08001143 	.word	0x08001143
        // Process first byte of a "note off" message.
        case STATE_WAITING_CHAN_NOTE_OFF_KEY:
            g_data_byte_one = byte;
 8001078:	4a3e      	ldr	r2, [pc, #248]	; (8001174 <rx_data_byte+0x148>)
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	7013      	strb	r3, [r2, #0]
            g_state = STATE_WAITING_CHAN_NOTE_OFF_VELOCITY;
 800107e:	4b3c      	ldr	r3, [pc, #240]	; (8001170 <rx_data_byte+0x144>)
 8001080:	2203      	movs	r2, #3
 8001082:	701a      	strb	r2, [r3, #0]
            break;
 8001084:	e06f      	b.n	8001166 <rx_data_byte+0x13a>

        // Process second byte of a "note off" message, and invoke callback.
        // We reset the state in case there is a "running status" note off.
        case STATE_WAITING_CHAN_NOTE_OFF_VELOCITY:
            g_data_byte_two = byte;
 8001086:	4a3c      	ldr	r2, [pc, #240]	; (8001178 <rx_data_byte+0x14c>)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	7013      	strb	r3, [r2, #0]
            invoke_callback(EVT_CHAN_NOTE_OFF);
 800108c:	2008      	movs	r0, #8
 800108e:	f7ff feff 	bl	8000e90 <invoke_callback>
            g_state = STATE_WAITING_CHAN_NOTE_OFF_KEY;
 8001092:	4b37      	ldr	r3, [pc, #220]	; (8001170 <rx_data_byte+0x144>)
 8001094:	2202      	movs	r2, #2
 8001096:	701a      	strb	r2, [r3, #0]
            return 1;
 8001098:	2301      	movs	r3, #1
 800109a:	e065      	b.n	8001168 <rx_data_byte+0x13c>

        // Process first byte of a "note on" message.
        case STATE_WAITING_CHAN_NOTE_ON_KEY:
            g_data_byte_one = byte;
 800109c:	4a35      	ldr	r2, [pc, #212]	; (8001174 <rx_data_byte+0x148>)
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	7013      	strb	r3, [r2, #0]
            g_state = STATE_WAITING_CHAN_NOTE_ON_VELOCITY;
 80010a2:	4b33      	ldr	r3, [pc, #204]	; (8001170 <rx_data_byte+0x144>)
 80010a4:	2205      	movs	r2, #5
 80010a6:	701a      	strb	r2, [r3, #0]
            break;
 80010a8:	e05d      	b.n	8001166 <rx_data_byte+0x13a>

        // Process second byte of a "note on" message, and invoke callback.
        case STATE_WAITING_CHAN_NOTE_ON_VELOCITY:
            g_data_byte_two = byte;
 80010aa:	4a33      	ldr	r2, [pc, #204]	; (8001178 <rx_data_byte+0x14c>)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	7013      	strb	r3, [r2, #0]
            invoke_callback(EVT_CHAN_NOTE_ON);
 80010b0:	2009      	movs	r0, #9
 80010b2:	f7ff feed 	bl	8000e90 <invoke_callback>
            g_state = STATE_WAITING_CHAN_NOTE_ON_KEY;
 80010b6:	4b2e      	ldr	r3, [pc, #184]	; (8001170 <rx_data_byte+0x144>)
 80010b8:	2204      	movs	r2, #4
 80010ba:	701a      	strb	r2, [r3, #0]
            return 1;
 80010bc:	2301      	movs	r3, #1
 80010be:	e053      	b.n	8001168 <rx_data_byte+0x13c>

        // Process first byte of a poly after-touch message.
        case STATE_WAITING_CHAN_POLY_AFTERTOUCH_KEY:
            g_data_byte_one = byte;
 80010c0:	4a2c      	ldr	r2, [pc, #176]	; (8001174 <rx_data_byte+0x148>)
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	7013      	strb	r3, [r2, #0]
            g_state = STATE_WAITING_CHAN_POLY_AFTERTOUCH_PRESSURE;
 80010c6:	4b2a      	ldr	r3, [pc, #168]	; (8001170 <rx_data_byte+0x144>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	701a      	strb	r2, [r3, #0]
            break;
 80010cc:	e04b      	b.n	8001166 <rx_data_byte+0x13a>

        // Process second byte of a poly after-touch message, invoke callback.
        case STATE_WAITING_CHAN_POLY_AFTERTOUCH_PRESSURE:
            g_data_byte_two = byte;
 80010ce:	4a2a      	ldr	r2, [pc, #168]	; (8001178 <rx_data_byte+0x14c>)
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	7013      	strb	r3, [r2, #0]
            invoke_callback(EVT_CHAN_POLY_AFTERTOUCH);
 80010d4:	200a      	movs	r0, #10
 80010d6:	f7ff fedb 	bl	8000e90 <invoke_callback>
            g_state = STATE_WAITING_CHAN_POLY_AFTERTOUCH_KEY;
 80010da:	4b25      	ldr	r3, [pc, #148]	; (8001170 <rx_data_byte+0x144>)
 80010dc:	2206      	movs	r2, #6
 80010de:	701a      	strb	r2, [r3, #0]
            return 1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e041      	b.n	8001168 <rx_data_byte+0x13c>

        // Process first byte of a channel control change message.
        case STATE_WAITING_CHAN_CONTROL_CHANGE_CONTROL:
            g_data_byte_one = byte;
 80010e4:	4a23      	ldr	r2, [pc, #140]	; (8001174 <rx_data_byte+0x148>)
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	7013      	strb	r3, [r2, #0]
            g_state = STATE_WAITING_CHAN_CONTROL_CHANGE_VALUE;
 80010ea:	4b21      	ldr	r3, [pc, #132]	; (8001170 <rx_data_byte+0x144>)
 80010ec:	2209      	movs	r2, #9
 80010ee:	701a      	strb	r2, [r3, #0]
            break;
 80010f0:	e039      	b.n	8001166 <rx_data_byte+0x13a>

        // Process second byte of a channel control change, invoke callback.
        case STATE_WAITING_CHAN_CONTROL_CHANGE_VALUE:
            g_data_byte_two = byte;
 80010f2:	4a21      	ldr	r2, [pc, #132]	; (8001178 <rx_data_byte+0x14c>)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	7013      	strb	r3, [r2, #0]
            invoke_callback(EVT_CHAN_CONTROL_CHANGE);
 80010f8:	200b      	movs	r0, #11
 80010fa:	f7ff fec9 	bl	8000e90 <invoke_callback>
            g_state = STATE_WAITING_CHAN_CONTROL_CHANGE_CONTROL;
 80010fe:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <rx_data_byte+0x144>)
 8001100:	2208      	movs	r2, #8
 8001102:	701a      	strb	r2, [r3, #0]
            return 1;
 8001104:	2301      	movs	r3, #1
 8001106:	e02f      	b.n	8001168 <rx_data_byte+0x13c>

        // Process program change, invoke callback.
        case STATE_WAITING_CHAN_PROGRAM_CHANGE_PROGRAM:
            g_data_byte_one = byte;
 8001108:	4a1a      	ldr	r2, [pc, #104]	; (8001174 <rx_data_byte+0x148>)
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	7013      	strb	r3, [r2, #0]
            g_data_byte_two = 0;
 800110e:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <rx_data_byte+0x14c>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
            invoke_callback(EVT_CHAN_PROGRAM_CHANGE);
 8001114:	200c      	movs	r0, #12
 8001116:	f7ff febb 	bl	8000e90 <invoke_callback>
            // Leave state intact in case there is another via running status.
            return 1;
 800111a:	2301      	movs	r3, #1
 800111c:	e024      	b.n	8001168 <rx_data_byte+0x13c>

        // Process channel after-touch message, invoke callback.
        case STATE_WAITING_CHAN_AFTERTOUCH_PRESSURE:
            g_data_byte_one = byte;
 800111e:	4a15      	ldr	r2, [pc, #84]	; (8001174 <rx_data_byte+0x148>)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	7013      	strb	r3, [r2, #0]
            g_data_byte_two = 0;
 8001124:	4b14      	ldr	r3, [pc, #80]	; (8001178 <rx_data_byte+0x14c>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
            invoke_callback(EVT_CHAN_AFTERTOUCH);
 800112a:	200d      	movs	r0, #13
 800112c:	f7ff feb0 	bl	8000e90 <invoke_callback>
            // Leave state intact in case there is another via running status.
            return 1;
 8001130:	2301      	movs	r3, #1
 8001132:	e019      	b.n	8001168 <rx_data_byte+0x13c>

        // Process first byte of pitch bend.
        case STATE_WAITING_CHAN_PITCH_BEND_LSBITS:
            g_data_byte_one = byte;
 8001134:	4a0f      	ldr	r2, [pc, #60]	; (8001174 <rx_data_byte+0x148>)
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	7013      	strb	r3, [r2, #0]
            g_state = STATE_WAITING_CHAN_PITCH_BEND_MSBITS;
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <rx_data_byte+0x144>)
 800113c:	220d      	movs	r2, #13
 800113e:	701a      	strb	r2, [r3, #0]
            break;
 8001140:	e011      	b.n	8001166 <rx_data_byte+0x13a>

        // Process second byte of pitch bend.
        case STATE_WAITING_CHAN_PITCH_BEND_MSBITS:
            g_data_byte_two = byte;
 8001142:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <rx_data_byte+0x14c>)
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	7013      	strb	r3, [r2, #0]
            invoke_callback(EVT_CHAN_PITCH_BEND);
 8001148:	200e      	movs	r0, #14
 800114a:	f7ff fea1 	bl	8000e90 <invoke_callback>
            g_state = STATE_WAITING_CHAN_PITCH_BEND_LSBITS;
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <rx_data_byte+0x144>)
 8001150:	220c      	movs	r2, #12
 8001152:	701a      	strb	r2, [r3, #0]
            return 1;
 8001154:	2301      	movs	r3, #1
 8001156:	e007      	b.n	8001168 <rx_data_byte+0x13c>

        // Handle bad state.
        default:
            g_data_byte_one = 0;
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <rx_data_byte+0x148>)
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
            g_data_byte_two = 0;
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <rx_data_byte+0x14c>)
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
            // TODO(tdial): Do we have to touch the state?
            break;
 8001164:	bf00      	nop
    }

    // No messages processed; return 0.
    return 0;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000424 	.word	0x20000424
 8001174:	20000428 	.word	0x20000428
 8001178:	20000429 	.word	0x20000429

0800117c <midi_init>:
/****************************************************************************
 * Public APIs                                                              *
 ****************************************************************************/


status_t midi_init() {
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
    // Initialize the callback table; all events to the null callback.
    for (int i = 0; i < EVT_MAX; ++i) {
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	e007      	b.n	8001198 <midi_init+0x1c>
        g_callbacks[i] = null_event_cb;
 8001188:	4a08      	ldr	r2, [pc, #32]	; (80011ac <midi_init+0x30>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4908      	ldr	r1, [pc, #32]	; (80011b0 <midi_init+0x34>)
 800118e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < EVT_MAX; ++i) {
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3301      	adds	r3, #1
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b0e      	cmp	r3, #14
 800119c:	ddf4      	ble.n	8001188 <midi_init+0xc>
    }
    return 0;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	20000430 	.word	0x20000430
 80011b0:	08000e73 	.word	0x08000e73

080011b4 <midi_register_event_handler>:


status_t midi_register_event_handler(event_type evt, midi_event_callback_t cb) {
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
    if (cb) {
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d005      	beq.n	80011d2 <midi_register_event_handler+0x1e>
        g_callbacks[evt] = cb;
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	4908      	ldr	r1, [pc, #32]	; (80011ec <midi_register_event_handler+0x38>)
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80011d0:	e004      	b.n	80011dc <midi_register_event_handler+0x28>
    } else {
        g_callbacks[evt] = null_event_cb;
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	4a05      	ldr	r2, [pc, #20]	; (80011ec <midi_register_event_handler+0x38>)
 80011d6:	4906      	ldr	r1, [pc, #24]	; (80011f0 <midi_register_event_handler+0x3c>)
 80011d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }

    return 0;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000430 	.word	0x20000430
 80011f0:	08000e73 	.word	0x08000e73

080011f4 <midi_receive_byte>:


status_t midi_receive_byte(char byte) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
     *
     * If it is determined that the byte is not any type of status byte, then
     * by process of elimination, it must be a data byte.
     */

    if ((byte & SYS_REALTIME_MASK) == SYS_REALTIME_MASK) {
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8001204:	2bf8      	cmp	r3, #248	; 0xf8
 8001206:	d108      	bne.n	800121a <midi_receive_byte+0x26>
        // The byte is a system real-time status byte.
        g_debug_last_status_byte = byte;
 8001208:	4a17      	ldr	r2, [pc, #92]	; (8001268 <midi_receive_byte+0x74>)
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	7013      	strb	r3, [r2, #0]
        return rx_status_sys_realtime_byte(byte);
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fe6d 	bl	8000ef0 <rx_status_sys_realtime_byte>
 8001216:	4603      	mov	r3, r0
 8001218:	e022      	b.n	8001260 <midi_receive_byte+0x6c>
    } else if ((byte & SYS_COMMON_MASK) == SYS_COMMON_MASK) {
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001220:	2bf0      	cmp	r3, #240	; 0xf0
 8001222:	d108      	bne.n	8001236 <midi_receive_byte+0x42>
        // The byte is a system common status byte.
        g_debug_last_status_byte = byte;
 8001224:	4a10      	ldr	r2, [pc, #64]	; (8001268 <midi_receive_byte+0x74>)
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	7013      	strb	r3, [r2, #0]
        return rx_status_sys_common_byte(byte);
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fea1 	bl	8000f74 <rx_status_sys_common_byte>
 8001232:	4603      	mov	r3, r0
 8001234:	e014      	b.n	8001260 <midi_receive_byte+0x6c>
    } else if (byte & CHAN_STATUS_MASK) {
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	2b00      	cmp	r3, #0
 800123c:	da08      	bge.n	8001250 <midi_receive_byte+0x5c>
        // The byte is a channel voice or channel mode status byte.
        g_debug_last_status_byte = byte;
 800123e:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <midi_receive_byte+0x74>)
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	7013      	strb	r3, [r2, #0]
        return rx_status_channel_byte(byte);
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fea0 	bl	8000f8c <rx_status_channel_byte>
 800124c:	4603      	mov	r3, r0
 800124e:	e007      	b.n	8001260 <midi_receive_byte+0x6c>
    } else {
        // The byte is a regular data byte.
        g_debug_last_data_byte = byte;
 8001250:	4a06      	ldr	r2, [pc, #24]	; (800126c <midi_receive_byte+0x78>)
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	7013      	strb	r3, [r2, #0]
        return rx_data_byte(byte);
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fee7 	bl	800102c <rx_data_byte>
 800125e:	4603      	mov	r3, r0
    }
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000425 	.word	0x20000425
 800126c:	20000426 	.word	0x20000426

08001270 <note_on>:

extern struct voice voices[];
int lastVoice = 0;
//set_frequency(&voice1, midiNoteTable[data1]);

void note_on(char chan, char data1, char data2) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
 800127a:	460b      	mov	r3, r1
 800127c:	71bb      	strb	r3, [r7, #6]
 800127e:	4613      	mov	r3, r2
 8001280:	717b      	strb	r3, [r7, #5]
	if(lastVoice >= VOICE_TOTAL) lastVoice = 0;
 8001282:	4b22      	ldr	r3, [pc, #136]	; (800130c <note_on+0x9c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b0f      	cmp	r3, #15
 8001288:	dd02      	ble.n	8001290 <note_on+0x20>
 800128a:	4b20      	ldr	r3, [pc, #128]	; (800130c <note_on+0x9c>)
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
	voices[lastVoice].frequency = midiFreqTable[data1];
 8001290:	79bb      	ldrb	r3, [r7, #6]
 8001292:	4a1e      	ldr	r2, [pc, #120]	; (800130c <note_on+0x9c>)
 8001294:	6812      	ldr	r2, [r2, #0]
 8001296:	491e      	ldr	r1, [pc, #120]	; (8001310 <note_on+0xa0>)
 8001298:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800129c:	481d      	ldr	r0, [pc, #116]	; (8001314 <note_on+0xa4>)
 800129e:	4613      	mov	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4403      	add	r3, r0
 80012a8:	330c      	adds	r3, #12
 80012aa:	6019      	str	r1, [r3, #0]
	set_frequency(&voices[lastVoice], midiFreqTable[data1]);
 80012ac:	4b17      	ldr	r3, [pc, #92]	; (800130c <note_on+0x9c>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4613      	mov	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4413      	add	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	4a16      	ldr	r2, [pc, #88]	; (8001314 <note_on+0xa4>)
 80012ba:	1898      	adds	r0, r3, r2
 80012bc:	79bb      	ldrb	r3, [r7, #6]
 80012be:	4a14      	ldr	r2, [pc, #80]	; (8001310 <note_on+0xa0>)
 80012c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c4:	4619      	mov	r1, r3
 80012c6:	f000 facd 	bl	8001864 <set_frequency>
	voices[lastVoice].gain = 0;
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <note_on+0x9c>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4911      	ldr	r1, [pc, #68]	; (8001314 <note_on+0xa4>)
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	440b      	add	r3, r1
 80012da:	3310      	adds	r3, #16
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
	voices[lastVoice].state = attack;
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <note_on+0x9c>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	490b      	ldr	r1, [pc, #44]	; (8001314 <note_on+0xa4>)
 80012e8:	4613      	mov	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4413      	add	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	3308      	adds	r3, #8
 80012f4:	2203      	movs	r2, #3
 80012f6:	701a      	strb	r2, [r3, #0]
	lastVoice += 1;
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <note_on+0x9c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3301      	adds	r3, #1
 80012fe:	4a03      	ldr	r2, [pc, #12]	; (800130c <note_on+0x9c>)
 8001300:	6013      	str	r3, [r2, #0]
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2000046c 	.word	0x2000046c
 8001310:	20000000 	.word	0x20000000
 8001314:	20000510 	.word	0x20000510

08001318 <note_off>:


void note_off(char chan, char data1, char data2) {
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
 8001322:	460b      	mov	r3, r1
 8001324:	71bb      	strb	r3, [r7, #6]
 8001326:	4613      	mov	r3, r2
 8001328:	717b      	strb	r3, [r7, #5]

	int freq = midiFreqTable[data1];
 800132a:	79bb      	ldrb	r3, [r7, #6]
 800132c:	4a19      	ldr	r2, [pc, #100]	; (8001394 <note_off+0x7c>)
 800132e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001332:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < VOICE_TOTAL; i++) {
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	e023      	b.n	8001382 <note_off+0x6a>
		if(voices[i].frequency == freq && voices[i].state != inactive) voices[i].state = decay;
 800133a:	4917      	ldr	r1, [pc, #92]	; (8001398 <note_off+0x80>)
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	4613      	mov	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	440b      	add	r3, r1
 8001348:	330c      	adds	r3, #12
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	68ba      	ldr	r2, [r7, #8]
 800134e:	429a      	cmp	r2, r3
 8001350:	d114      	bne.n	800137c <note_off+0x64>
 8001352:	4911      	ldr	r1, [pc, #68]	; (8001398 <note_off+0x80>)
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	4613      	mov	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	440b      	add	r3, r1
 8001360:	3308      	adds	r3, #8
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d009      	beq.n	800137c <note_off+0x64>
 8001368:	490b      	ldr	r1, [pc, #44]	; (8001398 <note_off+0x80>)
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	4613      	mov	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4413      	add	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	440b      	add	r3, r1
 8001376:	3308      	adds	r3, #8
 8001378:	2202      	movs	r2, #2
 800137a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < VOICE_TOTAL; i++) {
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	3301      	adds	r3, #1
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2b0f      	cmp	r3, #15
 8001386:	ddd8      	ble.n	800133a <note_off+0x22>
	}

}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	20000000 	.word	0x20000000
 8001398:	20000510 	.word	0x20000510

0800139c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a2:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <HAL_MspInit+0x44>)
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	4a0e      	ldr	r2, [pc, #56]	; (80013e0 <HAL_MspInit+0x44>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6193      	str	r3, [r2, #24]
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <HAL_MspInit+0x44>)
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <HAL_MspInit+0x44>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	4a08      	ldr	r2, [pc, #32]	; (80013e0 <HAL_MspInit+0x44>)
 80013c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c4:	61d3      	str	r3, [r2, #28]
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_MspInit+0x44>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40021000 	.word	0x40021000

080013e4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	; 0x28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a15      	ldr	r2, [pc, #84]	; (8001458 <HAL_DAC_MspInit+0x74>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d124      	bne.n	8001450 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <HAL_DAC_MspInit+0x78>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	4a14      	ldr	r2, [pc, #80]	; (800145c <HAL_DAC_MspInit+0x78>)
 800140c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001410:	61d3      	str	r3, [r2, #28]
 8001412:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_DAC_MspInit+0x78>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <HAL_DAC_MspInit+0x78>)
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	4a0e      	ldr	r2, [pc, #56]	; (800145c <HAL_DAC_MspInit+0x78>)
 8001424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001428:	6153      	str	r3, [r2, #20]
 800142a:	4b0c      	ldr	r3, [pc, #48]	; (800145c <HAL_DAC_MspInit+0x78>)
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001436:	2310      	movs	r3, #16
 8001438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800143a:	2303      	movs	r3, #3
 800143c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4619      	mov	r1, r3
 8001448:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144c:	f000 fcce 	bl	8001dec <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001450:	bf00      	nop
 8001452:	3728      	adds	r7, #40	; 0x28
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40007400 	.word	0x40007400
 800145c:	40021000 	.word	0x40021000

08001460 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001470:	d113      	bne.n	800149a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <HAL_TIM_Base_MspInit+0x44>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <HAL_TIM_Base_MspInit+0x44>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	61d3      	str	r3, [r2, #28]
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <HAL_TIM_Base_MspInit+0x44>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	201c      	movs	r0, #28
 8001490:	f000 fb73 	bl	8001b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001494:	201c      	movs	r0, #28
 8001496:	f000 fb8c 	bl	8001bb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40021000 	.word	0x40021000

080014a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	; 0x28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a1b      	ldr	r2, [pc, #108]	; (8001534 <HAL_UART_MspInit+0x8c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d12f      	bne.n	800152a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014ca:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <HAL_UART_MspInit+0x90>)
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	4a1a      	ldr	r2, [pc, #104]	; (8001538 <HAL_UART_MspInit+0x90>)
 80014d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d4:	6193      	str	r3, [r2, #24]
 80014d6:	4b18      	ldr	r3, [pc, #96]	; (8001538 <HAL_UART_MspInit+0x90>)
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <HAL_UART_MspInit+0x90>)
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	4a14      	ldr	r2, [pc, #80]	; (8001538 <HAL_UART_MspInit+0x90>)
 80014e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014ec:	6153      	str	r3, [r2, #20]
 80014ee:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_UART_MspInit+0x90>)
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80014fa:	2330      	movs	r3, #48	; 0x30
 80014fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800150a:	2307      	movs	r3, #7
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	4809      	ldr	r0, [pc, #36]	; (800153c <HAL_UART_MspInit+0x94>)
 8001516:	f000 fc69 	bl	8001dec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	2100      	movs	r1, #0
 800151e:	2025      	movs	r0, #37	; 0x25
 8001520:	f000 fb2b 	bl	8001b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001524:	2025      	movs	r0, #37	; 0x25
 8001526:	f000 fb44 	bl	8001bb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800152a:	bf00      	nop
 800152c:	3728      	adds	r7, #40	; 0x28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40013800 	.word	0x40013800
 8001538:	40021000 	.word	0x40021000
 800153c:	48000800 	.word	0x48000800

08001540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <HardFault_Handler+0x4>

08001554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <MemManage_Handler+0x4>

0800155a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <BusFault_Handler+0x4>

08001560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <UsageFault_Handler+0x4>

08001566 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001594:	f000 f9f6 	bl	8001984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}

0800159c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	out = 0;
 80015a2:	4b26      	ldr	r3, [pc, #152]	; (800163c <TIM2_IRQHandler+0xa0>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
	activeCount = 0;
 80015a8:	4b25      	ldr	r3, [pc, #148]	; (8001640 <TIM2_IRQHandler+0xa4>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]


	 for(int i = 0; i < VOICE_TOTAL; i++) {
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	e01c      	b.n	80015ee <TIM2_IRQHandler+0x52>
          update_voice(&voices[i]);
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4a21      	ldr	r2, [pc, #132]	; (8001644 <TIM2_IRQHandler+0xa8>)
 80015c0:	4413      	add	r3, r2
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 f88c 	bl	80016e0 <update_voice>
		  out += get_voice_out(&voices[i]);
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4a1c      	ldr	r2, [pc, #112]	; (8001644 <TIM2_IRQHandler+0xa8>)
 80015d4:	4413      	add	r3, r2
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 f85a 	bl	8001690 <get_voice_out>
 80015dc:	4602      	mov	r2, r0
 80015de:	4b17      	ldr	r3, [pc, #92]	; (800163c <TIM2_IRQHandler+0xa0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	4a15      	ldr	r2, [pc, #84]	; (800163c <TIM2_IRQHandler+0xa0>)
 80015e6:	6013      	str	r3, [r2, #0]
	 for(int i = 0; i < VOICE_TOTAL; i++) {
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3301      	adds	r3, #1
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b0f      	cmp	r3, #15
 80015f2:	dddf      	ble.n	80015b4 <TIM2_IRQHandler+0x18>
	 if(activeCount > 0) {
		 out /= activeCount;
	 }
	 */

	 out += 2048;
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <TIM2_IRQHandler+0xa0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015fc:	4a0f      	ldr	r2, [pc, #60]	; (800163c <TIM2_IRQHandler+0xa0>)
 80015fe:	6013      	str	r3, [r2, #0]

	 if(out > 4095) out = 4095;
 8001600:	4b0e      	ldr	r3, [pc, #56]	; (800163c <TIM2_IRQHandler+0xa0>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001608:	db03      	blt.n	8001612 <TIM2_IRQHandler+0x76>
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <TIM2_IRQHandler+0xa0>)
 800160c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001610:	601a      	str	r2, [r3, #0]
	 if(out < 0) out = 0;
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <TIM2_IRQHandler+0xa0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	da02      	bge.n	8001620 <TIM2_IRQHandler+0x84>
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <TIM2_IRQHandler+0xa0>)
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]


	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, out);
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <TIM2_IRQHandler+0xa0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2200      	movs	r2, #0
 8001626:	2100      	movs	r1, #0
 8001628:	4807      	ldr	r0, [pc, #28]	; (8001648 <TIM2_IRQHandler+0xac>)
 800162a:	f000 fafe 	bl	8001c2a <HAL_DAC_SetValue>


  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800162e:	4807      	ldr	r0, [pc, #28]	; (800164c <TIM2_IRQHandler+0xb0>)
 8001630:	f002 f88c 	bl	800374c <HAL_TIM_IRQHandler>




  /* USER CODE END TIM2_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000470 	.word	0x20000470
 8001640:	20000474 	.word	0x20000474
 8001644:	20000510 	.word	0x20000510
 8001648:	200004fc 	.word	0x200004fc
 800164c:	20000654 	.word	0x20000654

08001650 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001654:	4802      	ldr	r0, [pc, #8]	; (8001660 <USART1_IRQHandler+0x10>)
 8001656:	f002 fcff 	bl	8004058 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	2000047c 	.word	0x2000047c

08001664 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <SystemInit+0x28>)
 800166a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800166e:	4a07      	ldr	r2, [pc, #28]	; (800168c <SystemInit+0x28>)
 8001670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001678:	4b04      	ldr	r3, [pc, #16]	; (800168c <SystemInit+0x28>)
 800167a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800167e:	609a      	str	r2, [r3, #8]
#endif
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <get_voice_out>:
#include <math.h>
#include "wave_tables.h"

double interpolate_segment(double x0, int y0, double x1, int y1, double x);

int get_voice_out(struct voice* voice) {
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

	//TODO Implement interpolation
	int val = wavetable_sine[(int) voice->currentAngle] - 2048;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	edd3 7a00 	vldr	s15, [r3]
 800169e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016a2:	ee17 2a90 	vmov	r2, s15
 80016a6:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <get_voice_out+0x4c>)
 80016a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ac:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80016b0:	60fb      	str	r3, [r7, #12]
	//double cAngle = voice->currentAngle;
	//int val = (int) interpolate_segment((int) cAngle, wavetable_sine[(int) cAngle] ,(int) cAngle + 1, wavetable_sine[(int) cAngle + 1], cAngle);
	return (val * voice->gain);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	ee07 3a90 	vmov	s15, r3
 80016b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	edd3 7a04 	vldr	s15, [r3, #16]
 80016c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016ca:	ee17 3a90 	vmov	r3, s15
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000200 	.word	0x20000200

080016e0 <update_voice>:

void update_voice(struct voice* voice) {
 80016e0:	b590      	push	{r4, r7, lr}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	voice->currentAngle += voice->angleDelta;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	ed93 7a00 	vldr	s14, [r3]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80016f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	edc3 7a00 	vstr	s15, [r3]
	if (voice->currentAngle > WAVE_SAMPLE_COUNT) voice->currentAngle = 0;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	edd3 7a00 	vldr	s15, [r3]
 8001704:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001860 <update_voice+0x180>
 8001708:	eef4 7ac7 	vcmpe.f32	s15, s14
 800170c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001710:	dd03      	ble.n	800171a <update_voice+0x3a>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	601a      	str	r2, [r3, #0]

	switch(voice->state) {
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	7a1b      	ldrb	r3, [r3, #8]
 800171e:	2b03      	cmp	r3, #3
 8001720:	f200 8084 	bhi.w	800182c <update_voice+0x14c>
 8001724:	a201      	add	r2, pc, #4	; (adr r2, 800172c <update_voice+0x4c>)
 8001726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800172a:	bf00      	nop
 800172c:	08001823 	.word	0x08001823
 8001730:	08001787 	.word	0x08001787
 8001734:	080017c9 	.word	0x080017c9
 8001738:	0800173d 	.word	0x0800173d
		case attack:
			if(voice->gain > ATTACK_PEAK) {
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe fea5 	bl	8000490 <__aeabi_f2d>
 8001746:	a33e      	add	r3, pc, #248	; (adr r3, 8001840 <update_voice+0x160>)
 8001748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174c:	f7ff f988 	bl	8000a60 <__aeabi_dcmpgt>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <update_voice+0x7e>
				voice->state = sustain;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	721a      	strb	r2, [r3, #8]
				break;
 800175c:	e069      	b.n	8001832 <update_voice+0x152>
			}
			voice->gain += ATTACK_DELTA;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe fe94 	bl	8000490 <__aeabi_f2d>
 8001768:	a337      	add	r3, pc, #220	; (adr r3, 8001848 <update_voice+0x168>)
 800176a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176e:	f7fe fd31 	bl	80001d4 <__adddf3>
 8001772:	4603      	mov	r3, r0
 8001774:	460c      	mov	r4, r1
 8001776:	4618      	mov	r0, r3
 8001778:	4621      	mov	r1, r4
 800177a:	f7ff f97b 	bl	8000a74 <__aeabi_d2f>
 800177e:	4602      	mov	r2, r0
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	611a      	str	r2, [r3, #16]
			break;
 8001784:	e055      	b.n	8001832 <update_voice+0x152>
		case sustain:
			if(voice->gain < SUSTAIN_PEAK) {
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe fe80 	bl	8000490 <__aeabi_f2d>
 8001790:	a32f      	add	r3, pc, #188	; (adr r3, 8001850 <update_voice+0x170>)
 8001792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001796:	f7ff f945 	bl	8000a24 <__aeabi_dcmplt>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d147      	bne.n	8001830 <update_voice+0x150>
				break;
			}
			voice->gain -= ATTACK_DELTA;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe fe73 	bl	8000490 <__aeabi_f2d>
 80017aa:	a327      	add	r3, pc, #156	; (adr r3, 8001848 <update_voice+0x168>)
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b0:	f7fe fd0e 	bl	80001d0 <__aeabi_dsub>
 80017b4:	4603      	mov	r3, r0
 80017b6:	460c      	mov	r4, r1
 80017b8:	4618      	mov	r0, r3
 80017ba:	4621      	mov	r1, r4
 80017bc:	f7ff f95a 	bl	8000a74 <__aeabi_d2f>
 80017c0:	4602      	mov	r2, r0
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	611a      	str	r2, [r3, #16]
			break;
 80017c6:	e034      	b.n	8001832 <update_voice+0x152>
		case decay:
			if(voice->gain <= 0) {
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80017ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d6:	d803      	bhi.n	80017e0 <update_voice+0x100>
				voice->state = inactive;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	721a      	strb	r2, [r3, #8]
				break;
 80017de:	e028      	b.n	8001832 <update_voice+0x152>
			}
			voice->gain -= DECAY_DELTA;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe fe53 	bl	8000490 <__aeabi_f2d>
 80017ea:	a31b      	add	r3, pc, #108	; (adr r3, 8001858 <update_voice+0x178>)
 80017ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f0:	f7fe fcee 	bl	80001d0 <__aeabi_dsub>
 80017f4:	4603      	mov	r3, r0
 80017f6:	460c      	mov	r4, r1
 80017f8:	4618      	mov	r0, r3
 80017fa:	4621      	mov	r1, r4
 80017fc:	f7ff f93a 	bl	8000a74 <__aeabi_d2f>
 8001800:	4602      	mov	r2, r0
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	611a      	str	r2, [r3, #16]
			if(voice->gain < 0) voice->gain = 0;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	edd3 7a04 	vldr	s15, [r3, #16]
 800180c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001814:	d400      	bmi.n	8001818 <update_voice+0x138>
			break;
 8001816:	e00c      	b.n	8001832 <update_voice+0x152>
			if(voice->gain < 0) voice->gain = 0;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
			break;
 8001820:	e007      	b.n	8001832 <update_voice+0x152>
		case inactive:
			voice->gain = 0;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	611a      	str	r2, [r3, #16]
			break;
 800182a:	e002      	b.n	8001832 <update_voice+0x152>
		default:
			break;
 800182c:	bf00      	nop
 800182e:	e000      	b.n	8001832 <update_voice+0x152>
				break;
 8001830:	bf00      	nop
	}


}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	bd90      	pop	{r4, r7, pc}
 800183a:	bf00      	nop
 800183c:	f3af 8000 	nop.w
 8001840:	9999999a 	.word	0x9999999a
 8001844:	3fd99999 	.word	0x3fd99999
 8001848:	47ae147b 	.word	0x47ae147b
 800184c:	3f947ae1 	.word	0x3f947ae1
 8001850:	9999999a 	.word	0x9999999a
 8001854:	3fc99999 	.word	0x3fc99999
 8001858:	88e368f1 	.word	0x88e368f1
 800185c:	3ee4f8b5 	.word	0x3ee4f8b5
 8001860:	43000000 	.word	0x43000000

08001864 <set_frequency>:

void set_frequency(struct voice* voice, int freq) {
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
	voice->angleDelta = freq/200.0;
 800186e:	6838      	ldr	r0, [r7, #0]
 8001870:	f7fe fdfc 	bl	800046c <__aeabi_i2d>
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <set_frequency+0x3c>)
 800187a:	f7fe ff8b 	bl	8000794 <__aeabi_ddiv>
 800187e:	4603      	mov	r3, r0
 8001880:	460c      	mov	r4, r1
 8001882:	4618      	mov	r0, r3
 8001884:	4621      	mov	r1, r4
 8001886:	f7ff f8f5 	bl	8000a74 <__aeabi_d2f>
 800188a:	4602      	mov	r2, r0
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	605a      	str	r2, [r3, #4]
	voice->frequency = freq;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	60da      	str	r2, [r3, #12]
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	bd90      	pop	{r4, r7, pc}
 800189e:	bf00      	nop
 80018a0:	40690000 	.word	0x40690000

080018a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018dc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80018a8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80018aa:	e003      	b.n	80018b4 <LoopCopyDataInit>

080018ac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80018ae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80018b0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80018b2:	3104      	adds	r1, #4

080018b4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80018b4:	480b      	ldr	r0, [pc, #44]	; (80018e4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80018b8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80018ba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80018bc:	d3f6      	bcc.n	80018ac <CopyDataInit>
	ldr	r2, =_sbss
 80018be:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <LoopForever+0x12>)
	b	LoopFillZerobss
 80018c0:	e002      	b.n	80018c8 <LoopFillZerobss>

080018c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80018c2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80018c4:	f842 3b04 	str.w	r3, [r2], #4

080018c8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <LoopForever+0x16>)
	cmp	r2, r3
 80018ca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80018cc:	d3f9      	bcc.n	80018c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018ce:	f7ff fec9 	bl	8001664 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018d2:	f003 f8ff 	bl	8004ad4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018d6:	f7ff f91d 	bl	8000b14 <main>

080018da <LoopForever>:

LoopForever:
    b LoopForever
 80018da:	e7fe      	b.n	80018da <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018dc:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 80018e0:	08004b84 	.word	0x08004b84
	ldr	r0, =_sdata
 80018e4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80018e8:	20000408 	.word	0x20000408
	ldr	r2, =_sbss
 80018ec:	20000408 	.word	0x20000408
	ldr	r3, = _ebss
 80018f0:	20000698 	.word	0x20000698

080018f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018f4:	e7fe      	b.n	80018f4 <ADC1_IRQHandler>
	...

080018f8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <HAL_Init+0x28>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a07      	ldr	r2, [pc, #28]	; (8001920 <HAL_Init+0x28>)
 8001902:	f043 0310 	orr.w	r3, r3, #16
 8001906:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001908:	2003      	movs	r0, #3
 800190a:	f000 f92b 	bl	8001b64 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800190e:	2000      	movs	r0, #0
 8001910:	f000 f808 	bl	8001924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001914:	f7ff fd42 	bl	800139c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40022000 	.word	0x40022000

08001924 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_InitTick+0x54>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_InitTick+0x58>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	4619      	mov	r1, r3
 8001936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800193a:	fbb3 f3f1 	udiv	r3, r3, r1
 800193e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001942:	4618      	mov	r0, r3
 8001944:	f000 f943 	bl	8001bce <HAL_SYSTICK_Config>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e00e      	b.n	8001970 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b0f      	cmp	r3, #15
 8001956:	d80a      	bhi.n	800196e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001958:	2200      	movs	r2, #0
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001960:	f000 f90b 	bl	8001b7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001964:	4a06      	ldr	r2, [pc, #24]	; (8001980 <HAL_InitTick+0x5c>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
 800196c:	e000      	b.n	8001970 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
}
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	200001fc 	.word	0x200001fc
 800197c:	20000404 	.word	0x20000404
 8001980:	20000400 	.word	0x20000400

08001984 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_IncTick+0x20>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_IncTick+0x24>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4413      	add	r3, r2
 8001994:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <HAL_IncTick+0x24>)
 8001996:	6013      	str	r3, [r2, #0]
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000404 	.word	0x20000404
 80019a8:	20000694 	.word	0x20000694

080019ac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return uwTick;  
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <HAL_GetTick+0x14>)
 80019b2:	681b      	ldr	r3, [r3, #0]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	20000694 	.word	0x20000694

080019c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e0:	4013      	ands	r3, r2
 80019e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f6:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	60d3      	str	r3, [r2, #12]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <__NVIC_GetPriorityGrouping+0x18>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	0a1b      	lsrs	r3, r3, #8
 8001a16:	f003 0307 	and.w	r3, r3, #7
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	db0b      	blt.n	8001a52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	f003 021f 	and.w	r2, r3, #31
 8001a40:	4907      	ldr	r1, [pc, #28]	; (8001a60 <__NVIC_EnableIRQ+0x38>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	2001      	movs	r0, #1
 8001a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000e100 	.word	0xe000e100

08001a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	6039      	str	r1, [r7, #0]
 8001a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	db0a      	blt.n	8001a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	490c      	ldr	r1, [pc, #48]	; (8001ab0 <__NVIC_SetPriority+0x4c>)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	0112      	lsls	r2, r2, #4
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	440b      	add	r3, r1
 8001a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a8c:	e00a      	b.n	8001aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4908      	ldr	r1, [pc, #32]	; (8001ab4 <__NVIC_SetPriority+0x50>)
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	3b04      	subs	r3, #4
 8001a9c:	0112      	lsls	r2, r2, #4
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	761a      	strb	r2, [r3, #24]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000e100 	.word	0xe000e100
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b089      	sub	sp, #36	; 0x24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f1c3 0307 	rsb	r3, r3, #7
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	bf28      	it	cs
 8001ad6:	2304      	movcs	r3, #4
 8001ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3304      	adds	r3, #4
 8001ade:	2b06      	cmp	r3, #6
 8001ae0:	d902      	bls.n	8001ae8 <NVIC_EncodePriority+0x30>
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3b03      	subs	r3, #3
 8001ae6:	e000      	b.n	8001aea <NVIC_EncodePriority+0x32>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43da      	mvns	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	401a      	ands	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0a:	43d9      	mvns	r1, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b10:	4313      	orrs	r3, r2
         );
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3724      	adds	r7, #36	; 0x24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b30:	d301      	bcc.n	8001b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00f      	b.n	8001b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b36:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <SysTick_Config+0x40>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3e:	210f      	movs	r1, #15
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b44:	f7ff ff8e 	bl	8001a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <SysTick_Config+0x40>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4e:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <SysTick_Config+0x40>)
 8001b50:	2207      	movs	r2, #7
 8001b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	e000e010 	.word	0xe000e010

08001b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ff29 	bl	80019c4 <__NVIC_SetPriorityGrouping>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b086      	sub	sp, #24
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
 8001b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b8c:	f7ff ff3e 	bl	8001a0c <__NVIC_GetPriorityGrouping>
 8001b90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	68b9      	ldr	r1, [r7, #8]
 8001b96:	6978      	ldr	r0, [r7, #20]
 8001b98:	f7ff ff8e 	bl	8001ab8 <NVIC_EncodePriority>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff5d 	bl	8001a64 <__NVIC_SetPriority>
}
 8001baa:	bf00      	nop
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	4603      	mov	r3, r0
 8001bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff31 	bl	8001a28 <__NVIC_EnableIRQ>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff ffa2 	bl	8001b20 <SysTick_Config>
 8001bdc:	4603      	mov	r3, r0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e014      	b.n	8001c22 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	791b      	ldrb	r3, [r3, #4]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d105      	bne.n	8001c0e <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff fbeb 	bl	80013e4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2202      	movs	r2, #2
 8001c12:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8001c2a:	b480      	push	{r7}
 8001c2c:	b087      	sub	sp, #28
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	60f8      	str	r0, [r7, #12]
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
 8001c36:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d104      	bne.n	8001c52 <HAL_DAC_SetValue+0x28>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	3308      	adds	r3, #8
 8001c50:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	461a      	mov	r2, r3
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	371c      	adds	r7, #28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 selected
  * @retval HAL status 
  */

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	795b      	ldrb	r3, [r3, #5]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d101      	bne.n	8001c7e <HAL_DAC_Start+0x16>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e025      	b.n	8001cca <HAL_DAC_Start+0x62>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2202      	movs	r2, #2
 8001c88:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6819      	ldr	r1, [r3, #0]
 8001c90:	2201      	movs	r2, #1
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	409a      	lsls	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	601a      	str	r2, [r3, #0]
  
  /* Check if software trigger enabled */
  if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001ca8:	2b3c      	cmp	r3, #60	; 0x3c
 8001caa:	d107      	bne.n	8001cbc <HAL_DAC_Start+0x54>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0201 	orr.w	r2, r2, #1
 8001cba:	605a      	str	r2, [r3, #4]
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b087      	sub	sp, #28
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	60f8      	str	r0, [r7, #12]
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	795b      	ldrb	r3, [r3, #5]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d101      	bne.n	8001cf6 <HAL_DAC_ConfigChannel+0x20>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e036      	b.n	8001d64 <HAL_DAC_ConfigChannel+0x8e>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2202      	movs	r2, #2
 8001d00:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001d0a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6819      	ldr	r1, [r3, #0]
 8001d44:	22c0      	movs	r2, #192	; 0xc0
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43da      	mvns	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	400a      	ands	r2, r1
 8001d54:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	371c      	adds	r7, #28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d005      	beq.n	8001d92 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2204      	movs	r2, #4
 8001d8a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	73fb      	strb	r3, [r7, #15]
 8001d90:	e027      	b.n	8001de2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 020e 	bic.w	r2, r2, #14
 8001da0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0201 	bic.w	r2, r2, #1
 8001db0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dba:	2101      	movs	r1, #1
 8001dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	4798      	blx	r3
    } 
  }
  return status;
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b087      	sub	sp, #28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dfa:	e14e      	b.n	800209a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	2101      	movs	r1, #1
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	fa01 f303 	lsl.w	r3, r1, r3
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 8140 	beq.w	8002094 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d003      	beq.n	8001e24 <HAL_GPIO_Init+0x38>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b12      	cmp	r3, #18
 8001e22:	d123      	bne.n	8001e6c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	08da      	lsrs	r2, r3, #3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3208      	adds	r2, #8
 8001e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e30:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	220f      	movs	r2, #15
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4013      	ands	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	691a      	ldr	r2, [r3, #16]
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	08da      	lsrs	r2, r3, #3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3208      	adds	r2, #8
 8001e66:	6939      	ldr	r1, [r7, #16]
 8001e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	2203      	movs	r2, #3
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0203 	and.w	r2, r3, #3
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d00b      	beq.n	8001ec0 <HAL_GPIO_Init+0xd4>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d007      	beq.n	8001ec0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eb4:	2b11      	cmp	r3, #17
 8001eb6:	d003      	beq.n	8001ec0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b12      	cmp	r3, #18
 8001ebe:	d130      	bne.n	8001f22 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	2203      	movs	r2, #3
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	091b      	lsrs	r3, r3, #4
 8001f0c:	f003 0201 	and.w	r2, r3, #1
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4013      	ands	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 809a 	beq.w	8002094 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f60:	4b55      	ldr	r3, [pc, #340]	; (80020b8 <HAL_GPIO_Init+0x2cc>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	4a54      	ldr	r2, [pc, #336]	; (80020b8 <HAL_GPIO_Init+0x2cc>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6193      	str	r3, [r2, #24]
 8001f6c:	4b52      	ldr	r3, [pc, #328]	; (80020b8 <HAL_GPIO_Init+0x2cc>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f78:	4a50      	ldr	r2, [pc, #320]	; (80020bc <HAL_GPIO_Init+0x2d0>)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	089b      	lsrs	r3, r3, #2
 8001f7e:	3302      	adds	r3, #2
 8001f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	220f      	movs	r2, #15
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fa2:	d013      	beq.n	8001fcc <HAL_GPIO_Init+0x1e0>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a46      	ldr	r2, [pc, #280]	; (80020c0 <HAL_GPIO_Init+0x2d4>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d00d      	beq.n	8001fc8 <HAL_GPIO_Init+0x1dc>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a45      	ldr	r2, [pc, #276]	; (80020c4 <HAL_GPIO_Init+0x2d8>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d007      	beq.n	8001fc4 <HAL_GPIO_Init+0x1d8>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a44      	ldr	r2, [pc, #272]	; (80020c8 <HAL_GPIO_Init+0x2dc>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d101      	bne.n	8001fc0 <HAL_GPIO_Init+0x1d4>
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e006      	b.n	8001fce <HAL_GPIO_Init+0x1e2>
 8001fc0:	2305      	movs	r3, #5
 8001fc2:	e004      	b.n	8001fce <HAL_GPIO_Init+0x1e2>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e002      	b.n	8001fce <HAL_GPIO_Init+0x1e2>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <HAL_GPIO_Init+0x1e2>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	f002 0203 	and.w	r2, r2, #3
 8001fd4:	0092      	lsls	r2, r2, #2
 8001fd6:	4093      	lsls	r3, r2
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fde:	4937      	ldr	r1, [pc, #220]	; (80020bc <HAL_GPIO_Init+0x2d0>)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	089b      	lsrs	r3, r3, #2
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fec:	4b37      	ldr	r3, [pc, #220]	; (80020cc <HAL_GPIO_Init+0x2e0>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002010:	4a2e      	ldr	r2, [pc, #184]	; (80020cc <HAL_GPIO_Init+0x2e0>)
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002016:	4b2d      	ldr	r3, [pc, #180]	; (80020cc <HAL_GPIO_Init+0x2e0>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	43db      	mvns	r3, r3
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4013      	ands	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800203a:	4a24      	ldr	r2, [pc, #144]	; (80020cc <HAL_GPIO_Init+0x2e0>)
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002040:	4b22      	ldr	r3, [pc, #136]	; (80020cc <HAL_GPIO_Init+0x2e0>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	43db      	mvns	r3, r3
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002064:	4a19      	ldr	r2, [pc, #100]	; (80020cc <HAL_GPIO_Init+0x2e0>)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800206a:	4b18      	ldr	r3, [pc, #96]	; (80020cc <HAL_GPIO_Init+0x2e0>)
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	43db      	mvns	r3, r3
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4013      	ands	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4313      	orrs	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800208e:	4a0f      	ldr	r2, [pc, #60]	; (80020cc <HAL_GPIO_Init+0x2e0>)
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	3301      	adds	r3, #1
 8002098:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	fa22 f303 	lsr.w	r3, r2, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f47f aea9 	bne.w	8001dfc <HAL_GPIO_Init+0x10>
  }
}
 80020aa:	bf00      	nop
 80020ac:	371c      	adds	r7, #28
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40010000 	.word	0x40010000
 80020c0:	48000400 	.word	0x48000400
 80020c4:	48000800 	.word	0x48000800
 80020c8:	48000c00 	.word	0x48000c00
 80020cc:	40010400 	.word	0x40010400

080020d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	807b      	strh	r3, [r7, #2]
 80020dc:	4613      	mov	r3, r2
 80020de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020e0:	787b      	ldrb	r3, [r7, #1]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020e6:	887a      	ldrh	r2, [r7, #2]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020ec:	e002      	b.n	80020f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020ee:	887a      	ldrh	r2, [r7, #2]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002106:	af00      	add	r7, sp, #0
 8002108:	1d3b      	adds	r3, r7, #4
 800210a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800210c:	1d3b      	adds	r3, r7, #4
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	f000 bef4 	b.w	8002f02 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 816a 	beq.w	80023fe <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800212a:	4bb3      	ldr	r3, [pc, #716]	; (80023f8 <HAL_RCC_OscConfig+0x2f8>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 030c 	and.w	r3, r3, #12
 8002132:	2b04      	cmp	r3, #4
 8002134:	d00c      	beq.n	8002150 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002136:	4bb0      	ldr	r3, [pc, #704]	; (80023f8 <HAL_RCC_OscConfig+0x2f8>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	2b08      	cmp	r3, #8
 8002140:	d159      	bne.n	80021f6 <HAL_RCC_OscConfig+0xf6>
 8002142:	4bad      	ldr	r3, [pc, #692]	; (80023f8 <HAL_RCC_OscConfig+0x2f8>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800214e:	d152      	bne.n	80021f6 <HAL_RCC_OscConfig+0xf6>
 8002150:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002154:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002158:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800215c:	fa93 f3a3 	rbit	r3, r3
 8002160:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002164:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002168:	fab3 f383 	clz	r3, r3
 800216c:	b2db      	uxtb	r3, r3
 800216e:	095b      	lsrs	r3, r3, #5
 8002170:	b2db      	uxtb	r3, r3
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b01      	cmp	r3, #1
 800217a:	d102      	bne.n	8002182 <HAL_RCC_OscConfig+0x82>
 800217c:	4b9e      	ldr	r3, [pc, #632]	; (80023f8 <HAL_RCC_OscConfig+0x2f8>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	e015      	b.n	80021ae <HAL_RCC_OscConfig+0xae>
 8002182:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002186:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800218e:	fa93 f3a3 	rbit	r3, r3
 8002192:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002196:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800219a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800219e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80021a2:	fa93 f3a3 	rbit	r3, r3
 80021a6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80021aa:	4b93      	ldr	r3, [pc, #588]	; (80023f8 <HAL_RCC_OscConfig+0x2f8>)
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021b2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80021b6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80021ba:	fa92 f2a2 	rbit	r2, r2
 80021be:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80021c2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80021c6:	fab2 f282 	clz	r2, r2
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	f042 0220 	orr.w	r2, r2, #32
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	f002 021f 	and.w	r2, r2, #31
 80021d6:	2101      	movs	r1, #1
 80021d8:	fa01 f202 	lsl.w	r2, r1, r2
 80021dc:	4013      	ands	r3, r2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 810c 	beq.w	80023fc <HAL_RCC_OscConfig+0x2fc>
 80021e4:	1d3b      	adds	r3, r7, #4
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f040 8106 	bne.w	80023fc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	f000 be86 	b.w	8002f02 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021f6:	1d3b      	adds	r3, r7, #4
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002200:	d106      	bne.n	8002210 <HAL_RCC_OscConfig+0x110>
 8002202:	4b7d      	ldr	r3, [pc, #500]	; (80023f8 <HAL_RCC_OscConfig+0x2f8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a7c      	ldr	r2, [pc, #496]	; (80023f8 <HAL_RCC_OscConfig+0x2f8>)
 8002208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	e030      	b.n	8002272 <HAL_RCC_OscConfig+0x172>
 8002210:	1d3b      	adds	r3, r7, #4
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10c      	bne.n	8002234 <HAL_RCC_OscConfig+0x134>
 800221a:	4b77      	ldr	r3, [pc, #476]	; (80023f8 <HAL_RCC_OscConfig+0x2f8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a76      	ldr	r2, [pc, #472]	; (80023f8 <HAL_RCC_OscConfig+0x2f8>)
 8002220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	4b74      	ldr	r3, [pc, #464]	; (80023f8 <HAL_RCC_OscConfig+0x2f8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a73      	ldr	r2, [pc, #460]	; (80023f8 <HAL_RCC_OscConfig+0x2f8>)
 800222c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	e01e      	b.n	8002272 <HAL_RCC_OscConfig+0x172>
 8002234:	1d3b      	adds	r3, r7, #4
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800223e:	d10c      	bne.n	800225a <HAL_RCC_OscConfig+0x15a>
 8002240:	4b6d      	ldr	r3, [pc, #436]	; (80023f8 <HAL_RCC_OscConfig+0x2f8>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a6c      	ldr	r2, [pc, #432]	; (80023f8 <HAL_RCC_OscConfig+0x2f8>)
 8002246:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	4b6a      	ldr	r3, [pc, #424]	; (80023f8 <HAL_RCC_OscConfig+0x2f8>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a69      	ldr	r2, [pc, #420]	; (80023f8 <HAL_RCC_OscConfig+0x2f8>)
 8002252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	e00b      	b.n	8002272 <HAL_RCC_OscConfig+0x172>
 800225a:	4b67      	ldr	r3, [pc, #412]	; (80023f8 <HAL_RCC_OscConfig+0x2f8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a66      	ldr	r2, [pc, #408]	; (80023f8 <HAL_RCC_OscConfig+0x2f8>)
 8002260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	4b64      	ldr	r3, [pc, #400]	; (80023f8 <HAL_RCC_OscConfig+0x2f8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a63      	ldr	r2, [pc, #396]	; (80023f8 <HAL_RCC_OscConfig+0x2f8>)
 800226c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002270:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002272:	4b61      	ldr	r3, [pc, #388]	; (80023f8 <HAL_RCC_OscConfig+0x2f8>)
 8002274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002276:	f023 020f 	bic.w	r2, r3, #15
 800227a:	1d3b      	adds	r3, r7, #4
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	495d      	ldr	r1, [pc, #372]	; (80023f8 <HAL_RCC_OscConfig+0x2f8>)
 8002282:	4313      	orrs	r3, r2
 8002284:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002286:	1d3b      	adds	r3, r7, #4
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d059      	beq.n	8002344 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7ff fb8c 	bl	80019ac <HAL_GetTick>
 8002294:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002298:	e00a      	b.n	80022b0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800229a:	f7ff fb87 	bl	80019ac <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	; 0x64
 80022a8:	d902      	bls.n	80022b0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	f000 be29 	b.w	8002f02 <HAL_RCC_OscConfig+0xe02>
 80022b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022b4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80022bc:	fa93 f3a3 	rbit	r3, r3
 80022c0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80022c4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c8:	fab3 f383 	clz	r3, r3
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d102      	bne.n	80022e2 <HAL_RCC_OscConfig+0x1e2>
 80022dc:	4b46      	ldr	r3, [pc, #280]	; (80023f8 <HAL_RCC_OscConfig+0x2f8>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	e015      	b.n	800230e <HAL_RCC_OscConfig+0x20e>
 80022e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022e6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80022ee:	fa93 f3a3 	rbit	r3, r3
 80022f2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80022f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022fa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80022fe:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800230a:	4b3b      	ldr	r3, [pc, #236]	; (80023f8 <HAL_RCC_OscConfig+0x2f8>)
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002312:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002316:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800231a:	fa92 f2a2 	rbit	r2, r2
 800231e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002322:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002326:	fab2 f282 	clz	r2, r2
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	f042 0220 	orr.w	r2, r2, #32
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	f002 021f 	and.w	r2, r2, #31
 8002336:	2101      	movs	r1, #1
 8002338:	fa01 f202 	lsl.w	r2, r1, r2
 800233c:	4013      	ands	r3, r2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0ab      	beq.n	800229a <HAL_RCC_OscConfig+0x19a>
 8002342:	e05c      	b.n	80023fe <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002344:	f7ff fb32 	bl	80019ac <HAL_GetTick>
 8002348:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234c:	e00a      	b.n	8002364 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800234e:	f7ff fb2d 	bl	80019ac <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	; 0x64
 800235c:	d902      	bls.n	8002364 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	f000 bdcf 	b.w	8002f02 <HAL_RCC_OscConfig+0xe02>
 8002364:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002368:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002370:	fa93 f3a3 	rbit	r3, r3
 8002374:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002378:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800237c:	fab3 f383 	clz	r3, r3
 8002380:	b2db      	uxtb	r3, r3
 8002382:	095b      	lsrs	r3, r3, #5
 8002384:	b2db      	uxtb	r3, r3
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b01      	cmp	r3, #1
 800238e:	d102      	bne.n	8002396 <HAL_RCC_OscConfig+0x296>
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <HAL_RCC_OscConfig+0x2f8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	e015      	b.n	80023c2 <HAL_RCC_OscConfig+0x2c2>
 8002396:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800239a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80023a2:	fa93 f3a3 	rbit	r3, r3
 80023a6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80023aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023ae:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80023b2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80023be:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <HAL_RCC_OscConfig+0x2f8>)
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023c6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80023ca:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80023ce:	fa92 f2a2 	rbit	r2, r2
 80023d2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80023d6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80023da:	fab2 f282 	clz	r2, r2
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	f042 0220 	orr.w	r2, r2, #32
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	f002 021f 	and.w	r2, r2, #31
 80023ea:	2101      	movs	r1, #1
 80023ec:	fa01 f202 	lsl.w	r2, r1, r2
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1ab      	bne.n	800234e <HAL_RCC_OscConfig+0x24e>
 80023f6:	e002      	b.n	80023fe <HAL_RCC_OscConfig+0x2fe>
 80023f8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023fe:	1d3b      	adds	r3, r7, #4
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 816f 	beq.w	80026ec <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800240e:	4bd0      	ldr	r3, [pc, #832]	; (8002750 <HAL_RCC_OscConfig+0x650>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00b      	beq.n	8002432 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800241a:	4bcd      	ldr	r3, [pc, #820]	; (8002750 <HAL_RCC_OscConfig+0x650>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 030c 	and.w	r3, r3, #12
 8002422:	2b08      	cmp	r3, #8
 8002424:	d16c      	bne.n	8002500 <HAL_RCC_OscConfig+0x400>
 8002426:	4bca      	ldr	r3, [pc, #808]	; (8002750 <HAL_RCC_OscConfig+0x650>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d166      	bne.n	8002500 <HAL_RCC_OscConfig+0x400>
 8002432:	2302      	movs	r3, #2
 8002434:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002444:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002448:	fab3 f383 	clz	r3, r3
 800244c:	b2db      	uxtb	r3, r3
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	b2db      	uxtb	r3, r3
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b01      	cmp	r3, #1
 800245a:	d102      	bne.n	8002462 <HAL_RCC_OscConfig+0x362>
 800245c:	4bbc      	ldr	r3, [pc, #752]	; (8002750 <HAL_RCC_OscConfig+0x650>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	e013      	b.n	800248a <HAL_RCC_OscConfig+0x38a>
 8002462:	2302      	movs	r3, #2
 8002464:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800246c:	fa93 f3a3 	rbit	r3, r3
 8002470:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002474:	2302      	movs	r3, #2
 8002476:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800247a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800247e:	fa93 f3a3 	rbit	r3, r3
 8002482:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002486:	4bb2      	ldr	r3, [pc, #712]	; (8002750 <HAL_RCC_OscConfig+0x650>)
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	2202      	movs	r2, #2
 800248c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002490:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002494:	fa92 f2a2 	rbit	r2, r2
 8002498:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800249c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80024a0:	fab2 f282 	clz	r2, r2
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	f042 0220 	orr.w	r2, r2, #32
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	f002 021f 	and.w	r2, r2, #31
 80024b0:	2101      	movs	r1, #1
 80024b2:	fa01 f202 	lsl.w	r2, r1, r2
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d007      	beq.n	80024cc <HAL_RCC_OscConfig+0x3cc>
 80024bc:	1d3b      	adds	r3, r7, #4
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d002      	beq.n	80024cc <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	f000 bd1b 	b.w	8002f02 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024cc:	4ba0      	ldr	r3, [pc, #640]	; (8002750 <HAL_RCC_OscConfig+0x650>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d4:	1d3b      	adds	r3, r7, #4
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	21f8      	movs	r1, #248	; 0xf8
 80024dc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80024e4:	fa91 f1a1 	rbit	r1, r1
 80024e8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80024ec:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80024f0:	fab1 f181 	clz	r1, r1
 80024f4:	b2c9      	uxtb	r1, r1
 80024f6:	408b      	lsls	r3, r1
 80024f8:	4995      	ldr	r1, [pc, #596]	; (8002750 <HAL_RCC_OscConfig+0x650>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fe:	e0f5      	b.n	80026ec <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002500:	1d3b      	adds	r3, r7, #4
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 8085 	beq.w	8002616 <HAL_RCC_OscConfig+0x516>
 800250c:	2301      	movs	r3, #1
 800250e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002516:	fa93 f3a3 	rbit	r3, r3
 800251a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800251e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002522:	fab3 f383 	clz	r3, r3
 8002526:	b2db      	uxtb	r3, r3
 8002528:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800252c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	461a      	mov	r2, r3
 8002534:	2301      	movs	r3, #1
 8002536:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002538:	f7ff fa38 	bl	80019ac <HAL_GetTick>
 800253c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002540:	e00a      	b.n	8002558 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002542:	f7ff fa33 	bl	80019ac <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d902      	bls.n	8002558 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	f000 bcd5 	b.w	8002f02 <HAL_RCC_OscConfig+0xe02>
 8002558:	2302      	movs	r3, #2
 800255a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002562:	fa93 f3a3 	rbit	r3, r3
 8002566:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800256a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256e:	fab3 f383 	clz	r3, r3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	095b      	lsrs	r3, r3, #5
 8002576:	b2db      	uxtb	r3, r3
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b01      	cmp	r3, #1
 8002580:	d102      	bne.n	8002588 <HAL_RCC_OscConfig+0x488>
 8002582:	4b73      	ldr	r3, [pc, #460]	; (8002750 <HAL_RCC_OscConfig+0x650>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	e013      	b.n	80025b0 <HAL_RCC_OscConfig+0x4b0>
 8002588:	2302      	movs	r3, #2
 800258a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002592:	fa93 f3a3 	rbit	r3, r3
 8002596:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800259a:	2302      	movs	r3, #2
 800259c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80025a0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80025a4:	fa93 f3a3 	rbit	r3, r3
 80025a8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80025ac:	4b68      	ldr	r3, [pc, #416]	; (8002750 <HAL_RCC_OscConfig+0x650>)
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	2202      	movs	r2, #2
 80025b2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80025b6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80025ba:	fa92 f2a2 	rbit	r2, r2
 80025be:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80025c2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80025c6:	fab2 f282 	clz	r2, r2
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	f042 0220 	orr.w	r2, r2, #32
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	f002 021f 	and.w	r2, r2, #31
 80025d6:	2101      	movs	r1, #1
 80025d8:	fa01 f202 	lsl.w	r2, r1, r2
 80025dc:	4013      	ands	r3, r2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0af      	beq.n	8002542 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e2:	4b5b      	ldr	r3, [pc, #364]	; (8002750 <HAL_RCC_OscConfig+0x650>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ea:	1d3b      	adds	r3, r7, #4
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	21f8      	movs	r1, #248	; 0xf8
 80025f2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80025fa:	fa91 f1a1 	rbit	r1, r1
 80025fe:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002602:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002606:	fab1 f181 	clz	r1, r1
 800260a:	b2c9      	uxtb	r1, r1
 800260c:	408b      	lsls	r3, r1
 800260e:	4950      	ldr	r1, [pc, #320]	; (8002750 <HAL_RCC_OscConfig+0x650>)
 8002610:	4313      	orrs	r3, r2
 8002612:	600b      	str	r3, [r1, #0]
 8002614:	e06a      	b.n	80026ec <HAL_RCC_OscConfig+0x5ec>
 8002616:	2301      	movs	r3, #1
 8002618:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002628:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800262c:	fab3 f383 	clz	r3, r3
 8002630:	b2db      	uxtb	r3, r3
 8002632:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002636:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	461a      	mov	r2, r3
 800263e:	2300      	movs	r3, #0
 8002640:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002642:	f7ff f9b3 	bl	80019ac <HAL_GetTick>
 8002646:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800264a:	e00a      	b.n	8002662 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800264c:	f7ff f9ae 	bl	80019ac <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d902      	bls.n	8002662 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	f000 bc50 	b.w	8002f02 <HAL_RCC_OscConfig+0xe02>
 8002662:	2302      	movs	r3, #2
 8002664:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800266c:	fa93 f3a3 	rbit	r3, r3
 8002670:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002674:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002678:	fab3 f383 	clz	r3, r3
 800267c:	b2db      	uxtb	r3, r3
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	b2db      	uxtb	r3, r3
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b01      	cmp	r3, #1
 800268a:	d102      	bne.n	8002692 <HAL_RCC_OscConfig+0x592>
 800268c:	4b30      	ldr	r3, [pc, #192]	; (8002750 <HAL_RCC_OscConfig+0x650>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	e013      	b.n	80026ba <HAL_RCC_OscConfig+0x5ba>
 8002692:	2302      	movs	r3, #2
 8002694:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002698:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800269c:	fa93 f3a3 	rbit	r3, r3
 80026a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80026a4:	2302      	movs	r3, #2
 80026a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80026aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80026ae:	fa93 f3a3 	rbit	r3, r3
 80026b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80026b6:	4b26      	ldr	r3, [pc, #152]	; (8002750 <HAL_RCC_OscConfig+0x650>)
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	2202      	movs	r2, #2
 80026bc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80026c0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80026c4:	fa92 f2a2 	rbit	r2, r2
 80026c8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80026cc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80026d0:	fab2 f282 	clz	r2, r2
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	f042 0220 	orr.w	r2, r2, #32
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	f002 021f 	and.w	r2, r2, #31
 80026e0:	2101      	movs	r1, #1
 80026e2:	fa01 f202 	lsl.w	r2, r1, r2
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1af      	bne.n	800264c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ec:	1d3b      	adds	r3, r7, #4
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 80da 	beq.w	80028b0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026fc:	1d3b      	adds	r3, r7, #4
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d069      	beq.n	80027da <HAL_RCC_OscConfig+0x6da>
 8002706:	2301      	movs	r3, #1
 8002708:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002710:	fa93 f3a3 	rbit	r3, r3
 8002714:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002718:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800271c:	fab3 f383 	clz	r3, r3
 8002720:	b2db      	uxtb	r3, r3
 8002722:	461a      	mov	r2, r3
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <HAL_RCC_OscConfig+0x654>)
 8002726:	4413      	add	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	461a      	mov	r2, r3
 800272c:	2301      	movs	r3, #1
 800272e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002730:	f7ff f93c 	bl	80019ac <HAL_GetTick>
 8002734:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002738:	e00e      	b.n	8002758 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800273a:	f7ff f937 	bl	80019ac <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d906      	bls.n	8002758 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e3d9      	b.n	8002f02 <HAL_RCC_OscConfig+0xe02>
 800274e:	bf00      	nop
 8002750:	40021000 	.word	0x40021000
 8002754:	10908120 	.word	0x10908120
 8002758:	2302      	movs	r3, #2
 800275a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002762:	fa93 f3a3 	rbit	r3, r3
 8002766:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800276a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800276e:	2202      	movs	r2, #2
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	fa93 f2a3 	rbit	r2, r3
 800277c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002786:	2202      	movs	r2, #2
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	fa93 f2a3 	rbit	r2, r3
 8002794:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002798:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279a:	4ba5      	ldr	r3, [pc, #660]	; (8002a30 <HAL_RCC_OscConfig+0x930>)
 800279c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800279e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80027a2:	2102      	movs	r1, #2
 80027a4:	6019      	str	r1, [r3, #0]
 80027a6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	fa93 f1a3 	rbit	r1, r3
 80027b0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80027b4:	6019      	str	r1, [r3, #0]
  return result;
 80027b6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	fab3 f383 	clz	r3, r3
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	f003 031f 	and.w	r3, r3, #31
 80027cc:	2101      	movs	r1, #1
 80027ce:	fa01 f303 	lsl.w	r3, r1, r3
 80027d2:	4013      	ands	r3, r2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0b0      	beq.n	800273a <HAL_RCC_OscConfig+0x63a>
 80027d8:	e06a      	b.n	80028b0 <HAL_RCC_OscConfig+0x7b0>
 80027da:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80027de:	2201      	movs	r2, #1
 80027e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	fa93 f2a3 	rbit	r2, r3
 80027ec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80027f0:	601a      	str	r2, [r3, #0]
  return result;
 80027f2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80027f6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f8:	fab3 f383 	clz	r3, r3
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	461a      	mov	r2, r3
 8002800:	4b8c      	ldr	r3, [pc, #560]	; (8002a34 <HAL_RCC_OscConfig+0x934>)
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	461a      	mov	r2, r3
 8002808:	2300      	movs	r3, #0
 800280a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280c:	f7ff f8ce 	bl	80019ac <HAL_GetTick>
 8002810:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002814:	e009      	b.n	800282a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002816:	f7ff f8c9 	bl	80019ac <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e36b      	b.n	8002f02 <HAL_RCC_OscConfig+0xe02>
 800282a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800282e:	2202      	movs	r2, #2
 8002830:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	fa93 f2a3 	rbit	r2, r3
 800283c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002846:	2202      	movs	r2, #2
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	fa93 f2a3 	rbit	r2, r3
 8002854:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800285e:	2202      	movs	r2, #2
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	fa93 f2a3 	rbit	r2, r3
 800286c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002870:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002872:	4b6f      	ldr	r3, [pc, #444]	; (8002a30 <HAL_RCC_OscConfig+0x930>)
 8002874:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002876:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800287a:	2102      	movs	r1, #2
 800287c:	6019      	str	r1, [r3, #0]
 800287e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	fa93 f1a3 	rbit	r1, r3
 8002888:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800288c:	6019      	str	r1, [r3, #0]
  return result;
 800288e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	fab3 f383 	clz	r3, r3
 8002898:	b2db      	uxtb	r3, r3
 800289a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	2101      	movs	r1, #1
 80028a6:	fa01 f303 	lsl.w	r3, r1, r3
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1b2      	bne.n	8002816 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028b0:	1d3b      	adds	r3, r7, #4
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 8158 	beq.w	8002b70 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028c0:	2300      	movs	r3, #0
 80028c2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028c6:	4b5a      	ldr	r3, [pc, #360]	; (8002a30 <HAL_RCC_OscConfig+0x930>)
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d112      	bne.n	80028f8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d2:	4b57      	ldr	r3, [pc, #348]	; (8002a30 <HAL_RCC_OscConfig+0x930>)
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	4a56      	ldr	r2, [pc, #344]	; (8002a30 <HAL_RCC_OscConfig+0x930>)
 80028d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028dc:	61d3      	str	r3, [r2, #28]
 80028de:	4b54      	ldr	r3, [pc, #336]	; (8002a30 <HAL_RCC_OscConfig+0x930>)
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80028e6:	f107 0308 	add.w	r3, r7, #8
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	f107 0308 	add.w	r3, r7, #8
 80028f0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80028f2:	2301      	movs	r3, #1
 80028f4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f8:	4b4f      	ldr	r3, [pc, #316]	; (8002a38 <HAL_RCC_OscConfig+0x938>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002900:	2b00      	cmp	r3, #0
 8002902:	d11a      	bne.n	800293a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002904:	4b4c      	ldr	r3, [pc, #304]	; (8002a38 <HAL_RCC_OscConfig+0x938>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a4b      	ldr	r2, [pc, #300]	; (8002a38 <HAL_RCC_OscConfig+0x938>)
 800290a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800290e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002910:	f7ff f84c 	bl	80019ac <HAL_GetTick>
 8002914:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002918:	e009      	b.n	800292e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800291a:	f7ff f847 	bl	80019ac <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b64      	cmp	r3, #100	; 0x64
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e2e9      	b.n	8002f02 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292e:	4b42      	ldr	r3, [pc, #264]	; (8002a38 <HAL_RCC_OscConfig+0x938>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0ef      	beq.n	800291a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800293a:	1d3b      	adds	r3, r7, #4
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d106      	bne.n	8002952 <HAL_RCC_OscConfig+0x852>
 8002944:	4b3a      	ldr	r3, [pc, #232]	; (8002a30 <HAL_RCC_OscConfig+0x930>)
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	4a39      	ldr	r2, [pc, #228]	; (8002a30 <HAL_RCC_OscConfig+0x930>)
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	6213      	str	r3, [r2, #32]
 8002950:	e02f      	b.n	80029b2 <HAL_RCC_OscConfig+0x8b2>
 8002952:	1d3b      	adds	r3, r7, #4
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10c      	bne.n	8002976 <HAL_RCC_OscConfig+0x876>
 800295c:	4b34      	ldr	r3, [pc, #208]	; (8002a30 <HAL_RCC_OscConfig+0x930>)
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	4a33      	ldr	r2, [pc, #204]	; (8002a30 <HAL_RCC_OscConfig+0x930>)
 8002962:	f023 0301 	bic.w	r3, r3, #1
 8002966:	6213      	str	r3, [r2, #32]
 8002968:	4b31      	ldr	r3, [pc, #196]	; (8002a30 <HAL_RCC_OscConfig+0x930>)
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	4a30      	ldr	r2, [pc, #192]	; (8002a30 <HAL_RCC_OscConfig+0x930>)
 800296e:	f023 0304 	bic.w	r3, r3, #4
 8002972:	6213      	str	r3, [r2, #32]
 8002974:	e01d      	b.n	80029b2 <HAL_RCC_OscConfig+0x8b2>
 8002976:	1d3b      	adds	r3, r7, #4
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	2b05      	cmp	r3, #5
 800297e:	d10c      	bne.n	800299a <HAL_RCC_OscConfig+0x89a>
 8002980:	4b2b      	ldr	r3, [pc, #172]	; (8002a30 <HAL_RCC_OscConfig+0x930>)
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	4a2a      	ldr	r2, [pc, #168]	; (8002a30 <HAL_RCC_OscConfig+0x930>)
 8002986:	f043 0304 	orr.w	r3, r3, #4
 800298a:	6213      	str	r3, [r2, #32]
 800298c:	4b28      	ldr	r3, [pc, #160]	; (8002a30 <HAL_RCC_OscConfig+0x930>)
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	4a27      	ldr	r2, [pc, #156]	; (8002a30 <HAL_RCC_OscConfig+0x930>)
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	6213      	str	r3, [r2, #32]
 8002998:	e00b      	b.n	80029b2 <HAL_RCC_OscConfig+0x8b2>
 800299a:	4b25      	ldr	r3, [pc, #148]	; (8002a30 <HAL_RCC_OscConfig+0x930>)
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	4a24      	ldr	r2, [pc, #144]	; (8002a30 <HAL_RCC_OscConfig+0x930>)
 80029a0:	f023 0301 	bic.w	r3, r3, #1
 80029a4:	6213      	str	r3, [r2, #32]
 80029a6:	4b22      	ldr	r3, [pc, #136]	; (8002a30 <HAL_RCC_OscConfig+0x930>)
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	4a21      	ldr	r2, [pc, #132]	; (8002a30 <HAL_RCC_OscConfig+0x930>)
 80029ac:	f023 0304 	bic.w	r3, r3, #4
 80029b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029b2:	1d3b      	adds	r3, r7, #4
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d06b      	beq.n	8002a94 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029bc:	f7fe fff6 	bl	80019ac <HAL_GetTick>
 80029c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c4:	e00b      	b.n	80029de <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029c6:	f7fe fff1 	bl	80019ac <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e291      	b.n	8002f02 <HAL_RCC_OscConfig+0xe02>
 80029de:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80029e2:	2202      	movs	r2, #2
 80029e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	fa93 f2a3 	rbit	r2, r3
 80029f0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80029fa:	2202      	movs	r2, #2
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	fa93 f2a3 	rbit	r2, r3
 8002a08:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002a0c:	601a      	str	r2, [r3, #0]
  return result;
 8002a0e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002a12:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a14:	fab3 f383 	clz	r3, r3
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	095b      	lsrs	r3, r3, #5
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	f043 0302 	orr.w	r3, r3, #2
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d109      	bne.n	8002a3c <HAL_RCC_OscConfig+0x93c>
 8002a28:	4b01      	ldr	r3, [pc, #4]	; (8002a30 <HAL_RCC_OscConfig+0x930>)
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	e014      	b.n	8002a58 <HAL_RCC_OscConfig+0x958>
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000
 8002a34:	10908120 	.word	0x10908120
 8002a38:	40007000 	.word	0x40007000
 8002a3c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002a40:	2202      	movs	r2, #2
 8002a42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	fa93 f2a3 	rbit	r2, r3
 8002a4e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	4bbb      	ldr	r3, [pc, #748]	; (8002d44 <HAL_RCC_OscConfig+0xc44>)
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002a5c:	2102      	movs	r1, #2
 8002a5e:	6011      	str	r1, [r2, #0]
 8002a60:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002a64:	6812      	ldr	r2, [r2, #0]
 8002a66:	fa92 f1a2 	rbit	r1, r2
 8002a6a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002a6e:	6011      	str	r1, [r2, #0]
  return result;
 8002a70:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002a74:	6812      	ldr	r2, [r2, #0]
 8002a76:	fab2 f282 	clz	r2, r2
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	f002 021f 	and.w	r2, r2, #31
 8002a86:	2101      	movs	r1, #1
 8002a88:	fa01 f202 	lsl.w	r2, r1, r2
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d099      	beq.n	80029c6 <HAL_RCC_OscConfig+0x8c6>
 8002a92:	e063      	b.n	8002b5c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a94:	f7fe ff8a 	bl	80019ac <HAL_GetTick>
 8002a98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a9c:	e00b      	b.n	8002ab6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a9e:	f7fe ff85 	bl	80019ac <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e225      	b.n	8002f02 <HAL_RCC_OscConfig+0xe02>
 8002ab6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002aba:	2202      	movs	r2, #2
 8002abc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	fa93 f2a3 	rbit	r2, r3
 8002ac8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	fa93 f2a3 	rbit	r2, r3
 8002ae0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002ae4:	601a      	str	r2, [r3, #0]
  return result;
 8002ae6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002aea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aec:	fab3 f383 	clz	r3, r3
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	f043 0302 	orr.w	r3, r3, #2
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d102      	bne.n	8002b06 <HAL_RCC_OscConfig+0xa06>
 8002b00:	4b90      	ldr	r3, [pc, #576]	; (8002d44 <HAL_RCC_OscConfig+0xc44>)
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	e00d      	b.n	8002b22 <HAL_RCC_OscConfig+0xa22>
 8002b06:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	fa93 f2a3 	rbit	r2, r3
 8002b18:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	4b89      	ldr	r3, [pc, #548]	; (8002d44 <HAL_RCC_OscConfig+0xc44>)
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002b26:	2102      	movs	r1, #2
 8002b28:	6011      	str	r1, [r2, #0]
 8002b2a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002b2e:	6812      	ldr	r2, [r2, #0]
 8002b30:	fa92 f1a2 	rbit	r1, r2
 8002b34:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002b38:	6011      	str	r1, [r2, #0]
  return result;
 8002b3a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	fab2 f282 	clz	r2, r2
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	f002 021f 	and.w	r2, r2, #31
 8002b50:	2101      	movs	r1, #1
 8002b52:	fa01 f202 	lsl.w	r2, r1, r2
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1a0      	bne.n	8002a9e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b5c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d105      	bne.n	8002b70 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b64:	4b77      	ldr	r3, [pc, #476]	; (8002d44 <HAL_RCC_OscConfig+0xc44>)
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	4a76      	ldr	r2, [pc, #472]	; (8002d44 <HAL_RCC_OscConfig+0xc44>)
 8002b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b70:	1d3b      	adds	r3, r7, #4
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 81c2 	beq.w	8002f00 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b7c:	4b71      	ldr	r3, [pc, #452]	; (8002d44 <HAL_RCC_OscConfig+0xc44>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 030c 	and.w	r3, r3, #12
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	f000 819c 	beq.w	8002ec2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b8a:	1d3b      	adds	r3, r7, #4
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	f040 8114 	bne.w	8002dbe <HAL_RCC_OscConfig+0xcbe>
 8002b96:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002b9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	fa93 f2a3 	rbit	r2, r3
 8002baa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002bae:	601a      	str	r2, [r3, #0]
  return result;
 8002bb0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002bb4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb6:	fab3 f383 	clz	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	2300      	movs	r3, #0
 8002bca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bcc:	f7fe feee 	bl	80019ac <HAL_GetTick>
 8002bd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bd4:	e009      	b.n	8002bea <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd6:	f7fe fee9 	bl	80019ac <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e18b      	b.n	8002f02 <HAL_RCC_OscConfig+0xe02>
 8002bea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002bee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	fa93 f2a3 	rbit	r2, r3
 8002bfe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002c02:	601a      	str	r2, [r3, #0]
  return result;
 8002c04:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002c08:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c0a:	fab3 f383 	clz	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	095b      	lsrs	r3, r3, #5
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d102      	bne.n	8002c24 <HAL_RCC_OscConfig+0xb24>
 8002c1e:	4b49      	ldr	r3, [pc, #292]	; (8002d44 <HAL_RCC_OscConfig+0xc44>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	e01b      	b.n	8002c5c <HAL_RCC_OscConfig+0xb5c>
 8002c24:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002c28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	fa93 f2a3 	rbit	r2, r3
 8002c38:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002c42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	fa93 f2a3 	rbit	r2, r3
 8002c52:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	4b3a      	ldr	r3, [pc, #232]	; (8002d44 <HAL_RCC_OscConfig+0xc44>)
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002c60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c64:	6011      	str	r1, [r2, #0]
 8002c66:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	fa92 f1a2 	rbit	r1, r2
 8002c70:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002c74:	6011      	str	r1, [r2, #0]
  return result;
 8002c76:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	fab2 f282 	clz	r2, r2
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	f042 0220 	orr.w	r2, r2, #32
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	f002 021f 	and.w	r2, r2, #31
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c92:	4013      	ands	r3, r2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d19e      	bne.n	8002bd6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c98:	4b2a      	ldr	r3, [pc, #168]	; (8002d44 <HAL_RCC_OscConfig+0xc44>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ca0:	1d3b      	adds	r3, r7, #4
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ca6:	1d3b      	adds	r3, r7, #4
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	430b      	orrs	r3, r1
 8002cae:	4925      	ldr	r1, [pc, #148]	; (8002d44 <HAL_RCC_OscConfig+0xc44>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	604b      	str	r3, [r1, #4]
 8002cb4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002cb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	fa93 f2a3 	rbit	r2, r3
 8002cc8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ccc:	601a      	str	r2, [r3, #0]
  return result;
 8002cce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002cd2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cd4:	fab3 f383 	clz	r3, r3
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cde:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cea:	f7fe fe5f 	bl	80019ac <HAL_GetTick>
 8002cee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cf2:	e009      	b.n	8002d08 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf4:	f7fe fe5a 	bl	80019ac <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e0fc      	b.n	8002f02 <HAL_RCC_OscConfig+0xe02>
 8002d08:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	fa93 f2a3 	rbit	r2, r3
 8002d1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d20:	601a      	str	r2, [r3, #0]
  return result;
 8002d22:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d26:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d28:	fab3 f383 	clz	r3, r3
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d105      	bne.n	8002d48 <HAL_RCC_OscConfig+0xc48>
 8002d3c:	4b01      	ldr	r3, [pc, #4]	; (8002d44 <HAL_RCC_OscConfig+0xc44>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	e01e      	b.n	8002d80 <HAL_RCC_OscConfig+0xc80>
 8002d42:	bf00      	nop
 8002d44:	40021000 	.word	0x40021000
 8002d48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	fa93 f2a3 	rbit	r2, r3
 8002d5c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	fa93 f2a3 	rbit	r2, r3
 8002d76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	4b63      	ldr	r3, [pc, #396]	; (8002f0c <HAL_RCC_OscConfig+0xe0c>)
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d84:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d88:	6011      	str	r1, [r2, #0]
 8002d8a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	fa92 f1a2 	rbit	r1, r2
 8002d94:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002d98:	6011      	str	r1, [r2, #0]
  return result;
 8002d9a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002d9e:	6812      	ldr	r2, [r2, #0]
 8002da0:	fab2 f282 	clz	r2, r2
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	f042 0220 	orr.w	r2, r2, #32
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	f002 021f 	and.w	r2, r2, #31
 8002db0:	2101      	movs	r1, #1
 8002db2:	fa01 f202 	lsl.w	r2, r1, r2
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d09b      	beq.n	8002cf4 <HAL_RCC_OscConfig+0xbf4>
 8002dbc:	e0a0      	b.n	8002f00 <HAL_RCC_OscConfig+0xe00>
 8002dbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002dc2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002dc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	fa93 f2a3 	rbit	r2, r3
 8002dd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dd6:	601a      	str	r2, [r3, #0]
  return result;
 8002dd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ddc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dde:	fab3 f383 	clz	r3, r3
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002de8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	461a      	mov	r2, r3
 8002df0:	2300      	movs	r3, #0
 8002df2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df4:	f7fe fdda 	bl	80019ac <HAL_GetTick>
 8002df8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dfc:	e009      	b.n	8002e12 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dfe:	f7fe fdd5 	bl	80019ac <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e077      	b.n	8002f02 <HAL_RCC_OscConfig+0xe02>
 8002e12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	fa93 f2a3 	rbit	r2, r3
 8002e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e2a:	601a      	str	r2, [r3, #0]
  return result;
 8002e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e32:	fab3 f383 	clz	r3, r3
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	095b      	lsrs	r3, r3, #5
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d102      	bne.n	8002e4c <HAL_RCC_OscConfig+0xd4c>
 8002e46:	4b31      	ldr	r3, [pc, #196]	; (8002f0c <HAL_RCC_OscConfig+0xe0c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	e01b      	b.n	8002e84 <HAL_RCC_OscConfig+0xd84>
 8002e4c:	f107 0320 	add.w	r3, r7, #32
 8002e50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	f107 0320 	add.w	r3, r7, #32
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	fa93 f2a3 	rbit	r2, r3
 8002e60:	f107 031c 	add.w	r3, r7, #28
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	f107 0318 	add.w	r3, r7, #24
 8002e6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	f107 0318 	add.w	r3, r7, #24
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	fa93 f2a3 	rbit	r2, r3
 8002e7a:	f107 0314 	add.w	r3, r7, #20
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	4b22      	ldr	r3, [pc, #136]	; (8002f0c <HAL_RCC_OscConfig+0xe0c>)
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	f107 0210 	add.w	r2, r7, #16
 8002e88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e8c:	6011      	str	r1, [r2, #0]
 8002e8e:	f107 0210 	add.w	r2, r7, #16
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	fa92 f1a2 	rbit	r1, r2
 8002e98:	f107 020c 	add.w	r2, r7, #12
 8002e9c:	6011      	str	r1, [r2, #0]
  return result;
 8002e9e:	f107 020c 	add.w	r2, r7, #12
 8002ea2:	6812      	ldr	r2, [r2, #0]
 8002ea4:	fab2 f282 	clz	r2, r2
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	f042 0220 	orr.w	r2, r2, #32
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	f002 021f 	and.w	r2, r2, #31
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eba:	4013      	ands	r3, r2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d19e      	bne.n	8002dfe <HAL_RCC_OscConfig+0xcfe>
 8002ec0:	e01e      	b.n	8002f00 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ec2:	1d3b      	adds	r3, r7, #4
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e018      	b.n	8002f02 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ed0:	4b0e      	ldr	r3, [pc, #56]	; (8002f0c <HAL_RCC_OscConfig+0xe0c>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ed8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002edc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ee0:	1d3b      	adds	r3, r7, #4
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d108      	bne.n	8002efc <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002eea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002eee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ef2:	1d3b      	adds	r3, r7, #4
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d001      	beq.n	8002f00 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40021000 	.word	0x40021000

08002f10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b09e      	sub	sp, #120	; 0x78
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e162      	b.n	80031ee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f28:	4b90      	ldr	r3, [pc, #576]	; (800316c <HAL_RCC_ClockConfig+0x25c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d910      	bls.n	8002f58 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f36:	4b8d      	ldr	r3, [pc, #564]	; (800316c <HAL_RCC_ClockConfig+0x25c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f023 0207 	bic.w	r2, r3, #7
 8002f3e:	498b      	ldr	r1, [pc, #556]	; (800316c <HAL_RCC_ClockConfig+0x25c>)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f46:	4b89      	ldr	r3, [pc, #548]	; (800316c <HAL_RCC_ClockConfig+0x25c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d001      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e14a      	b.n	80031ee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d008      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f64:	4b82      	ldr	r3, [pc, #520]	; (8003170 <HAL_RCC_ClockConfig+0x260>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	497f      	ldr	r1, [pc, #508]	; (8003170 <HAL_RCC_ClockConfig+0x260>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 80dc 	beq.w	800313c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d13c      	bne.n	8003006 <HAL_RCC_ClockConfig+0xf6>
 8002f8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f90:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f94:	fa93 f3a3 	rbit	r3, r3
 8002f98:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9c:	fab3 f383 	clz	r3, r3
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	f043 0301 	orr.w	r3, r3, #1
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d102      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xa6>
 8002fb0:	4b6f      	ldr	r3, [pc, #444]	; (8003170 <HAL_RCC_ClockConfig+0x260>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	e00f      	b.n	8002fd6 <HAL_RCC_ClockConfig+0xc6>
 8002fb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fbe:	fa93 f3a3 	rbit	r3, r3
 8002fc2:	667b      	str	r3, [r7, #100]	; 0x64
 8002fc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fc8:	663b      	str	r3, [r7, #96]	; 0x60
 8002fca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fcc:	fa93 f3a3 	rbit	r3, r3
 8002fd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fd2:	4b67      	ldr	r3, [pc, #412]	; (8003170 <HAL_RCC_ClockConfig+0x260>)
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fda:	65ba      	str	r2, [r7, #88]	; 0x58
 8002fdc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fde:	fa92 f2a2 	rbit	r2, r2
 8002fe2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002fe4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002fe6:	fab2 f282 	clz	r2, r2
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	f042 0220 	orr.w	r2, r2, #32
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	f002 021f 	and.w	r2, r2, #31
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d17b      	bne.n	80030fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e0f3      	b.n	80031ee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d13c      	bne.n	8003088 <HAL_RCC_ClockConfig+0x178>
 800300e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003012:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003016:	fa93 f3a3 	rbit	r3, r3
 800301a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800301c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800301e:	fab3 f383 	clz	r3, r3
 8003022:	b2db      	uxtb	r3, r3
 8003024:	095b      	lsrs	r3, r3, #5
 8003026:	b2db      	uxtb	r3, r3
 8003028:	f043 0301 	orr.w	r3, r3, #1
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b01      	cmp	r3, #1
 8003030:	d102      	bne.n	8003038 <HAL_RCC_ClockConfig+0x128>
 8003032:	4b4f      	ldr	r3, [pc, #316]	; (8003170 <HAL_RCC_ClockConfig+0x260>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	e00f      	b.n	8003058 <HAL_RCC_ClockConfig+0x148>
 8003038:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800303c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003040:	fa93 f3a3 	rbit	r3, r3
 8003044:	647b      	str	r3, [r7, #68]	; 0x44
 8003046:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800304a:	643b      	str	r3, [r7, #64]	; 0x40
 800304c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800304e:	fa93 f3a3 	rbit	r3, r3
 8003052:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003054:	4b46      	ldr	r3, [pc, #280]	; (8003170 <HAL_RCC_ClockConfig+0x260>)
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800305c:	63ba      	str	r2, [r7, #56]	; 0x38
 800305e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003060:	fa92 f2a2 	rbit	r2, r2
 8003064:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003066:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003068:	fab2 f282 	clz	r2, r2
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	f042 0220 	orr.w	r2, r2, #32
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	f002 021f 	and.w	r2, r2, #31
 8003078:	2101      	movs	r1, #1
 800307a:	fa01 f202 	lsl.w	r2, r1, r2
 800307e:	4013      	ands	r3, r2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d13a      	bne.n	80030fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0b2      	b.n	80031ee <HAL_RCC_ClockConfig+0x2de>
 8003088:	2302      	movs	r3, #2
 800308a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308e:	fa93 f3a3 	rbit	r3, r3
 8003092:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003096:	fab3 f383 	clz	r3, r3
 800309a:	b2db      	uxtb	r3, r3
 800309c:	095b      	lsrs	r3, r3, #5
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d102      	bne.n	80030b0 <HAL_RCC_ClockConfig+0x1a0>
 80030aa:	4b31      	ldr	r3, [pc, #196]	; (8003170 <HAL_RCC_ClockConfig+0x260>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	e00d      	b.n	80030cc <HAL_RCC_ClockConfig+0x1bc>
 80030b0:	2302      	movs	r3, #2
 80030b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b6:	fa93 f3a3 	rbit	r3, r3
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
 80030bc:	2302      	movs	r3, #2
 80030be:	623b      	str	r3, [r7, #32]
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	fa93 f3a3 	rbit	r3, r3
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	4b29      	ldr	r3, [pc, #164]	; (8003170 <HAL_RCC_ClockConfig+0x260>)
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	2202      	movs	r2, #2
 80030ce:	61ba      	str	r2, [r7, #24]
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	fa92 f2a2 	rbit	r2, r2
 80030d6:	617a      	str	r2, [r7, #20]
  return result;
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	fab2 f282 	clz	r2, r2
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	f042 0220 	orr.w	r2, r2, #32
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	f002 021f 	and.w	r2, r2, #31
 80030ea:	2101      	movs	r1, #1
 80030ec:	fa01 f202 	lsl.w	r2, r1, r2
 80030f0:	4013      	ands	r3, r2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e079      	b.n	80031ee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030fa:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <HAL_RCC_ClockConfig+0x260>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f023 0203 	bic.w	r2, r3, #3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	491a      	ldr	r1, [pc, #104]	; (8003170 <HAL_RCC_ClockConfig+0x260>)
 8003108:	4313      	orrs	r3, r2
 800310a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800310c:	f7fe fc4e 	bl	80019ac <HAL_GetTick>
 8003110:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003112:	e00a      	b.n	800312a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003114:	f7fe fc4a 	bl	80019ac <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003122:	4293      	cmp	r3, r2
 8003124:	d901      	bls.n	800312a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e061      	b.n	80031ee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312a:	4b11      	ldr	r3, [pc, #68]	; (8003170 <HAL_RCC_ClockConfig+0x260>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 020c 	and.w	r2, r3, #12
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	429a      	cmp	r2, r3
 800313a:	d1eb      	bne.n	8003114 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800313c:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_RCC_ClockConfig+0x25c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d214      	bcs.n	8003174 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314a:	4b08      	ldr	r3, [pc, #32]	; (800316c <HAL_RCC_ClockConfig+0x25c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f023 0207 	bic.w	r2, r3, #7
 8003152:	4906      	ldr	r1, [pc, #24]	; (800316c <HAL_RCC_ClockConfig+0x25c>)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	4313      	orrs	r3, r2
 8003158:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800315a:	4b04      	ldr	r3, [pc, #16]	; (800316c <HAL_RCC_ClockConfig+0x25c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	d005      	beq.n	8003174 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e040      	b.n	80031ee <HAL_RCC_ClockConfig+0x2de>
 800316c:	40022000 	.word	0x40022000
 8003170:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	d008      	beq.n	8003192 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003180:	4b1d      	ldr	r3, [pc, #116]	; (80031f8 <HAL_RCC_ClockConfig+0x2e8>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	491a      	ldr	r1, [pc, #104]	; (80031f8 <HAL_RCC_ClockConfig+0x2e8>)
 800318e:	4313      	orrs	r3, r2
 8003190:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d009      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800319e:	4b16      	ldr	r3, [pc, #88]	; (80031f8 <HAL_RCC_ClockConfig+0x2e8>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	4912      	ldr	r1, [pc, #72]	; (80031f8 <HAL_RCC_ClockConfig+0x2e8>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80031b2:	f000 f829 	bl	8003208 <HAL_RCC_GetSysClockFreq>
 80031b6:	4601      	mov	r1, r0
 80031b8:	4b0f      	ldr	r3, [pc, #60]	; (80031f8 <HAL_RCC_ClockConfig+0x2e8>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031c0:	22f0      	movs	r2, #240	; 0xf0
 80031c2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	fa92 f2a2 	rbit	r2, r2
 80031ca:	60fa      	str	r2, [r7, #12]
  return result;
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	fab2 f282 	clz	r2, r2
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	40d3      	lsrs	r3, r2
 80031d6:	4a09      	ldr	r2, [pc, #36]	; (80031fc <HAL_RCC_ClockConfig+0x2ec>)
 80031d8:	5cd3      	ldrb	r3, [r2, r3]
 80031da:	fa21 f303 	lsr.w	r3, r1, r3
 80031de:	4a08      	ldr	r2, [pc, #32]	; (8003200 <HAL_RCC_ClockConfig+0x2f0>)
 80031e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80031e2:	4b08      	ldr	r3, [pc, #32]	; (8003204 <HAL_RCC_ClockConfig+0x2f4>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fe fb9c 	bl	8001924 <HAL_InitTick>
  
  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3778      	adds	r7, #120	; 0x78
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40021000 	.word	0x40021000
 80031fc:	08004b44 	.word	0x08004b44
 8003200:	200001fc 	.word	0x200001fc
 8003204:	20000400 	.word	0x20000400

08003208 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003208:	b480      	push	{r7}
 800320a:	b08b      	sub	sp, #44	; 0x2c
 800320c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800320e:	2300      	movs	r3, #0
 8003210:	61fb      	str	r3, [r7, #28]
 8003212:	2300      	movs	r3, #0
 8003214:	61bb      	str	r3, [r7, #24]
 8003216:	2300      	movs	r3, #0
 8003218:	627b      	str	r3, [r7, #36]	; 0x24
 800321a:	2300      	movs	r3, #0
 800321c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003222:	4b29      	ldr	r3, [pc, #164]	; (80032c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f003 030c 	and.w	r3, r3, #12
 800322e:	2b04      	cmp	r3, #4
 8003230:	d002      	beq.n	8003238 <HAL_RCC_GetSysClockFreq+0x30>
 8003232:	2b08      	cmp	r3, #8
 8003234:	d003      	beq.n	800323e <HAL_RCC_GetSysClockFreq+0x36>
 8003236:	e03c      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003238:	4b24      	ldr	r3, [pc, #144]	; (80032cc <HAL_RCC_GetSysClockFreq+0xc4>)
 800323a:	623b      	str	r3, [r7, #32]
      break;
 800323c:	e03c      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003244:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003248:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	fa92 f2a2 	rbit	r2, r2
 8003250:	607a      	str	r2, [r7, #4]
  return result;
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	fab2 f282 	clz	r2, r2
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	40d3      	lsrs	r3, r2
 800325c:	4a1c      	ldr	r2, [pc, #112]	; (80032d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800325e:	5cd3      	ldrb	r3, [r2, r3]
 8003260:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003262:	4b19      	ldr	r3, [pc, #100]	; (80032c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	220f      	movs	r2, #15
 800326c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	fa92 f2a2 	rbit	r2, r2
 8003274:	60fa      	str	r2, [r7, #12]
  return result;
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	fab2 f282 	clz	r2, r2
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	40d3      	lsrs	r3, r2
 8003280:	4a14      	ldr	r2, [pc, #80]	; (80032d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003282:	5cd3      	ldrb	r3, [r2, r3]
 8003284:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d008      	beq.n	80032a2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003290:	4a0e      	ldr	r2, [pc, #56]	; (80032cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	fbb2 f2f3 	udiv	r2, r2, r3
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	fb02 f303 	mul.w	r3, r2, r3
 800329e:	627b      	str	r3, [r7, #36]	; 0x24
 80032a0:	e004      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	4a0c      	ldr	r2, [pc, #48]	; (80032d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80032a6:	fb02 f303 	mul.w	r3, r2, r3
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	623b      	str	r3, [r7, #32]
      break;
 80032b0:	e002      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032b2:	4b06      	ldr	r3, [pc, #24]	; (80032cc <HAL_RCC_GetSysClockFreq+0xc4>)
 80032b4:	623b      	str	r3, [r7, #32]
      break;
 80032b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032b8:	6a3b      	ldr	r3, [r7, #32]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	372c      	adds	r7, #44	; 0x2c
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40021000 	.word	0x40021000
 80032cc:	007a1200 	.word	0x007a1200
 80032d0:	08004b5c 	.word	0x08004b5c
 80032d4:	08004b6c 	.word	0x08004b6c
 80032d8:	003d0900 	.word	0x003d0900

080032dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032e0:	4b03      	ldr	r3, [pc, #12]	; (80032f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032e2:	681b      	ldr	r3, [r3, #0]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	200001fc 	.word	0x200001fc

080032f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80032fa:	f7ff ffef 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 80032fe:	4601      	mov	r1, r0
 8003300:	4b0b      	ldr	r3, [pc, #44]	; (8003330 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003308:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800330c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	fa92 f2a2 	rbit	r2, r2
 8003314:	603a      	str	r2, [r7, #0]
  return result;
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	fab2 f282 	clz	r2, r2
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	40d3      	lsrs	r3, r2
 8003320:	4a04      	ldr	r2, [pc, #16]	; (8003334 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003322:	5cd3      	ldrb	r3, [r2, r3]
 8003324:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003328:	4618      	mov	r0, r3
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40021000 	.word	0x40021000
 8003334:	08004b54 	.word	0x08004b54

08003338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800333e:	f7ff ffcd 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 8003342:	4601      	mov	r1, r0
 8003344:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800334c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003350:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	fa92 f2a2 	rbit	r2, r2
 8003358:	603a      	str	r2, [r7, #0]
  return result;
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	fab2 f282 	clz	r2, r2
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	40d3      	lsrs	r3, r2
 8003364:	4a04      	ldr	r2, [pc, #16]	; (8003378 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003366:	5cd3      	ldrb	r3, [r2, r3]
 8003368:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800336c:	4618      	mov	r0, r3
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40021000 	.word	0x40021000
 8003378:	08004b54 	.word	0x08004b54

0800337c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b092      	sub	sp, #72	; 0x48
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 80d7 	beq.w	8003548 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800339a:	2300      	movs	r3, #0
 800339c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a0:	4b4e      	ldr	r3, [pc, #312]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10e      	bne.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ac:	4b4b      	ldr	r3, [pc, #300]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	4a4a      	ldr	r2, [pc, #296]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b6:	61d3      	str	r3, [r2, #28]
 80033b8:	4b48      	ldr	r3, [pc, #288]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c4:	2301      	movs	r3, #1
 80033c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ca:	4b45      	ldr	r3, [pc, #276]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d118      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033d6:	4b42      	ldr	r3, [pc, #264]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a41      	ldr	r2, [pc, #260]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e2:	f7fe fae3 	bl	80019ac <HAL_GetTick>
 80033e6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e8:	e008      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ea:	f7fe fadf 	bl	80019ac <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b64      	cmp	r3, #100	; 0x64
 80033f6:	d901      	bls.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e14b      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fc:	4b38      	ldr	r3, [pc, #224]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003408:	4b34      	ldr	r3, [pc, #208]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003410:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 8084 	beq.w	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003422:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003424:	429a      	cmp	r2, r3
 8003426:	d07c      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003428:	4b2c      	ldr	r3, [pc, #176]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003430:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003432:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003436:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343a:	fa93 f3a3 	rbit	r3, r3
 800343e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003442:	fab3 f383 	clz	r3, r3
 8003446:	b2db      	uxtb	r3, r3
 8003448:	461a      	mov	r2, r3
 800344a:	4b26      	ldr	r3, [pc, #152]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800344c:	4413      	add	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	461a      	mov	r2, r3
 8003452:	2301      	movs	r3, #1
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800345a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345e:	fa93 f3a3 	rbit	r3, r3
 8003462:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003466:	fab3 f383 	clz	r3, r3
 800346a:	b2db      	uxtb	r3, r3
 800346c:	461a      	mov	r2, r3
 800346e:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003470:	4413      	add	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	461a      	mov	r2, r3
 8003476:	2300      	movs	r3, #0
 8003478:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800347a:	4a18      	ldr	r2, [pc, #96]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800347c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800347e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d04b      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348a:	f7fe fa8f 	bl	80019ac <HAL_GetTick>
 800348e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003490:	e00a      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003492:	f7fe fa8b 	bl	80019ac <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e0f5      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80034a8:	2302      	movs	r3, #2
 80034aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ae:	fa93 f3a3 	rbit	r3, r3
 80034b2:	627b      	str	r3, [r7, #36]	; 0x24
 80034b4:	2302      	movs	r3, #2
 80034b6:	623b      	str	r3, [r7, #32]
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	fa93 f3a3 	rbit	r3, r3
 80034be:	61fb      	str	r3, [r7, #28]
  return result;
 80034c0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c2:	fab3 f383 	clz	r3, r3
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	095b      	lsrs	r3, r3, #5
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	f043 0302 	orr.w	r3, r3, #2
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d108      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80034d6:	4b01      	ldr	r3, [pc, #4]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	e00d      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80034dc:	40021000 	.word	0x40021000
 80034e0:	40007000 	.word	0x40007000
 80034e4:	10908100 	.word	0x10908100
 80034e8:	2302      	movs	r3, #2
 80034ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	fa93 f3a3 	rbit	r3, r3
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	4b69      	ldr	r3, [pc, #420]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	2202      	movs	r2, #2
 80034fa:	613a      	str	r2, [r7, #16]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	fa92 f2a2 	rbit	r2, r2
 8003502:	60fa      	str	r2, [r7, #12]
  return result;
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	fab2 f282 	clz	r2, r2
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	f002 021f 	and.w	r2, r2, #31
 8003516:	2101      	movs	r1, #1
 8003518:	fa01 f202 	lsl.w	r2, r1, r2
 800351c:	4013      	ands	r3, r2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0b7      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003522:	4b5e      	ldr	r3, [pc, #376]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	495b      	ldr	r1, [pc, #364]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003530:	4313      	orrs	r3, r2
 8003532:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003534:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003538:	2b01      	cmp	r3, #1
 800353a:	d105      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800353c:	4b57      	ldr	r3, [pc, #348]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	4a56      	ldr	r2, [pc, #344]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003542:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003546:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	d008      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003554:	4b51      	ldr	r3, [pc, #324]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	f023 0203 	bic.w	r2, r3, #3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	494e      	ldr	r1, [pc, #312]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003562:	4313      	orrs	r3, r2
 8003564:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0320 	and.w	r3, r3, #32
 800356e:	2b00      	cmp	r3, #0
 8003570:	d008      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003572:	4b4a      	ldr	r3, [pc, #296]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	f023 0210 	bic.w	r2, r3, #16
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	4947      	ldr	r1, [pc, #284]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003580:	4313      	orrs	r3, r2
 8003582:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d008      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003590:	4b42      	ldr	r3, [pc, #264]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359c:	493f      	ldr	r1, [pc, #252]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d008      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035ae:	4b3b      	ldr	r3, [pc, #236]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	f023 0220 	bic.w	r2, r3, #32
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	4938      	ldr	r1, [pc, #224]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d008      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035cc:	4b33      	ldr	r3, [pc, #204]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	4930      	ldr	r1, [pc, #192]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d008      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035ea:	4b2c      	ldr	r3, [pc, #176]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	4929      	ldr	r1, [pc, #164]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003604:	2b00      	cmp	r3, #0
 8003606:	d008      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003608:	4b24      	ldr	r3, [pc, #144]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	4921      	ldr	r1, [pc, #132]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003616:	4313      	orrs	r3, r2
 8003618:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d008      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003626:	4b1d      	ldr	r3, [pc, #116]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	491a      	ldr	r1, [pc, #104]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003634:	4313      	orrs	r3, r2
 8003636:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d008      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003644:	4b15      	ldr	r3, [pc, #84]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003648:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	4912      	ldr	r1, [pc, #72]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003652:	4313      	orrs	r3, r2
 8003654:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d008      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003662:	4b0e      	ldr	r3, [pc, #56]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366e:	490b      	ldr	r1, [pc, #44]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003670:	4313      	orrs	r3, r2
 8003672:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d008      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003680:	4b06      	ldr	r3, [pc, #24]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003684:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	4903      	ldr	r1, [pc, #12]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800368e:	4313      	orrs	r3, r2
 8003690:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3748      	adds	r7, #72	; 0x48
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40021000 	.word	0x40021000

080036a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e01d      	b.n	80036ee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d106      	bne.n	80036cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7fd feca 	bl	8001460 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3304      	adds	r3, #4
 80036dc:	4619      	mov	r1, r3
 80036de:	4610      	mov	r0, r2
 80036e0:	f000 fa3e 	bl	8003b60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0201 	orr.w	r2, r2, #1
 800370e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	4b0c      	ldr	r3, [pc, #48]	; (8003748 <HAL_TIM_Base_Start_IT+0x50>)
 8003718:	4013      	ands	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2b06      	cmp	r3, #6
 8003720:	d00b      	beq.n	800373a <HAL_TIM_Base_Start_IT+0x42>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003728:	d007      	beq.n	800373a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 0201 	orr.w	r2, r2, #1
 8003738:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	00010007 	.word	0x00010007

0800374c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b02      	cmp	r3, #2
 8003760:	d122      	bne.n	80037a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b02      	cmp	r3, #2
 800376e:	d11b      	bne.n	80037a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f06f 0202 	mvn.w	r2, #2
 8003778:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f9c8 	bl	8003b24 <HAL_TIM_IC_CaptureCallback>
 8003794:	e005      	b.n	80037a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f9ba 	bl	8003b10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f9cb 	bl	8003b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d122      	bne.n	80037fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d11b      	bne.n	80037fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f06f 0204 	mvn.w	r2, #4
 80037cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2202      	movs	r2, #2
 80037d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f99e 	bl	8003b24 <HAL_TIM_IC_CaptureCallback>
 80037e8:	e005      	b.n	80037f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f990 	bl	8003b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f9a1 	bl	8003b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b08      	cmp	r3, #8
 8003808:	d122      	bne.n	8003850 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b08      	cmp	r3, #8
 8003816:	d11b      	bne.n	8003850 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f06f 0208 	mvn.w	r2, #8
 8003820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2204      	movs	r2, #4
 8003826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f974 	bl	8003b24 <HAL_TIM_IC_CaptureCallback>
 800383c:	e005      	b.n	800384a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f966 	bl	8003b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f977 	bl	8003b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	f003 0310 	and.w	r3, r3, #16
 800385a:	2b10      	cmp	r3, #16
 800385c:	d122      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f003 0310 	and.w	r3, r3, #16
 8003868:	2b10      	cmp	r3, #16
 800386a:	d11b      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f06f 0210 	mvn.w	r2, #16
 8003874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2208      	movs	r2, #8
 800387a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f94a 	bl	8003b24 <HAL_TIM_IC_CaptureCallback>
 8003890:	e005      	b.n	800389e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f93c 	bl	8003b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f94d 	bl	8003b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d10e      	bne.n	80038d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d107      	bne.n	80038d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f06f 0201 	mvn.w	r2, #1
 80038c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f916 	bl	8003afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038da:	2b80      	cmp	r3, #128	; 0x80
 80038dc:	d10e      	bne.n	80038fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e8:	2b80      	cmp	r3, #128	; 0x80
 80038ea:	d107      	bne.n	80038fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 faaa 	bl	8003e50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800390a:	d10e      	bne.n	800392a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003916:	2b80      	cmp	r3, #128	; 0x80
 8003918:	d107      	bne.n	800392a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fa9d 	bl	8003e64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003934:	2b40      	cmp	r3, #64	; 0x40
 8003936:	d10e      	bne.n	8003956 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003942:	2b40      	cmp	r3, #64	; 0x40
 8003944:	d107      	bne.n	8003956 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800394e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f8fb 	bl	8003b4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	f003 0320 	and.w	r3, r3, #32
 8003960:	2b20      	cmp	r3, #32
 8003962:	d10e      	bne.n	8003982 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f003 0320 	and.w	r3, r3, #32
 800396e:	2b20      	cmp	r3, #32
 8003970:	d107      	bne.n	8003982 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f06f 0220 	mvn.w	r2, #32
 800397a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 fa5d 	bl	8003e3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003982:	bf00      	nop
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b084      	sub	sp, #16
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
 8003992:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <HAL_TIM_ConfigClockSource+0x18>
 800399e:	2302      	movs	r3, #2
 80039a0:	e0a8      	b.n	8003af4 <HAL_TIM_ConfigClockSource+0x16a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2202      	movs	r2, #2
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039c0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039c4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039cc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b40      	cmp	r3, #64	; 0x40
 80039dc:	d067      	beq.n	8003aae <HAL_TIM_ConfigClockSource+0x124>
 80039de:	2b40      	cmp	r3, #64	; 0x40
 80039e0:	d80b      	bhi.n	80039fa <HAL_TIM_ConfigClockSource+0x70>
 80039e2:	2b10      	cmp	r3, #16
 80039e4:	d073      	beq.n	8003ace <HAL_TIM_ConfigClockSource+0x144>
 80039e6:	2b10      	cmp	r3, #16
 80039e8:	d802      	bhi.n	80039f0 <HAL_TIM_ConfigClockSource+0x66>
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d06f      	beq.n	8003ace <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80039ee:	e078      	b.n	8003ae2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80039f0:	2b20      	cmp	r3, #32
 80039f2:	d06c      	beq.n	8003ace <HAL_TIM_ConfigClockSource+0x144>
 80039f4:	2b30      	cmp	r3, #48	; 0x30
 80039f6:	d06a      	beq.n	8003ace <HAL_TIM_ConfigClockSource+0x144>
      break;
 80039f8:	e073      	b.n	8003ae2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80039fa:	2b70      	cmp	r3, #112	; 0x70
 80039fc:	d00d      	beq.n	8003a1a <HAL_TIM_ConfigClockSource+0x90>
 80039fe:	2b70      	cmp	r3, #112	; 0x70
 8003a00:	d804      	bhi.n	8003a0c <HAL_TIM_ConfigClockSource+0x82>
 8003a02:	2b50      	cmp	r3, #80	; 0x50
 8003a04:	d033      	beq.n	8003a6e <HAL_TIM_ConfigClockSource+0xe4>
 8003a06:	2b60      	cmp	r3, #96	; 0x60
 8003a08:	d041      	beq.n	8003a8e <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003a0a:	e06a      	b.n	8003ae2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a10:	d066      	beq.n	8003ae0 <HAL_TIM_ConfigClockSource+0x156>
 8003a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a16:	d017      	beq.n	8003a48 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003a18:	e063      	b.n	8003ae2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	6899      	ldr	r1, [r3, #8]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f000 f981 	bl	8003d30 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a3c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	609a      	str	r2, [r3, #8]
      break;
 8003a46:	e04c      	b.n	8003ae2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6818      	ldr	r0, [r3, #0]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	6899      	ldr	r1, [r3, #8]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f000 f96a 	bl	8003d30 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a6a:	609a      	str	r2, [r3, #8]
      break;
 8003a6c:	e039      	b.n	8003ae2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6818      	ldr	r0, [r3, #0]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	6859      	ldr	r1, [r3, #4]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	f000 f8de 	bl	8003c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2150      	movs	r1, #80	; 0x50
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 f937 	bl	8003cfa <TIM_ITRx_SetConfig>
      break;
 8003a8c:	e029      	b.n	8003ae2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6818      	ldr	r0, [r3, #0]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	6859      	ldr	r1, [r3, #4]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	f000 f8fd 	bl	8003c9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2160      	movs	r1, #96	; 0x60
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 f927 	bl	8003cfa <TIM_ITRx_SetConfig>
      break;
 8003aac:	e019      	b.n	8003ae2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	6859      	ldr	r1, [r3, #4]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	461a      	mov	r2, r3
 8003abc:	f000 f8be 	bl	8003c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2140      	movs	r1, #64	; 0x40
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 f917 	bl	8003cfa <TIM_ITRx_SetConfig>
      break;
 8003acc:	e009      	b.n	8003ae2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	4610      	mov	r0, r2
 8003ada:	f000 f90e 	bl	8003cfa <TIM_ITRx_SetConfig>
      break;
 8003ade:	e000      	b.n	8003ae2 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003ae0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a2e      	ldr	r2, [pc, #184]	; (8003c2c <TIM_Base_SetConfig+0xcc>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d003      	beq.n	8003b80 <TIM_Base_SetConfig+0x20>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b7e:	d108      	bne.n	8003b92 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a25      	ldr	r2, [pc, #148]	; (8003c2c <TIM_Base_SetConfig+0xcc>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00f      	beq.n	8003bba <TIM_Base_SetConfig+0x5a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba0:	d00b      	beq.n	8003bba <TIM_Base_SetConfig+0x5a>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a22      	ldr	r2, [pc, #136]	; (8003c30 <TIM_Base_SetConfig+0xd0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d007      	beq.n	8003bba <TIM_Base_SetConfig+0x5a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a21      	ldr	r2, [pc, #132]	; (8003c34 <TIM_Base_SetConfig+0xd4>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d003      	beq.n	8003bba <TIM_Base_SetConfig+0x5a>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a20      	ldr	r2, [pc, #128]	; (8003c38 <TIM_Base_SetConfig+0xd8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d108      	bne.n	8003bcc <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a0e      	ldr	r2, [pc, #56]	; (8003c2c <TIM_Base_SetConfig+0xcc>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d00b      	beq.n	8003c10 <TIM_Base_SetConfig+0xb0>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a0d      	ldr	r2, [pc, #52]	; (8003c30 <TIM_Base_SetConfig+0xd0>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d007      	beq.n	8003c10 <TIM_Base_SetConfig+0xb0>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a0c      	ldr	r2, [pc, #48]	; (8003c34 <TIM_Base_SetConfig+0xd4>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d003      	beq.n	8003c10 <TIM_Base_SetConfig+0xb0>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a0b      	ldr	r2, [pc, #44]	; (8003c38 <TIM_Base_SetConfig+0xd8>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d103      	bne.n	8003c18 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	615a      	str	r2, [r3, #20]
}
 8003c1e:	bf00      	nop
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	40012c00 	.word	0x40012c00
 8003c30:	40014000 	.word	0x40014000
 8003c34:	40014400 	.word	0x40014400
 8003c38:	40014800 	.word	0x40014800

08003c3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	f023 0201 	bic.w	r2, r3, #1
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f023 030a 	bic.w	r3, r3, #10
 8003c78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	621a      	str	r2, [r3, #32]
}
 8003c8e:	bf00      	nop
 8003c90:	371c      	adds	r7, #28
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b087      	sub	sp, #28
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	60b9      	str	r1, [r7, #8]
 8003ca4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	f023 0210 	bic.w	r2, r3, #16
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	031b      	lsls	r3, r3, #12
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	621a      	str	r2, [r3, #32]
}
 8003cee:	bf00      	nop
 8003cf0:	371c      	adds	r7, #28
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b085      	sub	sp, #20
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
 8003d02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f043 0307 	orr.w	r3, r3, #7
 8003d1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	609a      	str	r2, [r3, #8]
}
 8003d24:	bf00      	nop
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	021a      	lsls	r2, r3, #8
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	609a      	str	r2, [r3, #8]
}
 8003d64:	bf00      	nop
 8003d66:	371c      	adds	r7, #28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d84:	2302      	movs	r3, #2
 8003d86:	e04f      	b.n	8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a21      	ldr	r2, [pc, #132]	; (8003e34 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d108      	bne.n	8003dc4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003db8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a14      	ldr	r2, [pc, #80]	; (8003e34 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d009      	beq.n	8003dfc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df0:	d004      	beq.n	8003dfc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a10      	ldr	r2, [pc, #64]	; (8003e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d10c      	bne.n	8003e16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	40012c00 	.word	0x40012c00
 8003e38:	40014000 	.word	0x40014000

08003e3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e040      	b.n	8003f0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fd fb04 	bl	80014a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2224      	movs	r2, #36	; 0x24
 8003ea4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0201 	bic.w	r2, r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 fa28 	bl	800430c <UART_SetConfig>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d101      	bne.n	8003ec6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e022      	b.n	8003f0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d002      	beq.n	8003ed4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 fb9e 	bl	8004610 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ee2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689a      	ldr	r2, [r3, #8]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ef2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0201 	orr.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fc25 	bl	8004754 <UART_CheckIdleState>
 8003f0a:	4603      	mov	r3, r0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f26:	2b20      	cmp	r3, #32
 8003f28:	f040 808a 	bne.w	8004040 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <HAL_UART_Receive_IT+0x24>
 8003f32:	88fb      	ldrh	r3, [r7, #6]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e082      	b.n	8004042 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_UART_Receive_IT+0x36>
 8003f46:	2302      	movs	r3, #2
 8003f48:	e07b      	b.n	8004042 <HAL_UART_Receive_IT+0x12e>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	88fa      	ldrh	r2, [r7, #6]
 8003f5c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	88fa      	ldrh	r2, [r7, #6]
 8003f64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f76:	d10e      	bne.n	8003f96 <HAL_UART_Receive_IT+0x82>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d105      	bne.n	8003f8c <HAL_UART_Receive_IT+0x78>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003f86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f8a:	e02d      	b.n	8003fe8 <HAL_UART_Receive_IT+0xd4>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	22ff      	movs	r2, #255	; 0xff
 8003f90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f94:	e028      	b.n	8003fe8 <HAL_UART_Receive_IT+0xd4>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10d      	bne.n	8003fba <HAL_UART_Receive_IT+0xa6>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d104      	bne.n	8003fb0 <HAL_UART_Receive_IT+0x9c>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	22ff      	movs	r2, #255	; 0xff
 8003faa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fae:	e01b      	b.n	8003fe8 <HAL_UART_Receive_IT+0xd4>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	227f      	movs	r2, #127	; 0x7f
 8003fb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fb8:	e016      	b.n	8003fe8 <HAL_UART_Receive_IT+0xd4>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fc2:	d10d      	bne.n	8003fe0 <HAL_UART_Receive_IT+0xcc>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d104      	bne.n	8003fd6 <HAL_UART_Receive_IT+0xc2>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	227f      	movs	r2, #127	; 0x7f
 8003fd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fd4:	e008      	b.n	8003fe8 <HAL_UART_Receive_IT+0xd4>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	223f      	movs	r2, #63	; 0x3f
 8003fda:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fde:	e003      	b.n	8003fe8 <HAL_UART_Receive_IT+0xd4>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2222      	movs	r2, #34	; 0x22
 8003ff2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800400c:	d107      	bne.n	800401e <HAL_UART_Receive_IT+0x10a>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d103      	bne.n	800401e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4a0d      	ldr	r2, [pc, #52]	; (8004050 <HAL_UART_Receive_IT+0x13c>)
 800401a:	661a      	str	r2, [r3, #96]	; 0x60
 800401c:	e002      	b.n	8004024 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	4a0c      	ldr	r2, [pc, #48]	; (8004054 <HAL_UART_Receive_IT+0x140>)
 8004022:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800403a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800403c:	2300      	movs	r3, #0
 800403e:	e000      	b.n	8004042 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004040:	2302      	movs	r3, #2
  }
}
 8004042:	4618      	mov	r0, r3
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	08004a19 	.word	0x08004a19
 8004054:	08004973 	.word	0x08004973

08004058 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004078:	69fa      	ldr	r2, [r7, #28]
 800407a:	f640 030f 	movw	r3, #2063	; 0x80f
 800407e:	4013      	ands	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d113      	bne.n	80040b0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	f003 0320 	and.w	r3, r3, #32
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00e      	beq.n	80040b0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	f003 0320 	and.w	r3, r3, #32
 8004098:	2b00      	cmp	r3, #0
 800409a:	d009      	beq.n	80040b0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 8114 	beq.w	80042ce <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	4798      	blx	r3
      }
      return;
 80040ae:	e10e      	b.n	80042ce <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 80d6 	beq.w	8004264 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d105      	bne.n	80040ce <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 80cb 	beq.w	8004264 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00e      	beq.n	80040f6 <HAL_UART_IRQHandler+0x9e>
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d009      	beq.n	80040f6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2201      	movs	r2, #1
 80040e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040ee:	f043 0201 	orr.w	r2, r3, #1
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00e      	beq.n	800411e <HAL_UART_IRQHandler+0xc6>
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d009      	beq.n	800411e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2202      	movs	r2, #2
 8004110:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004116:	f043 0204 	orr.w	r2, r3, #4
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	f003 0304 	and.w	r3, r3, #4
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00e      	beq.n	8004146 <HAL_UART_IRQHandler+0xee>
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d009      	beq.n	8004146 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2204      	movs	r2, #4
 8004138:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800413e:	f043 0202 	orr.w	r2, r3, #2
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b00      	cmp	r3, #0
 800414e:	d013      	beq.n	8004178 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	f003 0320 	and.w	r3, r3, #32
 8004156:	2b00      	cmp	r3, #0
 8004158:	d104      	bne.n	8004164 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004160:	2b00      	cmp	r3, #0
 8004162:	d009      	beq.n	8004178 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2208      	movs	r2, #8
 800416a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004170:	f043 0208 	orr.w	r2, r3, #8
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00f      	beq.n	80041a2 <HAL_UART_IRQHandler+0x14a>
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004194:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800419a:	f043 0220 	orr.w	r2, r3, #32
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 8093 	beq.w	80042d2 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f003 0320 	and.w	r3, r3, #32
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00c      	beq.n	80041d0 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	f003 0320 	and.w	r3, r3, #32
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d007      	beq.n	80041d0 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041d4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e0:	2b40      	cmp	r3, #64	; 0x40
 80041e2:	d004      	beq.n	80041ee <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d031      	beq.n	8004252 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 fb70 	bl	80048d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fe:	2b40      	cmp	r3, #64	; 0x40
 8004200:	d123      	bne.n	800424a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004210:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004216:	2b00      	cmp	r3, #0
 8004218:	d013      	beq.n	8004242 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800421e:	4a30      	ldr	r2, [pc, #192]	; (80042e0 <HAL_UART_IRQHandler+0x288>)
 8004220:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004226:	4618      	mov	r0, r3
 8004228:	f7fd fda2 	bl	8001d70 <HAL_DMA_Abort_IT>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d016      	beq.n	8004260 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800423c:	4610      	mov	r0, r2
 800423e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004240:	e00e      	b.n	8004260 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f858 	bl	80042f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004248:	e00a      	b.n	8004260 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f854 	bl	80042f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004250:	e006      	b.n	8004260 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f850 	bl	80042f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800425e:	e038      	b.n	80042d2 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004260:	bf00      	nop
    return;
 8004262:	e036      	b.n	80042d2 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00d      	beq.n	800428a <HAL_UART_IRQHandler+0x232>
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d008      	beq.n	800428a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004280:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fc1b 	bl	8004abe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004288:	e026      	b.n	80042d8 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00d      	beq.n	80042b0 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429a:	2b00      	cmp	r3, #0
 800429c:	d008      	beq.n	80042b0 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d017      	beq.n	80042d6 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	4798      	blx	r3
    }
    return;
 80042ae:	e012      	b.n	80042d6 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00e      	beq.n	80042d8 <HAL_UART_IRQHandler+0x280>
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d009      	beq.n	80042d8 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 fb3b 	bl	8004940 <UART_EndTransmit_IT>
    return;
 80042ca:	bf00      	nop
 80042cc:	e004      	b.n	80042d8 <HAL_UART_IRQHandler+0x280>
      return;
 80042ce:	bf00      	nop
 80042d0:	e002      	b.n	80042d8 <HAL_UART_IRQHandler+0x280>
    return;
 80042d2:	bf00      	nop
 80042d4:	e000      	b.n	80042d8 <HAL_UART_IRQHandler+0x280>
    return;
 80042d6:	bf00      	nop
  }

}
 80042d8:	3720      	adds	r7, #32
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	08004915 	.word	0x08004915

080042e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b088      	sub	sp, #32
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004314:	2300      	movs	r3, #0
 8004316:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004318:	2300      	movs	r3, #0
 800431a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	431a      	orrs	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	431a      	orrs	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	4313      	orrs	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	4ba2      	ldr	r3, [pc, #648]	; (80045c4 <UART_SetConfig+0x2b8>)
 800433c:	4013      	ands	r3, r2
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6812      	ldr	r2, [r2, #0]
 8004342:	6939      	ldr	r1, [r7, #16]
 8004344:	430b      	orrs	r3, r1
 8004346:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4313      	orrs	r3, r2
 800436c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	430a      	orrs	r2, r1
 8004380:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a90      	ldr	r2, [pc, #576]	; (80045c8 <UART_SetConfig+0x2bc>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d121      	bne.n	80043d0 <UART_SetConfig+0xc4>
 800438c:	4b8f      	ldr	r3, [pc, #572]	; (80045cc <UART_SetConfig+0x2c0>)
 800438e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004390:	f003 0303 	and.w	r3, r3, #3
 8004394:	2b03      	cmp	r3, #3
 8004396:	d817      	bhi.n	80043c8 <UART_SetConfig+0xbc>
 8004398:	a201      	add	r2, pc, #4	; (adr r2, 80043a0 <UART_SetConfig+0x94>)
 800439a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439e:	bf00      	nop
 80043a0:	080043b1 	.word	0x080043b1
 80043a4:	080043bd 	.word	0x080043bd
 80043a8:	080043c3 	.word	0x080043c3
 80043ac:	080043b7 	.word	0x080043b7
 80043b0:	2300      	movs	r3, #0
 80043b2:	77fb      	strb	r3, [r7, #31]
 80043b4:	e01e      	b.n	80043f4 <UART_SetConfig+0xe8>
 80043b6:	2302      	movs	r3, #2
 80043b8:	77fb      	strb	r3, [r7, #31]
 80043ba:	e01b      	b.n	80043f4 <UART_SetConfig+0xe8>
 80043bc:	2304      	movs	r3, #4
 80043be:	77fb      	strb	r3, [r7, #31]
 80043c0:	e018      	b.n	80043f4 <UART_SetConfig+0xe8>
 80043c2:	2308      	movs	r3, #8
 80043c4:	77fb      	strb	r3, [r7, #31]
 80043c6:	e015      	b.n	80043f4 <UART_SetConfig+0xe8>
 80043c8:	2310      	movs	r3, #16
 80043ca:	77fb      	strb	r3, [r7, #31]
 80043cc:	bf00      	nop
 80043ce:	e011      	b.n	80043f4 <UART_SetConfig+0xe8>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a7e      	ldr	r2, [pc, #504]	; (80045d0 <UART_SetConfig+0x2c4>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d102      	bne.n	80043e0 <UART_SetConfig+0xd4>
 80043da:	2300      	movs	r3, #0
 80043dc:	77fb      	strb	r3, [r7, #31]
 80043de:	e009      	b.n	80043f4 <UART_SetConfig+0xe8>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a7b      	ldr	r2, [pc, #492]	; (80045d4 <UART_SetConfig+0x2c8>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d102      	bne.n	80043f0 <UART_SetConfig+0xe4>
 80043ea:	2300      	movs	r3, #0
 80043ec:	77fb      	strb	r3, [r7, #31]
 80043ee:	e001      	b.n	80043f4 <UART_SetConfig+0xe8>
 80043f0:	2310      	movs	r3, #16
 80043f2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043fc:	f040 8082 	bne.w	8004504 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8004400:	7ffb      	ldrb	r3, [r7, #31]
 8004402:	2b08      	cmp	r3, #8
 8004404:	d85e      	bhi.n	80044c4 <UART_SetConfig+0x1b8>
 8004406:	a201      	add	r2, pc, #4	; (adr r2, 800440c <UART_SetConfig+0x100>)
 8004408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440c:	08004431 	.word	0x08004431
 8004410:	08004451 	.word	0x08004451
 8004414:	08004471 	.word	0x08004471
 8004418:	080044c5 	.word	0x080044c5
 800441c:	0800448d 	.word	0x0800448d
 8004420:	080044c5 	.word	0x080044c5
 8004424:	080044c5 	.word	0x080044c5
 8004428:	080044c5 	.word	0x080044c5
 800442c:	080044ad 	.word	0x080044ad
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004430:	f7fe ff60 	bl	80032f4 <HAL_RCC_GetPCLK1Freq>
 8004434:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	005a      	lsls	r2, r3, #1
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	085b      	lsrs	r3, r3, #1
 8004440:	441a      	add	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	fbb2 f3f3 	udiv	r3, r2, r3
 800444a:	b29b      	uxth	r3, r3
 800444c:	61bb      	str	r3, [r7, #24]
        break;
 800444e:	e03c      	b.n	80044ca <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004450:	f7fe ff72 	bl	8003338 <HAL_RCC_GetPCLK2Freq>
 8004454:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	005a      	lsls	r2, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	085b      	lsrs	r3, r3, #1
 8004460:	441a      	add	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	fbb2 f3f3 	udiv	r3, r2, r3
 800446a:	b29b      	uxth	r3, r3
 800446c:	61bb      	str	r3, [r7, #24]
        break;
 800446e:	e02c      	b.n	80044ca <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	085b      	lsrs	r3, r3, #1
 8004476:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800447a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	6852      	ldr	r2, [r2, #4]
 8004482:	fbb3 f3f2 	udiv	r3, r3, r2
 8004486:	b29b      	uxth	r3, r3
 8004488:	61bb      	str	r3, [r7, #24]
        break;
 800448a:	e01e      	b.n	80044ca <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800448c:	f7fe febc 	bl	8003208 <HAL_RCC_GetSysClockFreq>
 8004490:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	005a      	lsls	r2, r3, #1
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	085b      	lsrs	r3, r3, #1
 800449c:	441a      	add	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	61bb      	str	r3, [r7, #24]
        break;
 80044aa:	e00e      	b.n	80044ca <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	085b      	lsrs	r3, r3, #1
 80044b2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80044be:	b29b      	uxth	r3, r3
 80044c0:	61bb      	str	r3, [r7, #24]
        break;
 80044c2:	e002      	b.n	80044ca <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	75fb      	strb	r3, [r7, #23]
        break;
 80044c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	2b0f      	cmp	r3, #15
 80044ce:	d916      	bls.n	80044fe <UART_SetConfig+0x1f2>
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d6:	d212      	bcs.n	80044fe <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	f023 030f 	bic.w	r3, r3, #15
 80044e0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	085b      	lsrs	r3, r3, #1
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	897b      	ldrh	r3, [r7, #10]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	897a      	ldrh	r2, [r7, #10]
 80044fa:	60da      	str	r2, [r3, #12]
 80044fc:	e07d      	b.n	80045fa <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	75fb      	strb	r3, [r7, #23]
 8004502:	e07a      	b.n	80045fa <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 8004504:	7ffb      	ldrb	r3, [r7, #31]
 8004506:	2b08      	cmp	r3, #8
 8004508:	d866      	bhi.n	80045d8 <UART_SetConfig+0x2cc>
 800450a:	a201      	add	r2, pc, #4	; (adr r2, 8004510 <UART_SetConfig+0x204>)
 800450c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004510:	08004535 	.word	0x08004535
 8004514:	08004553 	.word	0x08004553
 8004518:	08004571 	.word	0x08004571
 800451c:	080045d9 	.word	0x080045d9
 8004520:	0800458d 	.word	0x0800458d
 8004524:	080045d9 	.word	0x080045d9
 8004528:	080045d9 	.word	0x080045d9
 800452c:	080045d9 	.word	0x080045d9
 8004530:	080045ab 	.word	0x080045ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004534:	f7fe fede 	bl	80032f4 <HAL_RCC_GetPCLK1Freq>
 8004538:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	085a      	lsrs	r2, r3, #1
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	441a      	add	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	fbb2 f3f3 	udiv	r3, r2, r3
 800454c:	b29b      	uxth	r3, r3
 800454e:	61bb      	str	r3, [r7, #24]
        break;
 8004550:	e045      	b.n	80045de <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004552:	f7fe fef1 	bl	8003338 <HAL_RCC_GetPCLK2Freq>
 8004556:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	085a      	lsrs	r2, r3, #1
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	441a      	add	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	fbb2 f3f3 	udiv	r3, r2, r3
 800456a:	b29b      	uxth	r3, r3
 800456c:	61bb      	str	r3, [r7, #24]
        break;
 800456e:	e036      	b.n	80045de <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	085b      	lsrs	r3, r3, #1
 8004576:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800457a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6852      	ldr	r2, [r2, #4]
 8004582:	fbb3 f3f2 	udiv	r3, r3, r2
 8004586:	b29b      	uxth	r3, r3
 8004588:	61bb      	str	r3, [r7, #24]
        break;
 800458a:	e028      	b.n	80045de <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800458c:	f7fe fe3c 	bl	8003208 <HAL_RCC_GetSysClockFreq>
 8004590:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	085a      	lsrs	r2, r3, #1
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	441a      	add	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	61bb      	str	r3, [r7, #24]
        break;
 80045a8:	e019      	b.n	80045de <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	085b      	lsrs	r3, r3, #1
 80045b0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045bc:	b29b      	uxth	r3, r3
 80045be:	61bb      	str	r3, [r7, #24]
        break;
 80045c0:	e00d      	b.n	80045de <UART_SetConfig+0x2d2>
 80045c2:	bf00      	nop
 80045c4:	efff69f3 	.word	0xefff69f3
 80045c8:	40013800 	.word	0x40013800
 80045cc:	40021000 	.word	0x40021000
 80045d0:	40004400 	.word	0x40004400
 80045d4:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	75fb      	strb	r3, [r7, #23]
        break;
 80045dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	2b0f      	cmp	r3, #15
 80045e2:	d908      	bls.n	80045f6 <UART_SetConfig+0x2ea>
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ea:	d204      	bcs.n	80045f6 <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	60da      	str	r2, [r3, #12]
 80045f4:	e001      	b.n	80045fa <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004606:	7dfb      	ldrb	r3, [r7, #23]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3720      	adds	r7, #32
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00a      	beq.n	800467e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	f003 0308 	and.w	r3, r3, #8
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	f003 0310 	and.w	r3, r3, #16
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00a      	beq.n	80046c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	f003 0320 	and.w	r3, r3, #32
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d01a      	beq.n	8004726 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800470e:	d10a      	bne.n	8004726 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	605a      	str	r2, [r3, #4]
  }
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af02      	add	r7, sp, #8
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004762:	f7fd f923 	bl	80019ac <HAL_GetTick>
 8004766:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	2b08      	cmp	r3, #8
 8004774:	d10e      	bne.n	8004794 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004776:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f82a 	bl	80047de <UART_WaitOnFlagUntilTimeout>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d001      	beq.n	8004794 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e020      	b.n	80047d6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0304 	and.w	r3, r3, #4
 800479e:	2b04      	cmp	r3, #4
 80047a0:	d10e      	bne.n	80047c0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f814 	bl	80047de <UART_WaitOnFlagUntilTimeout>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e00a      	b.n	80047d6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2220      	movs	r2, #32
 80047c4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2220      	movs	r2, #32
 80047ca:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b084      	sub	sp, #16
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	60f8      	str	r0, [r7, #12]
 80047e6:	60b9      	str	r1, [r7, #8]
 80047e8:	603b      	str	r3, [r7, #0]
 80047ea:	4613      	mov	r3, r2
 80047ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ee:	e05d      	b.n	80048ac <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047f6:	d059      	beq.n	80048ac <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f8:	f7fd f8d8 	bl	80019ac <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	429a      	cmp	r2, r3
 8004806:	d302      	bcc.n	800480e <UART_WaitOnFlagUntilTimeout+0x30>
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d11b      	bne.n	8004846 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800481c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0201 	bic.w	r2, r2, #1
 800482c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2220      	movs	r2, #32
 8004832:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2220      	movs	r2, #32
 8004838:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e042      	b.n	80048cc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	d02b      	beq.n	80048ac <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800485e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004862:	d123      	bne.n	80048ac <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800486c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800487c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0201 	bic.w	r2, r2, #1
 800488c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2220      	movs	r2, #32
 8004892:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2220      	movs	r2, #32
 8004898:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2220      	movs	r2, #32
 800489e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e00f      	b.n	80048cc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	69da      	ldr	r2, [r3, #28]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	4013      	ands	r3, r2
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	bf0c      	ite	eq
 80048bc:	2301      	moveq	r3, #1
 80048be:	2300      	movne	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	461a      	mov	r2, r3
 80048c4:	79fb      	ldrb	r3, [r7, #7]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d092      	beq.n	80047f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048ea:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0201 	bic.w	r2, r2, #1
 80048fa:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2220      	movs	r2, #32
 8004900:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f7ff fce0 	bl	80042f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004938:	bf00      	nop
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004956:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2220      	movs	r2, #32
 800495c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7ff fcbd 	bl	80042e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800496a:	bf00      	nop
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b084      	sub	sp, #16
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004980:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004986:	2b22      	cmp	r3, #34	; 0x22
 8004988:	d13a      	bne.n	8004a00 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004990:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004992:	89bb      	ldrh	r3, [r7, #12]
 8004994:	b2d9      	uxtb	r1, r3
 8004996:	89fb      	ldrh	r3, [r7, #14]
 8004998:	b2da      	uxtb	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499e:	400a      	ands	r2, r1
 80049a0:	b2d2      	uxtb	r2, r2
 80049a2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a8:	1c5a      	adds	r2, r3, #1
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	3b01      	subs	r3, #1
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d121      	bne.n	8004a10 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80049da:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689a      	ldr	r2, [r3, #8]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 0201 	bic.w	r2, r2, #1
 80049ea:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2220      	movs	r2, #32
 80049f0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7fc fa1d 	bl	8000e38 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80049fe:	e007      	b.n	8004a10 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	699a      	ldr	r2, [r3, #24]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0208 	orr.w	r2, r2, #8
 8004a0e:	619a      	str	r2, [r3, #24]
}
 8004a10:	bf00      	nop
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a26:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a2c:	2b22      	cmp	r3, #34	; 0x22
 8004a2e:	d13a      	bne.n	8004aa6 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a36:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004a3e:	89ba      	ldrh	r2, [r7, #12]
 8004a40:	89fb      	ldrh	r3, [r7, #14]
 8004a42:	4013      	ands	r3, r2
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4e:	1c9a      	adds	r2, r3, #2
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d121      	bne.n	8004ab6 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a80:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 0201 	bic.w	r2, r2, #1
 8004a90:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2220      	movs	r2, #32
 8004a96:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7fc f9ca 	bl	8000e38 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004aa4:	e007      	b.n	8004ab6 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	699a      	ldr	r2, [r3, #24]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f042 0208 	orr.w	r2, r2, #8
 8004ab4:	619a      	str	r2, [r3, #24]
}
 8004ab6:	bf00      	nop
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
	...

08004ad4 <__libc_init_array>:
 8004ad4:	b570      	push	{r4, r5, r6, lr}
 8004ad6:	4e0d      	ldr	r6, [pc, #52]	; (8004b0c <__libc_init_array+0x38>)
 8004ad8:	4c0d      	ldr	r4, [pc, #52]	; (8004b10 <__libc_init_array+0x3c>)
 8004ada:	1ba4      	subs	r4, r4, r6
 8004adc:	10a4      	asrs	r4, r4, #2
 8004ade:	2500      	movs	r5, #0
 8004ae0:	42a5      	cmp	r5, r4
 8004ae2:	d109      	bne.n	8004af8 <__libc_init_array+0x24>
 8004ae4:	4e0b      	ldr	r6, [pc, #44]	; (8004b14 <__libc_init_array+0x40>)
 8004ae6:	4c0c      	ldr	r4, [pc, #48]	; (8004b18 <__libc_init_array+0x44>)
 8004ae8:	f000 f820 	bl	8004b2c <_init>
 8004aec:	1ba4      	subs	r4, r4, r6
 8004aee:	10a4      	asrs	r4, r4, #2
 8004af0:	2500      	movs	r5, #0
 8004af2:	42a5      	cmp	r5, r4
 8004af4:	d105      	bne.n	8004b02 <__libc_init_array+0x2e>
 8004af6:	bd70      	pop	{r4, r5, r6, pc}
 8004af8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004afc:	4798      	blx	r3
 8004afe:	3501      	adds	r5, #1
 8004b00:	e7ee      	b.n	8004ae0 <__libc_init_array+0xc>
 8004b02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b06:	4798      	blx	r3
 8004b08:	3501      	adds	r5, #1
 8004b0a:	e7f2      	b.n	8004af2 <__libc_init_array+0x1e>
 8004b0c:	08004b7c 	.word	0x08004b7c
 8004b10:	08004b7c 	.word	0x08004b7c
 8004b14:	08004b7c 	.word	0x08004b7c
 8004b18:	08004b80 	.word	0x08004b80

08004b1c <memset>:
 8004b1c:	4402      	add	r2, r0
 8004b1e:	4603      	mov	r3, r0
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d100      	bne.n	8004b26 <memset+0xa>
 8004b24:	4770      	bx	lr
 8004b26:	f803 1b01 	strb.w	r1, [r3], #1
 8004b2a:	e7f9      	b.n	8004b20 <memset+0x4>

08004b2c <_init>:
 8004b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2e:	bf00      	nop
 8004b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b32:	bc08      	pop	{r3}
 8004b34:	469e      	mov	lr, r3
 8004b36:	4770      	bx	lr

08004b38 <_fini>:
 8004b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3a:	bf00      	nop
 8004b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b3e:	bc08      	pop	{r3}
 8004b40:	469e      	mov	lr, r3
 8004b42:	4770      	bx	lr
